dnl	$Header: /scm/cvs/src/configure.in,v 1.22 1998/12/21 18:43:15 andreas Exp $
dnl
dnl	The new and improved configure file for Gwydion Dylan!
dnl	This is based on the old configure file, but rewritten to
dnl	support our goals for maintaining and improving the compiler.
dnl
dnl	Rules are annotated with codes:
dnl	  [M] Mindy-specific
dnl	  [C] d2c-specific
dnl	  [?] Might be specific to one or the other
dnl
dnl	One important restriction on this new configure file: we
dnl	don't support building parts of the distribution with Mindy
dnl	in the absense of d2c. If someone wants to reimplement those
dnl	features so that they work, send us mail.
dnl
dnl	We don't support cross-compilation yet, but we're working on
dnl	it.

#--------------------------------------------------------------------
# Emit configure initialization, verify that we're in the right
# source directory, and require autoconf version 2.12.
#--------------------------------------------------------------------

AC_INIT(common/format/format.dylan)
AC_PREREQ(2.12)

#--------------------------------------------------------------------
# Try to guess the right prefix based on a previous installation.
# You can override this with --prefix, of course.
#--------------------------------------------------------------------

AC_PREFIX_PROGRAM(melange)

#--------------------------------------------------------------------
# Make srcdir absolute to keep Mindy's build system from choking.
#--------------------------------------------------------------------

srcdir=`(cd $srcdir; pwd)`

#--------------------------------------------------------------------
# builddir is the directory in which we run configure.
#--------------------------------------------------------------------

builddir=`pwd`
AC_SUBST(builddir)

#--------------------------------------------------------------------
# [M] See if the #!interpreter syntax is supported.
#--------------------------------------------------------------------

AC_SYS_INTERPRETER
if test $ac_cv_sys_interpreter = no; then
    AC_DEFINE(NO_SHARP_BANG)
fi

#--------------------------------------------------------------------
# Find out what type of system we appear to be, and work out
# whether there's any cross-compiling going on.
#--------------------------------------------------------------------

AC_CANONICAL_SYSTEM		# Find the system type
AC_ARG_PROGRAM			# Provide support for name prefixes

AC_MSG_CHECKING(d2c build system type)
case $build in
    i*86-pc-linux-gnu*) d2c_build=x86-linux ;;
    hppa*-hp-hpux*) d2c_build=hppa-hpux ;;
    sparc*-solaris*) d2c_build=sparc-solaris ;;
    i*86-*-freebsd*) d2c_build=x86-freebsd ;;
    i*86-pc-cygwin32) d2c_build=x86-win32-gcc ;;
    i*86-pc-none) echo d2c_build=x86-win32-vc ;;
    powerpc-*-linux-gnu*) d2c_build=ppc-linux ;;
    *) d2c_build=unknown-unix ;;
esac
AC_MSG_RESULT($d2c_build)
AC_SUBST(d2c_build)

AC_MSG_CHECKING(d2c host system type)
case $host in
    i*86-pc-linux-gnu*) d2c_host=x86-linux ;;
    hppa*-hp-hpux*) d2c_host=hppa-hpux ;;
    sparc*-solaris*) d2c_host=sparc-solaris ;;
    i*86-*-freebsd*) d2c_host=x86-freebsd ;;
    i*86-pc-cygwin32) d2c_host=x86-win32-gcc ;;
    i*86-pc-none) echo d2c_host=x86-win32-vc ;;
    powerpc-*-linux-gnu*) d2c_host=ppc-linux ;;
    *) d2c_host=unknown-unix ;;
esac
AC_MSG_RESULT($d2c_host)
AC_SUBST(d2c_host)

AC_MSG_CHECKING(d2c target system type)
case $target in
    i*86-pc-linux-gnu*) d2c_target=x86-linux ;;
    hppa*-hp-hpux*) d2c_target=hppa-hpux ;;
    sparc*-solaris*) d2c_target=sparc-solaris ;;
    i*86-*-freebsd*) d2c_target=x86-freebsd ;;
    i*86-pc-cygwin32) d2c_target=x86-win32-gcc ;;
    i*86-pc-none) echo d2c_target=x86-win32-vc ;;
    powerpc-*-linux-gnu*) d2c_target=ppc-linux ;;
    *) d2c_target=unknown-unix ;;
esac
AC_MSG_RESULT($d2c_target)
AC_SUBST(d2c_target)

#AC_MSG_CHECKING(to see if we're cross-compiling)
#cross_compiling=no
#if test "$build" != "$host"; then
#    cross_compiling=yes
#fi
#AC_MSG_RESULT($cross_compiling)

#AC_MSG_CHECKING(to see if we're building a cross-compiler)
#cross_compiler=no
#if test "$host" != "$target"; then
#    cross_compiler=yes
#fi
#AC_MSG_RESULT($cross_compiler)

#--------------------------------------------------------------------
# Look for various programs which we might need. If these are
# missing, we want to deal with them early.
#--------------------------------------------------------------------

AC_PATH_PROG(PERL, perl, no)

if test "$PERL" = no; then
    AC_MSG_ERROR(Cannot build without perl to run gen-makefile)
fi

AC_PROG_INSTALL
AC_PROG_CC			# Specify when cross-compiling.
AC_PROG_LEX
AC_PROG_YACC

AC_CHECK_TOOL(RANLIB, ranlib, :)

AC_PATH_PROG(EMACS, emacs, no)

if test "$EMACS" = no
then
	AC_PATH_PROG(EMACS, xemacs, no)
fi

#--------------------------------------------------------------------
# Figure out what to do with Mindy. If we're cross-compiling, we'll
# skip it entirely.
#--------------------------------------------------------------------

# If self compiling, always run mindy out of the build area, since the
# installed version might be wrong.
MINDY=$builddir/mindy/interp/mindy
MC=$builddir/mindy/comp/mindycomp

# Set DYLANPATH so that we can find the uninstalled libraries.
DYLANPATH=""
for dir in coll-ext format format-out internal-time matrix print \
    regexp standard-io stream-ext streams string-ext table-ext time \
    transcendental getopt
do DYLANPATH=${DYLANPATH}":"$builddir/common/$dir
done
for dir in random dylan inspector tk;
do DYLANPATH=${DYLANPATH}":"$builddir/mindy/libraries/$dir
done

DYLANPATH='"'$DYLANPATH'"'
AC_SUBST(DYLANPATH)
AC_SUBST(MINDY)
AC_SUBST(MC)

#--------------------------------------------------------------------
# Figure out what to do with d2c. If we're cross-compiling, we'll
# need to rewrite this.
# Do we want to use the installed platforms.descr or the current one?
#--------------------------------------------------------------------

AC_PATH_PROG(D2C, d2c, no)

if test "$D2C" != no; then
    AC_MSG_CHECKING(how to call d2c)
    D2C_PREFIX=`echo "$D2C" | sed 's#/bin/.*##'`
    PREFERED_DESCR="$D2C_PREFIX/etc/platforms.descr"
    if test -f $PREFERED_DESCR; then
        D2C="$D2C -p$PREFERED_DESCR"
	AC_MSG_RESULT($D2C)
    else
        if test -f $sysconfdir/platforms.descr; then
            D2C="$D2C -p$sysconfdir/platforms.descr"
        else
            D2C="$D2C -p$srcdir/d2c/compiler/platforms.descr"
        fi
	AC_MSG_RESULT($D2C)
	AC_MSG_WARN(cannot find $PREFERED_DESCR, which would be better)
    fi
fi

#--------------------------------------------------------------------
# Check to see if the user asked us not to build Mindy or d2c.
#--------------------------------------------------------------------

AC_ARG_ENABLE(mindy, [  --disable-mindy         Don't build Mindy])
AC_ARG_ENABLE(d2c,   [  --disable-d2c           Don't build d2c])

if test "$D2C" = no; then
    enable_d2c=no
fi

if test "$cross_compiling" = "yes"; then
    enable_mindy=no
fi

enable_d2c=${enable_d2c:-yes}
AC_MSG_CHECKING(whether to build d2c)
AC_MSG_RESULT($enable_d2c)
AC_SUBST(enable_d2c)

enable_mindy=${enable_mindy:-yes}
AC_MSG_CHECKING(whether to build mindy)
AC_MSG_RESULT($enable_mindy)
AC_SUBST(enable_mindy)

if test "$enable_mindy" = "no" -a "$enable_d2c" = "no" ; then
    AC_MSG_ERROR([\
Not intending to build either mindy or d2c. Please check to see if
your system is supported, or specify fewer --disable-FOO flags.])
fi

#--------------------------------------------------------------------
# Check to see if we are bootstrapping with Mindy
#--------------------------------------------------------------------
AC_ARG_ENABLE(mindy-bootstrap,[\
  --enable-mindy-bootstrap
                          Bootstrap d2c with Mindy. This can easily take one
                          on more days, and is normally done only when porting
                          d2c to a new architecture for the first time. Trust
                          us; you want to get precompiled d2c binaries if any
                          are available for your system. See the README.])

if test "$D2C" = no; then
    enable_mindy_bootstrap=${enable_mindy_bootstrap:-no}
    AC_MSG_CHECKING(whether to bootstrap d2c with Mindy)
    AC_MSG_RESULT($enable_mindy_bootstrap)
    AC_SUBST(enable_mindy_bootstrap)

    if test $enable_mindy_bootstrap = yes; then
	enable_mindy=yes
	enable_d2c=yes
	D2C="$MINDY -f $builddir/d2c/compiler/main/d2c.dbc -p$srcdir/d2c/compiler/platforms.descr"
    else
	AC_MSG_WARN([Cannot build tools requiring d2c, try obtaining a binary
release for your platform or use the --enable-mindy-bootstrap option.])
    fi
else
    enable_mindy_bootstrap=no
fi

#====================================================================
# Start of section lifted from original configure.in.
# We might not need all the things we test for, but it's not worth
# the effort to trim this down to size. Note that much of this is
# Mindy-specific and doesn't apply to d2c. Like most things about
# configure, this should be considered magical until it breaks.
#====================================================================

#--------------------------------------------------------------------
#	Establish the default compile options for cc
#--------------------------------------------------------------------

if test $CC = gcc
then CCOPTS="-g -O4 -finline-functions -Wall"
else CCOPTS="-g -O"
fi
AC_SUBST(CCOPTS)

#--------------------------------------------------------------------
#	Establish the default options for lex
#--------------------------------------------------------------------

if test $LEX = flex; then
  LFLAGS=${LFLAGS--i}
else
  echo "I could not find flex, so do not try to rebuild comp/lexer-tab.c"
  echo "because lex cannot do it."
  LFLAGS=${LFLAGS-}
fi
AC_SUBST(LFLAGS)

#--------------------------------------------------------------------
#	Establish the default options for yacc
#--------------------------------------------------------------------

if test "$YACC" = "bison -y"; then
  # do nothing (an empty then clause is a syntax error)
  DUMMY=dummy
else
  echo "I could not find bison, so do not try to rebuild comp/parser-tab.c"
  echo "or interp/parser-tab.c because yacc cannot do it."
fi

#--------------------------------------------------------------------
#	Determine whether or not the time library can be supported
#--------------------------------------------------------------------

AC_MSG_CHECKING([whether or not daylight and timezone are supported])
AC_TRY_LINK([#include <time.h>], [int a = daylight; long b = timezone;],
  [AC_MSG_RESULT(yes); TIME_INC=$srcdir/common/time/time.inc],
  [AC_MSG_RESULT(no); TIME_INC=])
AC_SUBST(TIME_INC)

#--------------------------------------------------------------------
#	Find out if sigaction is available.
#--------------------------------------------------------------------

AC_FUNC_CHECK(sigaction, sigaction=1, sigaction=0)
if test $sigaction = 0; then
  AC_DEFINE(NO_SIGACTION)
  LIBOBJS="${LIBOBJS-} sigaction.o"
  AC_FUNC_CHECK(sigsetmask, sigsetmask=1, sigsetmask=0)
  AC_FUNC_CHECK(sigrelse, sigrelse=1, sigrelse=0)
  if test $sigsetmask = 1; then
    echo "BSD_signals"
    AC_DEFINE(BSD_SIGNALS)
  elif test $sigrelse = 1; then
    echo "USG_signals"
    AC_DEFINE(USG_SIGNALS)
  else
    echo "I couldn't find posix, bsd, or sysV signal support."
    echo "You may be able to compile compat/sigaction.c by hand."
  fi
fi

#--------------------------------------------------------------------
#	This next section is lifted from tcl-7.3, it deals with
#	establishing which of the known faults in POSIX compliance
#	need to be corrected.
#--------------------------------------------------------------------

#--------------------------------------------------------------------
#	Supply substitutes for missing POSIX library procedures, or
#	set flags so Tcl uses alternate procedures.
#--------------------------------------------------------------------

AC_REPLACE_FUNCS(getcwd opendir strerror strstr)
AC_REPLACE_FUNCS(strtol memmove tmpnam waitpid)
AC_CHECK_FUNC(gettimeofday, , AC_DEFINE(NO_GETTOD))
AC_CHECK_FUNC(getwd, , AC_DEFINE(NO_GETWD))
AC_CHECK_FUNC(wait3, , AC_DEFINE(NO_WAIT3))

#--------------------------------------------------------------------
#	Supply substitutes for missing POSIX header files.  Special
#	notes:
#	    - Sprite's dirent.h exists but is bogus.
#	    - stdlib.h doesn't define strtol, strtoul, or
#	      strtod insome versions of SunOS
#	    - some versions of string.h don't declare procedures such
#	      as strstr
#--------------------------------------------------------------------

AC_HEADER_CHECK(unistd.h, , AC_DEFINE(NO_UNISTD_H))
AC_MSG_CHECKING(dirent.h)
AC_TRY_COMPILE([#include <sys/types.h>
#include <dirent.h>], [
DIR *d;
struct dirent *entryPtr;
char *p;
d = opendir("foobar");
entryPtr = readdir(d);
p = entryPtr->d_name;
closedir(d);
], tcl_ok=1, tcl_ok=0)
AC_EGREP_HEADER([Sprite version.* NOT POSIX], dirent.h, tcl_ok=0)
if test $tcl_ok = 0; then
    AC_DEFINE(NO_DIRENT_H)
    AC_MSG_RESULT(no dirent.h)
else
    AC_MSG_RESULT(yes)
fi
AC_CHECK_HEADER(errno.h, , AC_DEFINE(NO_ERRNO_H))
AC_CHECK_HEADER(float.h, , AC_DEFINE(NO_FLOAT_H))
AC_CHECK_HEADER(limits.h, , AC_DEFINE(NO_LIMITS_H))
AC_CHECK_HEADER(bstring.h, , AC_DEFINE(NO_BSTRING_H))
AC_CHECK_HEADER(stdlib.h, tcl_ok=1, tcl_ok=0)
AC_EGREP_HEADER(getenv, stdlib.h, , tcl_ok=0)
AC_EGREP_HEADER(strtol, stdlib.h, , tcl_ok=0)
AC_EGREP_HEADER(strtoul, stdlib.h, , tcl_ok=0)
AC_EGREP_HEADER(strtod, stdlib.h, , tcl_ok=0)
if test $tcl_ok = 0; then
    AC_DEFINE(NO_STDLIB_H)
fi
AC_CHECK_HEADER(string.h, tcl_ok=1, tcl_ok=0)
AC_EGREP_HEADER(strstr, string.h, , tcl_ok=0)
AC_EGREP_HEADER(strerror, string.h, , tcl_ok=0)
if test $tcl_ok = 0; then
    AC_DEFINE(NO_STRING_H)
fi
AC_EGREP_HEADER(setsid, unistd.h, tcl_ok=1, tcl_ok=0)
if test $tcl_ok = 0; then
    LIBOBJS="${LIBOBJS-} setsid.o"
fi
AC_CHECK_HEADER(sys/time.h, , AC_DEFINE(NO_SYS_TIME_H))
AC_CHECK_HEADER(sys/wait.h, , AC_DEFINE(NO_SYS_WAIT_H))


#--------------------------------------------------------------------
#	Include sys/select.h if it exists and if it supplies things
#	that appear to be useful and aren't already in sys/types.h.
#	This appears to be true only on the RS/6000 under AIX.  Some
#	systems like OSF/1 have a sys/select.h that's of no use, and
#	other systems like SCO UNIX have a sys/select.h that's
#	pernicious.  If "fd_set" isn't defined anywhere then set a
#	special flag.
#--------------------------------------------------------------------

AC_MSG_CHECKING(fd_set)
AC_TRY_COMPILE([#include <sys/types.h>],
	[fd_set readMask, writeMask;], AC_MSG_RESULT(yes),
	[AC_EGREP_HEADER(fd_mask, sys/select.h, AC_DEFINE(HAVE_SYS_SELECT_H)
		AC_DEFINE(NO_FD_SET))
	 AC_MSG_RESULT(no fd_set)])

# On the HP, select is defined in sys/time.h
#
AC_EGREP_HEADER(select, sys/time.h, AC_DEFINE(SELECT_IN_TIME_H))


#--------------------------------------------------------------------
#	On some systems strstr is broken: it returns a pointer even
#	even if the original string is empty.
#--------------------------------------------------------------------

AC_TRY_RUN([
extern int strstr();
int main()
{
    exit(strstr("\0test", "test") ? 1 : 0);
}
],  , [LIBOBJS="${LIBOBJS-} strstr.o"])

#--------------------------------------------------------------------
#	Check for strtoul function.  This is tricky because under some
#	versions of AIX strtoul returns an incorrect terminator
#	pointer for the string "0".
#--------------------------------------------------------------------

AC_CHECK_FUNC(strtoul, tcl_ok=1, tcl_ok=0)
AC_TRY_RUN([
extern int strtoul();
int main()
{
    char *string = "0";
    char *term;
    int value;
    value = strtoul(string, &term, 0);
    if ((value != 0) || (term != (string+1))) {
        exit(1);
    }
    exit(0);
}], , tcl_ok=0)
if test $tcl_ok = 0; then
    LIBOBJS="${LIBOBJS-} strtoul.o"
fi

#--------------------------------------------------------------------
#	Check for the strtod function.  This is tricky because under
#	some versions of Linux it mis-parses the string "+".
#--------------------------------------------------------------------

AC_CHECK_FUNC(strtod, tcl_ok=1, tcl_ok=0)
AC_TRY_RUN([
extern double strtod();
int main()
{
    char *string = "+";
    char *term;
    double value;
    value = strtod(string, &term);
    if (term != string) {
	exit(1);
    }
    exit(0);
}], , tcl_ok=0)
if test $tcl_ok = 0; then
    LIBOBJS="${LIBOBJS-} strtod.o"
fi

#--------------------------------------------------------------------
#	Check for various typedefs and provide substitutes if
#	they don't exist.
#--------------------------------------------------------------------

AC_TYPE_MODE_T
AC_TYPE_PID_T
AC_TYPE_SIZE_T
AC_TYPE_UID_T

#--------------------------------------------------------------------
#	If a system doesn't have an opendir function (man, that's old!)
#	then we have to supply a different version of dirent.h which
#	is compatible with the substitute version of opendir that's
#	provided.  This version only works with V7-style directories.
#--------------------------------------------------------------------

AC_CHECK_FUNC(opendir, , AC_DEFINE(USE_DIRENT2_H))

#--------------------------------------------------------------------
#	Check for the existence of sys_errlist (this is only needed if
#	there's no strerror, but I don't know how to conditionalize the
#	check).
#--------------------------------------------------------------------

AC_MSG_CHECKING(sys_errlist)
AC_TRY_COMPILE( , [
extern char *sys_errlist[];
extern int sys_nerr;
sys_errlist[sys_nerr-1][0] = 0;
], AC_MSG_RESULT(yes), 
[AC_DEFINE(NO_SYS_ERRLIST)
 AC_MSG_RESULT(no sys_errlist)])

#--------------------------------------------------------------------
#	The check below checks whether <sys/wait.h> defines the type
#	"union wait" correctly.  It's needed because of weirdness in
#	HP-UX where "union wait" is defined in both the BSD and SYS-V
#	environments.  Checking the usability of WIFEXITED seems to do
#	the trick.
#--------------------------------------------------------------------

AC_MSG_CHECKING(union wait)
AC_TRY_COMPILE([#include <sys/types.h> 
#include <sys/wait.h>], [
union wait x;
WIFEXITED(x);		/* Generates compiler error if WIFEXITED
			 * uses an int. */
], AC_MSG_RESULT(yes), 
[AC_DEFINE(NO_UNION_WAIT)
 AC_MSG_RESULT(no union wait)])

#--------------------------------------------------------------------
#	Check to see whether the system supports the matherr function
#	and its associated type "struct exception".
#--------------------------------------------------------------------

AC_MSG_CHECKING(matherr support)
AC_TRY_COMPILE([#include <math.h>], [
struct exception x;
x.type = DOMAIN;
x.type = SING;
], [LIBOBJS="${LIBOBJS-} matherr.o"
    AC_DEFINE(NEED_MATHERR) 
    AC_MSG_RESULT(need matherr)],
AC_MSG_RESULT(don't need matherr))

#--------------------------------------------------------------------
#	End of the section lifted from tcl.
#--------------------------------------------------------------------

#--------------------------------------------------------------------
#	Check for rint()
#--------------------------------------------------------------------

LIBS="${LIBS-} -lm"
AC_CHECK_LIB(dld, shl_load)
AC_REPLACE_FUNCS(rint)

#--------------------------------------------------------------------
#	Check for GNU Readline library
#--------------------------------------------------------------------

AC_ARG_WITH(readline, \
[  --with-readline         Use GNU readline], \
              [if test $enableval = yes; then
                   AC_DEFINE(HAVE_LIBREADLINE)
		   echo "Using GNU Readline"
                   LIBS="${LIBS-} -lreadline -ltermcap"
               fi])

#--------------------------------------------------------------------
#	Check for HP shared library emulation on ELF systems
# testing for /usr/include/dlfcn.h might be a good automatic test?
#--------------------------------------------------------------------

AC_ARG_ENABLE(elflibs, \
[  --enable-elflibs        Use ELF shared libs], \
              [if test $enableval = yes; then
                   AC_DEFINE(HAVE_LIBDLDELF)
                   AC_DEFINE(HAVE_LIBDLD)
		   echo "Using ELF shared library support"
                   LIBOBJS="$LIBOBJS shl.o"
                   LIBS="${LIBS-} -ldl"
               fi])

#--------------------------------------------------------------------
#	Check to see whether we know how to read the number of bytes
#	in a stdio buffer.
#--------------------------------------------------------------------

AC_MSG_CHECKING(stdio support)
AC_TRY_COMPILE([#include <stdio.h>], [
FILE f;
(f._IO_read_ptr >= f._IO_read_end);
],[AC_DEFINE(USE_LINUX_FBUFEMPTYP)
   AC_MSG_RESULT(using Linux fbufempty)],
AC_TRY_COMPILE([#include <stdio.h>], [
FILE f;
(f._r <= 0);
],[AC_DEFINE(USE_BSD_FBUFEMPTYP)
   AC_MSG_RESULT(using BSD fbufempty)],
AC_MSG_RESULT(yes)))

#--------------------------------------------------------------------
#	Check to see if fsync is available.
#--------------------------------------------------------------------

AC_CHECK_FUNC(fsync, , AC_DEFINE(NO_FSYNC))

#--------------------------------------------------------------------
#	Look for select() in various places.
#	Tk adds all of these libraries that are found.
#	Under Irix 5.2, all three are found, but none should be
#	used.  Go figure.  So I test to see when select() is
#	found and stop adding libraries at that point.
#--------------------------------------------------------------------

AC_CHECK_FUNC(select, select=1, select=0)
SAVE_LIBS="$LIBS"
for lib in Xbsd socket nsl; do
  if test $select = 0; then
    AC_CHECK_LIB($lib, main, tryit=1, tryit=0)
    if test $tryit = 1; then
      LIBS="$LIBS -l$lib"
      AC_CHECK_FUNC(select, select=1, LIBS="$SAVE_LIBS")
    fi
  fi
done
if test $select = 0; then
  echo "I can't find a select() in any library I've looked in,"
  echo "and you won't be able to compile without it.  Sorry."
fi


#--------------------------------------------------------------------
#       See if _setjmp and _longjmp are defined.  If not, use
#       setjmp and longjmp.
#--------------------------------------------------------------------

AC_CHECK_FUNCS(_setjmp)
AC_CHECK_FUNCS(_longjmp)

#====================================================================
# End of section lifted from original configure.in.
#====================================================================


#--------------------------------------------------------------------
# Build and run config.status.
#--------------------------------------------------------------------

# Autoconf only seems to create one directory level at a time, so we need to
# create several directories which contain no Makefile.in.
# Note that we should probably do this in config.status, not configure,
# but since it's idempotent we can get away with doing it here.
$srcdir/mkinstalldirs mindy tools

AC_OUTPUT(Defaults \
	mindy/comp/Makefile \
	mindy/interp/Makefile \
	mindy/compat/Makefile \
	mindy/etc/Makefile \
	mindy/etc/generate-depends \
	mindy/interp/make-init.pl \
	tools/shared-misc/gen-makefile \
	tools/shared-misc/mk-build-tree \
	tools/shared-misc/line-count \
	tools/shared-misc/make-dylan-app \
	tools/unix-misc/mk-rcs-links, [
${INSTALL} -m uog+rx $builddir/tools/shared-misc/mk-build-tree ./
${INSTALL} -m uog+rx $builddir/tools/shared-misc/gen-makefile ./
(PATH=$builddir:$PATH; export PATH; mk-build-tree -p$srcdir/d2c/compiler/platforms.descr)
touch $builddir/force.timestamp
], [
srcdir=$srcdir
builddir=$builddir
])

