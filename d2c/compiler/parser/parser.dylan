module: parser
rcs-header: $Header: /scm/cvs/src/d2c/compiler/parser/Attic/parser.dylan,v 1.1 1998/05/03 19:55:29 andreas Exp $
copyright: Copyright (c) 1994  Carnegie Mellon University
	   All rights reserved.

define constant $action-bits = 2;
define constant $action-mask = ash(1, $action-bits) - 1;

define constant $error-action = 0;
define constant $accept-action = 1;
define constant $reduce-action = 2;
define constant $shift-action = 3;

define constant $action-table
  = #[#[42, 0, 203, 0, 0, 0, 0, 0, 0, 0, 0, 0, 575, 0, 0, 0, 63, 179, 0, 0, 0, 0, 0, 55, 59, 0, 0, 0, 0, 0, 231, 0, 0, 15, 263, 0, 0, 19, 319, 211, 19, 319, 211, 19, 319, 211, 19, 0, 587, 0, 35, 39, 207, 223, 219, 11, 31, 191, 559, 0, 0, 0, 0, 0, 0],
      #[54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[442, 0, 0, 442, 0, 0, 442, 0, 442, 0, 442, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 442, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1855, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1879, 0, 0, 0, 0, 19, 0, 0, 19, 0, 0, 19, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[518, 0, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 0, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 0, 0, 0, 0],
      #[510, 0, 0, 510, 510, 0, 510, 0, 0, 0, 0, 27, 0, 510, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 203, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 179, 0, 0, 0, 0, 0, 55, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 319, 211, 19, 319, 211, 19, 319, 211, 19, 0, 0, 0, 35, 39, 0, 0, 0, 0, 31, 191, 559, 0, 0, 0, 0, 0, 0],
      #[578, 0, 578, 578, 578, 578, 578, 578, 578, 0, 578, 0, 578, 578, 578, 578, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 578, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 578, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[638, 0, 638, 638, 638, 638, 638, 638, 638, 0, 638, 0, 638, 638, 638, 638, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 638, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 638, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[642, 0, 642, 642, 642, 642, 642, 642, 642, 0, 642, 0, 642, 642, 642, 642, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 642, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 642, 0, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[674, 0, 674, 674, 674, 674, 674, 674, 674, 0, 674, 0, 674, 674, 674, 674, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 674, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 674, 0, 674, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[646, 0, 646, 646, 646, 646, 646, 646, 646, 0, 646, 0, 646, 646, 646, 646, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 646, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 646, 0, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[678, 0, 678, 678, 678, 678, 678, 678, 678, 0, 678, 0, 678, 678, 678, 678, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 678, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 678, 0, 678, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[650, 0, 650, 650, 650, 650, 650, 650, 650, 0, 650, 0, 650, 650, 650, 650, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 650, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 650, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[654, 0, 654, 654, 654, 654, 654, 654, 654, 0, 654, 0, 654, 654, 654, 654, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 654, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 654, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 682, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 87, 91, 0, 0, 0, 0, 0, 79, 83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 71, 103, 0, 0, 0, 0, 95, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 706, 706, 706, 0, 0, 706, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 710, 710, 710, 0, 0, 710, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 714, 714, 714, 0, 0, 714, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 718, 718, 718, 0, 0, 718, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 722, 722, 722, 0, 0, 722, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 682, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 87, 91, 0, 0, 0, 0, 0, 79, 83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 71, 103, 0, 0, 0, 0, 95, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 682, 0, 0, 0, 0, 0, 0, 0, 87, 91, 0, 0, 0, 0, 0, 79, 83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 71, 103, 0, 0, 0, 0, 95, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 738, 738, 738, 0, 0, 738, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 698, 698, 698, 0, 0, 698, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 702, 702, 702, 0, 0, 702, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 690, 690, 690, 0, 0, 690, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 686, 115, 0, 0, 0, 686, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 87, 91, 0, 0, 0, 0, 0, 79, 83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 71, 103, 0, 0, 0, 0, 95, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 694, 694, 694, 0, 0, 694, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 734, 734, 734, 0, 0, 734, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 686, 115, 135, 0, 0, 686, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 87, 91, 0, 0, 0, 0, 0, 79, 83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 71, 103, 0, 0, 0, 0, 95, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 143, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 726, 726, 726, 0, 0, 726, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 151, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 730, 730, 730, 0, 0, 730, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 686, 115, 159, 0, 0, 686, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 87, 91, 0, 0, 0, 0, 0, 79, 83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 71, 103, 0, 0, 0, 0, 95, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 167, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[658, 0, 658, 658, 658, 658, 658, 658, 658, 0, 658, 0, 658, 658, 658, 658, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 658, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 658, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 175, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[662, 0, 662, 662, 662, 662, 662, 662, 662, 0, 662, 0, 662, 662, 662, 662, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 662, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 662, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 682, 0, 0, 0, 0, 0, 0, 0, 87, 91, 0, 0, 0, 0, 0, 79, 83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 71, 103, 0, 0, 0, 0, 95, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 187, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[666, 0, 666, 666, 666, 666, 666, 666, 666, 0, 666, 0, 666, 666, 666, 666, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 666, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 666, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[670, 0, 670, 670, 670, 670, 670, 670, 670, 0, 670, 0, 670, 670, 670, 670, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 670, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 670, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[614, 0, 614, 614, 614, 614, 614, 614, 614, 0, 614, 0, 614, 614, 614, 614, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 614, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 614, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[618, 0, 618, 618, 618, 618, 618, 618, 618, 0, 618, 0, 618, 618, 618, 618, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 618, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 618, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 203, 0, 0, 0, 0, 0, 0, 0, 0, 0, 575, 0, 0, 0, 63, 179, 0, 0, 0, 0, 0, 55, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 319, 211, 19, 319, 211, 19, 319, 211, 19, 0, 587, 0, 35, 39, 207, 0, 0, 0, 31, 191, 559, 0, 0, 0, 0, 0, 0],
      #[546, 0, 0, 546, 546, 0, 546, 0, 546, 0, 546, 0, 546, 546, 546, 546, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 546, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 546, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 215, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 459, 174, 479, 367, 483, 463, 0, 467, 0, 371, 355, 355, 355, 375, 419, 447, 395, 379, 383, 387, 391, 363, 363, 363, 363, 363, 363, 363, 231, 0, 0, 15, 263, 0, 399, 19, 319, 211, 19, 319, 211, 19, 319, 211, 19, 0, 359, 355, 403, 407, 411, 223, 219, 11, 331, 335, 339, 347, 343, 0, 0, 0, 0],
      #[390, 0, 0, 390, 0, 0, 390, 0, 390, 0, 390, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 390, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[402, 0, 0, 402, 0, 0, 402, 0, 402, 0, 402, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 402, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[394, 0, 0, 394, 0, 0, 394, 0, 394, 0, 394, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 394, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1059, 0, 235, 0, 0, 426, 426, 426, 426, 426, 426, 235, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 434, 0, 0, 434, 434, 434, 434, 434, 434, 434, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 243, 0, 0, 430, 430, 430, 430, 430, 430, 243, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 438, 0, 0, 438, 438, 438, 438, 438, 438, 438, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 251, 251, 251, 1019, 1019, 1019, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 459, 0, 479, 367, 483, 463, 0, 467, 0, 371, 355, 355, 355, 375, 419, 447, 395, 379, 383, 387, 391, 363, 363, 363, 363, 363, 363, 363, 231, 174, 0, 15, 263, 0, 399, 19, 319, 211, 19, 319, 211, 19, 319, 211, 19, 0, 359, 355, 403, 407, 411, 223, 219, 11, 331, 335, 339, 347, 343, 0, 0, 0, 0],
      #[0, 0, 0, 254, 0, 0, 259, 0, 254, 0, 254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 459, 174, 479, 367, 483, 463, 174, 467, 174, 371, 355, 355, 355, 375, 419, 447, 395, 379, 383, 387, 391, 363, 363, 363, 363, 363, 363, 363, 231, 174, 0, 15, 263, 0, 399, 19, 319, 211, 19, 319, 211, 19, 319, 211, 19, 0, 359, 355, 403, 407, 411, 223, 219, 11, 331, 335, 339, 347, 343, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 279, 275, 19, 279, 275, 19, 279, 275, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 846, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 19, 0, 0, 19, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 850, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[1478, 0, 0, 1478, 1478, 0, 1478, 0, 1478, 0, 1478, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1478, 0, 0, 0, 0, 0, 1478, 0, 0, 1478, 0, 0, 1478, 0, 0, 1478, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[1482, 0, 0, 1482, 1482, 0, 1482, 0, 1482, 0, 1482, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1482, 0, 0, 0, 0, 0, 1482, 0, 0, 1482, 0, 0, 1482, 0, 0, 1482, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 19, 0, 0, 19, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 854, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 295, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 894, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 703, 715, 727, 791, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 19, 0, 0, 19, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 299, 0, 0, 0, 0, 0],
      #[890, 0, 0, 890, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[958, 0, 0, 958, 958, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[510, 0, 0, 510, 510, 0, 510, 0, 0, 0, 0, 27, 0, 510, 311, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 203, 0, 0, 0, 0, 0, 0, 0, 0, 0, 575, 0, 0, 0, 63, 179, 0, 0, 0, 0, 0, 55, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 319, 211, 19, 319, 211, 19, 319, 211, 19, 0, 587, 0, 35, 39, 207, 0, 0, 0, 31, 191, 559, 0, 0, 0, 0, 0, 0],
      #[626, 0, 626, 626, 626, 626, 626, 626, 626, 0, 626, 0, 626, 626, 626, 626, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 626, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 626, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 459, 0, 479, 367, 483, 463, 0, 467, 0, 371, 355, 355, 355, 375, 419, 447, 395, 379, 383, 387, 391, 363, 363, 363, 363, 363, 363, 363, 231, 174, 0, 15, 263, 0, 399, 19, 319, 211, 19, 319, 211, 19, 319, 211, 19, 0, 359, 355, 403, 407, 411, 223, 219, 11, 331, 335, 339, 347, 343, 0, 0, 0, 0],
      #[0, 0, 0, 254, 0, 0, 259, 0, 254, 0, 254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 238, 0, 0, 0, 0, 238, 0, 238, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 238, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[306, 0, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 0, 306, 306, 0, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 0, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 0, 0, 0, 0],
      #[310, 0, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 0, 310, 310, 0, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 0, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 0, 0, 0, 0],
      #[314, 0, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 0, 314, 314, 0, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 0, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 0, 0, 0, 0],
      #[318, 0, 318, 318, 318, 318, 318, 318, 318, 318, 318, 318, 318, 318, 318, 318, 318, 318, 318, 318, 318, 318, 318, 318, 318, 318, 318, 318, 318, 318, 318, 318, 0, 318, 318, 0, 318, 318, 318, 318, 318, 318, 318, 318, 318, 318, 318, 0, 318, 318, 318, 318, 318, 318, 318, 318, 318, 318, 318, 318, 318, 0, 0, 0, 0],
      #[322, 0, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 0, 322, 322, 0, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 0, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 0, 0, 0, 0],
      #[326, 0, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 0, 326, 326, 0, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 0, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 0, 0, 0, 0],
      #[330, 0, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 0, 330, 330, 0, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 0, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 0, 0, 0, 0],
      #[334, 0, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 0, 334, 334, 0, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 0, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 0, 0, 0, 0],
      #[338, 0, 338, 338, 338, 338, 338, 338, 338, 338, 338, 338, 338, 338, 338, 338, 338, 338, 338, 338, 338, 338, 338, 338, 338, 338, 338, 338, 338, 338, 338, 338, 0, 338, 338, 0, 338, 338, 338, 338, 338, 338, 338, 338, 338, 338, 338, 0, 338, 338, 338, 338, 338, 338, 338, 338, 338, 338, 338, 338, 338, 0, 0, 0, 0],
      #[342, 0, 342, 342, 342, 342, 342, 342, 342, 342, 342, 342, 342, 342, 342, 342, 342, 342, 342, 342, 342, 342, 342, 342, 342, 342, 342, 342, 342, 342, 342, 342, 0, 342, 342, 0, 342, 342, 342, 342, 342, 342, 342, 342, 342, 342, 342, 0, 342, 342, 342, 342, 342, 342, 342, 342, 342, 342, 342, 342, 342, 0, 0, 0, 0],
      #[346, 0, 346, 346, 346, 346, 346, 346, 346, 346, 346, 346, 346, 346, 346, 346, 346, 346, 346, 346, 346, 346, 346, 346, 346, 346, 346, 346, 346, 346, 346, 346, 0, 346, 346, 0, 346, 346, 346, 346, 346, 346, 346, 346, 346, 346, 346, 0, 346, 346, 346, 346, 346, 346, 346, 346, 346, 346, 346, 346, 346, 0, 0, 0, 0],
      #[350, 0, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 0, 350, 350, 0, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 0, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 0, 0, 0, 0],
      #[354, 0, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 0, 354, 354, 0, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 0, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 0, 0, 0, 0],
      #[358, 0, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 0, 358, 358, 0, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 0, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 0, 0, 0, 0],
      #[362, 0, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 0, 362, 362, 0, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 0, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 0, 0, 0, 0],
      #[366, 0, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 0, 366, 366, 0, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 0, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 0, 0, 0, 0],
      #[370, 0, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 0, 370, 370, 0, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 0, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 0, 0, 0, 0],
      #[374, 0, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 0, 374, 374, 0, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 0, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 0, 0, 0, 0],
      #[378, 0, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 0, 378, 378, 0, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 0, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 0, 0, 0, 0],
      #[382, 0, 382, 382, 382, 382, 382, 382, 382, 382, 382, 382, 382, 382, 382, 382, 382, 382, 382, 382, 382, 382, 382, 382, 382, 382, 382, 382, 382, 382, 382, 382, 0, 382, 382, 0, 382, 382, 382, 382, 382, 382, 382, 382, 382, 382, 382, 0, 382, 382, 382, 382, 382, 382, 382, 382, 382, 382, 382, 382, 382, 0, 0, 0, 0],
      #[386, 0, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 0, 386, 386, 0, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 0, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 0, 0, 0, 0],
      #[274, 0, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 0, 274, 274, 0, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 0, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 0, 0, 0, 0],
      #[0, 0, 0, 682, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 87, 91, 0, 0, 0, 0, 0, 79, 83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 71, 103, 0, 0, 0, 0, 95, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 686, 115, 427, 0, 0, 686, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 87, 91, 0, 0, 0, 0, 0, 79, 83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 71, 103, 0, 0, 0, 0, 95, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 435, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[278, 0, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 0, 278, 278, 0, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 0, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 0, 0, 0, 0],
      #[0, 0, 0, 443, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[282, 0, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 0, 282, 282, 0, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 0, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 682, 0, 0, 0, 0, 0, 0, 0, 87, 91, 0, 0, 0, 0, 0, 79, 83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 71, 103, 0, 0, 0, 0, 95, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 455, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[286, 0, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 0, 286, 286, 0, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 0, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 0, 0, 0, 0],
      #[0, 0, 459, 174, 479, 367, 483, 463, 0, 467, 0, 371, 355, 355, 355, 375, 419, 447, 395, 379, 383, 387, 391, 363, 363, 363, 363, 363, 363, 363, 231, 0, 0, 15, 263, 0, 399, 19, 319, 211, 19, 319, 211, 19, 319, 211, 19, 0, 359, 355, 403, 407, 411, 223, 219, 11, 331, 335, 339, 347, 343, 0, 0, 0, 0],
      #[0, 0, 459, 0, 479, 367, 483, 463, 174, 467, 0, 371, 355, 355, 355, 375, 419, 447, 395, 379, 383, 387, 391, 363, 363, 363, 363, 363, 363, 363, 231, 0, 0, 15, 263, 0, 399, 19, 319, 211, 19, 319, 211, 19, 319, 211, 19, 0, 359, 355, 403, 407, 411, 223, 219, 11, 331, 335, 339, 347, 343, 0, 0, 0, 0],
      #[0, 0, 459, 0, 479, 367, 483, 463, 0, 467, 174, 371, 355, 355, 355, 375, 419, 447, 395, 379, 383, 387, 391, 363, 363, 363, 363, 363, 363, 363, 231, 0, 0, 15, 263, 0, 399, 19, 319, 211, 19, 319, 211, 19, 319, 211, 19, 0, 359, 355, 403, 407, 411, 223, 219, 11, 331, 335, 339, 347, 343, 0, 0, 0, 0],
      #[302, 0, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 0, 302, 302, 0, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 0, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 0, 0, 0, 0],
      #[0, 0, 459, 174, 479, 367, 483, 463, 174, 467, 174, 371, 355, 355, 355, 375, 419, 447, 395, 379, 383, 387, 391, 363, 363, 363, 363, 363, 363, 363, 231, 174, 0, 15, 263, 0, 399, 19, 319, 211, 19, 319, 211, 19, 319, 211, 19, 0, 359, 355, 403, 407, 411, 223, 219, 11, 331, 335, 339, 347, 343, 0, 0, 0, 0],
      #[0, 0, 459, 174, 479, 367, 483, 463, 174, 467, 174, 371, 355, 355, 355, 375, 419, 447, 395, 379, 383, 387, 391, 363, 363, 363, 363, 363, 363, 363, 231, 174, 0, 15, 263, 0, 399, 19, 319, 211, 19, 319, 211, 19, 319, 211, 19, 0, 359, 355, 403, 407, 411, 223, 219, 11, 331, 335, 339, 347, 343, 0, 0, 0, 0],
      #[0, 0, 459, 174, 479, 367, 483, 463, 174, 467, 174, 371, 355, 355, 355, 375, 419, 447, 395, 379, 383, 387, 391, 363, 363, 363, 363, 363, 363, 363, 231, 174, 0, 15, 263, 0, 399, 19, 319, 211, 19, 319, 211, 19, 319, 211, 19, 0, 359, 355, 403, 407, 411, 223, 219, 11, 331, 335, 339, 347, 343, 0, 0, 0, 0],
      #[0, 0, 0, 182, 0, 0, 0, 0, 182, 0, 182, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 182, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 459, 190, 479, 367, 483, 463, 190, 467, 190, 371, 355, 355, 355, 375, 419, 447, 395, 379, 383, 387, 391, 363, 363, 363, 363, 363, 363, 363, 231, 190, 0, 15, 263, 0, 399, 19, 0, 211, 19, 0, 211, 19, 0, 211, 19, 0, 359, 355, 403, 407, 411, 223, 219, 11, 331, 335, 339, 347, 343, 0, 0, 0, 0],
      #[0, 0, 0, 186, 0, 0, 0, 0, 186, 0, 186, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 186, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 178, 0, 0, 0, 0, 178, 0, 178, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 178, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 250, 0, 0, 0, 0, 250, 0, 250, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 250, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 246, 0, 0, 0, 0, 246, 0, 246, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 246, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 242, 0, 0, 0, 0, 242, 0, 242, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 242, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 519, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[298, 0, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 0, 298, 298, 0, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 0, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 527, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[294, 0, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 0, 294, 294, 0, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 0, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 0, 0, 0, 0],
      #[0, 0, 0, 535, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[290, 0, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 0, 290, 290, 0, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 0, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 543, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[750, 0, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 0, 750, 750, 0, 750, 750, 547, 750, 750, 547, 750, 750, 547, 750, 750, 0, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 0, 0, 0, 0],
      #[754, 0, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 0, 754, 754, 0, 754, 754, 0, 754, 754, 0, 754, 754, 0, 754, 754, 0, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 754, 0, 0, 0, 0],
      #[746, 0, 746, 746, 746, 746, 746, 746, 746, 746, 746, 746, 746, 746, 746, 746, 746, 746, 746, 746, 746, 746, 746, 746, 746, 746, 746, 746, 746, 746, 746, 746, 0, 746, 746, 0, 746, 746, 0, 746, 746, 0, 746, 746, 0, 746, 746, 0, 746, 746, 746, 746, 746, 746, 746, 746, 746, 746, 746, 746, 746, 0, 0, 0, 0],
      #[630, 0, 630, 630, 630, 630, 630, 630, 630, 0, 630, 0, 630, 630, 630, 630, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 630, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 630, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[634, 0, 634, 634, 634, 634, 634, 634, 634, 0, 634, 0, 634, 634, 634, 634, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 634, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 634, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[582, 0, 582, 582, 582, 582, 582, 582, 582, 0, 582, 0, 582, 582, 582, 582, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 582, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 582, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[554, 0, 571, 554, 554, 595, 554, 583, 554, 0, 554, 0, 554, 554, 554, 554, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 554, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 554, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 203, 586, 0, 0, 0, 0, 0, 0, 0, 0, 575, 0, 0, 0, 63, 179, 0, 0, 0, 0, 0, 55, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 319, 211, 19, 319, 211, 19, 319, 211, 19, 0, 587, 0, 35, 39, 627, 0, 0, 0, 31, 191, 559, 0, 0, 0, 0, 0, 0],
      #[0, 0, 203, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 179, 0, 0, 0, 0, 0, 55, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 319, 211, 19, 319, 211, 19, 319, 211, 19, 0, 0, 0, 35, 39, 0, 0, 0, 0, 31, 191, 559, 0, 0, 0, 0, 0, 0],
      #[558, 0, 571, 558, 558, 595, 558, 583, 558, 0, 558, 0, 558, 558, 558, 558, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 558, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 558, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 203, 0, 0, 0, 0, 0, 586, 0, 0, 0, 575, 0, 0, 0, 63, 179, 0, 0, 0, 0, 0, 55, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 319, 211, 19, 319, 211, 19, 319, 211, 19, 0, 587, 0, 35, 39, 627, 0, 0, 0, 31, 191, 559, 0, 0, 0, 0, 0, 0],
      #[0, 0, 203, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 179, 0, 0, 0, 0, 0, 55, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 319, 211, 19, 319, 211, 19, 319, 211, 19, 0, 0, 0, 35, 39, 0, 0, 0, 0, 31, 191, 559, 0, 0, 0, 0, 0, 0],
      #[562, 0, 571, 562, 562, 595, 562, 583, 562, 0, 562, 0, 562, 562, 562, 562, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 562, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 562, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 19, 0, 0, 19, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[574, 0, 574, 574, 574, 574, 574, 574, 574, 0, 574, 0, 574, 574, 574, 574, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 574, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 574, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 538, 538, 0, 0, 0, 538, 0, 0, 0, 538, 538, 538, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 538, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 534, 534, 0, 0, 0, 534, 0, 0, 0, 611, 611, 611, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 611, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 203, 0, 0, 0, 0, 0, 0, 0, 0, 0, 575, 0, 0, 0, 63, 179, 0, 0, 0, 0, 0, 55, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 319, 211, 19, 319, 211, 19, 319, 211, 19, 0, 587, 0, 35, 39, 207, 0, 0, 0, 31, 191, 559, 0, 0, 0, 0, 0, 0],
      #[550, 0, 0, 550, 550, 0, 550, 0, 550, 0, 550, 0, 550, 550, 550, 550, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 550, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 550, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 542, 542, 0, 0, 0, 542, 0, 0, 0, 542, 542, 542, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 542, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 606, 606, 0, 0, 0, 606, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 203, 610, 610, 0, 0, 0, 610, 0, 0, 0, 575, 0, 0, 0, 63, 179, 0, 0, 0, 0, 0, 55, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 319, 211, 19, 319, 211, 19, 319, 211, 19, 0, 587, 0, 35, 39, 207, 0, 0, 0, 31, 191, 559, 0, 0, 0, 0, 0, 0],
      #[526, 0, 0, 526, 526, 0, 526, 0, 526, 0, 526, 0, 526, 526, 526, 526, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 526, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 526, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[522, 0, 0, 522, 522, 0, 522, 0, 522, 0, 522, 0, 639, 639, 639, 522, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 522, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 639, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 203, 0, 0, 0, 0, 0, 0, 0, 0, 0, 575, 0, 0, 0, 63, 179, 0, 0, 0, 0, 0, 55, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 319, 211, 19, 319, 211, 19, 319, 211, 19, 0, 587, 0, 35, 39, 207, 0, 0, 0, 31, 191, 559, 0, 0, 0, 0, 0, 0],
      #[530, 0, 0, 530, 530, 0, 530, 0, 530, 0, 530, 0, 530, 530, 530, 530, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 530, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 530, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 602, 602, 0, 0, 0, 602, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 594, 594, 0, 0, 0, 594, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 590, 659, 0, 0, 0, 590, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 203, 0, 0, 0, 0, 0, 0, 0, 0, 0, 575, 0, 0, 0, 63, 179, 0, 0, 0, 0, 0, 55, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 319, 211, 19, 319, 211, 19, 319, 211, 19, 0, 587, 0, 35, 39, 627, 0, 0, 0, 31, 191, 559, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 598, 598, 0, 0, 0, 598, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 671, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[570, 0, 570, 570, 570, 570, 570, 570, 570, 0, 570, 0, 570, 570, 570, 570, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 570, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 570, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 679, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[566, 0, 566, 566, 566, 566, 566, 566, 566, 0, 566, 0, 566, 566, 566, 566, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 566, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 566, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[962, 0, 0, 962, 962, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[950, 0, 0, 950, 950, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[898, 0, 0, 898, 695, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 703, 715, 727, 791, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 19, 0, 0, 19, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[954, 0, 0, 954, 954, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 19, 0, 0, 19, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[910, 0, 0, 910, 711, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 715, 727, 791, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 19, 0, 0, 19, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[922, 0, 0, 922, 723, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 727, 791, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[966, 0, 0, 966, 735, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 990, 0, 0, 990, 0, 0, 990, 0, 0, 990, 0, 0, 0, 0, 0, 743, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[934, 0, 0, 934, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 739, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[938, 0, 0, 938, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 994, 0, 0, 994, 0, 0, 994, 0, 0, 994, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 19, 0, 0, 19, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[998, 0, 0, 998, 998, 0, 0, 0, 0, 0, 0, 0, 0, 755, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 203, 0, 0, 0, 0, 0, 0, 0, 0, 0, 575, 0, 0, 0, 63, 179, 0, 0, 0, 0, 0, 55, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 319, 211, 19, 319, 211, 19, 319, 211, 19, 0, 587, 0, 35, 39, 207, 0, 0, 0, 31, 191, 559, 0, 0, 0, 0, 0, 0],
      #[1002, 0, 0, 1002, 1002, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[986, 0, 0, 986, 986, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[974, 0, 0, 974, 974, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[970, 0, 0, 970, 775, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 982, 0, 0, 0, 0, 0, 0, 0, 0, 982, 0, 0, 982, 0, 0, 982, 0, 0, 982, 0, 0, 0, 0, 0, 982, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 787, 0, 0, 0, 0, 0, 0, 0, 0, 990, 0, 0, 990, 0, 0, 990, 0, 0, 990, 0, 0, 0, 0, 0, 743, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[978, 0, 0, 978, 978, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[942, 0, 0, 942, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[946, 0, 0, 946, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[926, 0, 0, 926, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[930, 0, 0, 930, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[914, 0, 0, 914, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[918, 0, 0, 918, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[902, 0, 0, 902, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[906, 0, 0, 906, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 823, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1486, 0, 0, 0, 827, 0, 0, 0, 0, 0, 1486, 0, 0, 871, 1486, 1486, 0, 0, 0, 0, 0, 1486, 1486, 0, 0, 0, 0, 0, 1486, 1486, 0, 1486, 1486, 0, 0, 1486, 1486, 1486, 1486, 1486, 1486, 1486, 1486, 1486, 1486, 0, 1486, 0, 1486, 1486, 1486, 1486, 1486, 1486, 1486, 1486, 1486, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1490, 0, 0, 0, 0, 0, 0, 1490, 0, 0, 1490, 0, 0, 0, 1490, 1490, 0, 0, 0, 0, 0, 1490, 1490, 0, 0, 0, 0, 0, 1490, 1490, 0, 1490, 1490, 0, 0, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 0, 1490, 0, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 0, 0, 0, 0, 0, 0],
      #[0, 0, 203, 0, 0, 0, 0, 0, 0, 0, 0, 0, 575, 0, 0, 0, 63, 179, 0, 0, 0, 0, 0, 55, 59, 0, 0, 0, 0, 0, 231, 106, 0, 15, 263, 0, 0, 19, 319, 211, 19, 319, 211, 19, 319, 211, 19, 0, 587, 0, 35, 39, 207, 223, 219, 11, 31, 191, 559, 0, 0, 0, 0, 0, 0],
      #[130, 0, 0, 0, 0, 0, 130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[134, 0, 0, 0, 0, 0, 134, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 134, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[138, 0, 0, 0, 0, 0, 138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[122, 0, 0, 0, 0, 0, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[114, 0, 0, 0, 0, 0, 855, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[118, 0, 203, 0, 0, 0, 0, 0, 0, 0, 0, 0, 575, 0, 0, 0, 63, 179, 0, 0, 0, 0, 0, 55, 59, 0, 0, 0, 0, 0, 231, 118, 0, 15, 263, 0, 0, 19, 319, 211, 19, 319, 211, 19, 319, 211, 19, 0, 587, 0, 35, 39, 207, 223, 219, 11, 31, 191, 559, 0, 0, 0, 0, 0, 0],
      #[126, 0, 0, 0, 0, 0, 126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 878, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 887, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 19, 0, 0, 19, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 879, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 203, 0, 0, 0, 0, 0, 0, 0, 0, 0, 575, 0, 0, 0, 63, 179, 0, 0, 0, 0, 0, 55, 59, 0, 0, 0, 0, 0, 231, 106, 0, 15, 263, 0, 0, 19, 319, 211, 19, 319, 211, 19, 319, 211, 19, 0, 587, 0, 35, 39, 207, 223, 219, 11, 31, 191, 559, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 882, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 478, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 919, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 19, 0, 0, 19, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 891, 0, 0, 0, 0],
      #[486, 0, 0, 486, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[502, 0, 0, 502, 502, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[490, 0, 0, 490, 903, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 911, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 19, 0, 0, 19, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[506, 0, 0, 506, 506, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 19, 0, 0, 19, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[494, 0, 0, 494, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 19, 0, 0, 19, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[498, 0, 0, 498, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[482, 0, 0, 482, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 935, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1486, 0, 0, 0, 827, 0, 0, 0, 0, 0, 1486, 0, 0, 0, 1486, 1486, 0, 0, 0, 0, 0, 1486, 1486, 0, 0, 0, 0, 0, 1486, 1486, 0, 1486, 1486, 0, 0, 1486, 1486, 1486, 1486, 1486, 1486, 1486, 1486, 1486, 1486, 0, 1486, 0, 1486, 1486, 1486, 1486, 1486, 1486, 1486, 1486, 1486, 0, 0, 0, 0, 0, 0],
      #[0, 0, 203, 0, 0, 0, 0, 0, 0, 0, 0, 0, 575, 0, 0, 0, 63, 179, 0, 0, 0, 0, 0, 55, 59, 0, 0, 0, 0, 0, 231, 106, 0, 15, 263, 0, 0, 19, 319, 211, 19, 319, 211, 19, 319, 211, 19, 0, 587, 0, 35, 39, 207, 223, 219, 11, 31, 191, 559, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 886, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 951, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[858, 0, 0, 858, 858, 0, 858, 0, 858, 0, 858, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 858, 0, 0, 0, 0, 0, 19, 279, 275, 19, 279, 275, 19, 279, 275, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[862, 0, 0, 862, 862, 0, 862, 0, 862, 0, 862, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 862, 0, 0, 0, 0, 0, 19, 0, 0, 19, 0, 0, 19, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[866, 0, 0, 866, 866, 0, 866, 0, 866, 0, 866, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 866, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[870, 0, 0, 870, 870, 0, 870, 0, 870, 0, 870, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 870, 0, 0, 0, 0, 0, 19, 0, 0, 19, 0, 0, 19, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[874, 0, 0, 874, 874, 0, 874, 0, 874, 0, 874, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 874, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[842, 0, 0, 842, 842, 0, 842, 0, 842, 0, 842, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 842, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[462, 0, 0, 462, 462, 0, 462, 0, 462, 0, 462, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 462, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[458, 0, 0, 458, 983, 0, 458, 0, 458, 0, 458, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 458, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 279, 275, 19, 279, 275, 19, 279, 275, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[466, 0, 0, 466, 466, 0, 466, 0, 466, 0, 466, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 466, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 258, 0, 0, 0, 0, 258, 0, 258, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 258, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 234, 0, 0, 0, 0, 234, 0, 234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1003, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[418, 0, 0, 418, 0, 0, 418, 0, 418, 0, 418, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 418, 0, 0, 0, 0, 0, 1015, 1015, 1015, 1007, 1007, 1007, 1015, 1015, 1015, 1015, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[410, 0, 0, 410, 0, 0, 410, 0, 410, 0, 410, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 410, 0, 0, 0, 0, 0, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[406, 0, 0, 406, 0, 0, 406, 0, 406, 0, 406, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 406, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[414, 0, 0, 414, 0, 0, 414, 0, 414, 0, 414, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 414, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[194, 0, 459, 194, 1027, 367, 194, 463, 194, 467, 194, 371, 355, 355, 355, 375, 419, 447, 395, 379, 383, 387, 391, 363, 363, 363, 363, 363, 363, 363, 0, 194, 0, 0, 0, 0, 399, 19, 319, 211, 19, 319, 211, 19, 319, 211, 19, 0, 359, 355, 403, 407, 411, 0, 0, 0, 331, 335, 339, 347, 343, 0, 0, 0, 0],
      #[194, 0, 459, 194, 1027, 367, 194, 463, 194, 467, 194, 371, 355, 355, 355, 375, 419, 447, 395, 379, 383, 387, 391, 363, 363, 363, 363, 363, 363, 363, 0, 194, 0, 0, 0, 0, 399, 19, 319, 211, 19, 319, 211, 19, 319, 211, 19, 0, 359, 355, 403, 407, 411, 0, 0, 0, 331, 335, 339, 347, 343, 0, 0, 0, 0],
      #[194, 0, 459, 194, 1027, 367, 194, 463, 194, 467, 194, 371, 355, 355, 355, 375, 419, 447, 395, 379, 383, 387, 391, 363, 363, 363, 363, 363, 363, 363, 0, 194, 0, 0, 0, 0, 399, 19, 319, 211, 19, 319, 211, 19, 319, 211, 19, 0, 359, 355, 403, 407, 411, 0, 0, 0, 331, 335, 339, 347, 343, 0, 0, 0, 0],
      #[202, 0, 0, 202, 0, 0, 202, 0, 202, 0, 202, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 202, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[210, 0, 459, 210, 1027, 367, 210, 463, 210, 467, 210, 371, 355, 355, 355, 375, 419, 447, 395, 379, 383, 387, 391, 363, 363, 363, 363, 363, 363, 363, 0, 210, 0, 0, 0, 0, 399, 19, 0, 211, 19, 0, 211, 19, 0, 211, 19, 0, 359, 355, 403, 407, 411, 0, 0, 0, 331, 335, 339, 347, 343, 0, 0, 0, 0],
      #[206, 0, 0, 206, 0, 0, 206, 0, 206, 0, 206, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 206, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[198, 0, 0, 198, 0, 0, 198, 0, 198, 0, 198, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 198, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[266, 0, 0, 266, 0, 0, 266, 0, 266, 0, 266, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 266, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[262, 0, 0, 262, 0, 0, 262, 0, 262, 0, 262, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 262, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[422, 0, 0, 422, 0, 0, 422, 0, 422, 0, 422, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 422, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 1067, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1071, 0, 0, 0, 0, 0, 0, 19, 0, 0, 19, 0, 0, 19, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1343, 0, 0, 0, 0, 1347, 0, 1351, 0, 0, 0, 0, 0, 1339, 0, 0, 0, 1079, 0, 0, 1091, 0, 0, 0, 1075, 1319, 0, 0, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1079, 0, 0, 1091, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1087, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1202, 1202, 1202, 0, 1202, 1202, 1202, 1202, 1202, 1202, 0, 1202, 0, 1202, 0, 0, 0, 1202, 0, 0, 1202, 0, 0, 0, 0, 0, 0, 0, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1206, 1206, 1206, 0, 1206, 1206, 1206, 1206, 1206, 1206, 0, 1206, 0, 1206, 0, 0, 0, 1206, 0, 0, 1206, 0, 0, 0, 0, 0, 0, 0, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1210, 1210, 1210, 0, 1210, 1210, 1210, 1210, 1210, 1210, 0, 1210, 0, 1210, 0, 0, 0, 1210, 0, 0, 1210, 0, 0, 0, 0, 0, 0, 0, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 1214, 1099, 0, 1214, 0, 1214, 0, 1214, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 1226, 0, 0, 1226, 0, 1226, 0, 1226, 0, 0, 0, 0, 0, 0, 0, 0, 1111, 1271, 0, 0, 0, 0, 0, 0, 0, 1107, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 1234, 0, 0, 1234, 0, 1234, 0, 1234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1263, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 1270, 1270, 0, 1270, 0, 1270, 0, 1270, 0, 0, 1119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 0, 0, 0, 1278, 0, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 0, 1278, 1278, 1278, 1278, 1278, 0, 0, 0, 0, 1278, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1179, 1274, 1274, 1151, 1274, 1187, 1274, 1199, 1274, 1155, 1143, 1143, 1143, 1159, 1211, 1223, 0, 0, 0, 1167, 0, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1127, 1127, 1127, 1127, 1127, 1127, 1127, 1127, 1127, 1127, 1127, 1127, 1127, 1127, 1127, 1127, 1127, 0, 1143, 1143, 1135, 1139, 1131, 0, 0, 0, 0, 1163, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 0, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 0, 1434, 1434, 1434, 1434, 1434, 0, 0, 0, 0, 1434, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 0, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 0, 1438, 1438, 1438, 1438, 1438, 0, 0, 0, 0, 1438, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1442, 1442, 1442, 1442, 1442, 1442, 1442, 1442, 1442, 1442, 1442, 1442, 1442, 1442, 1442, 1442, 0, 1442, 1442, 1442, 1442, 1442, 1442, 1442, 1442, 1442, 1442, 1442, 1442, 1442, 1442, 1442, 1442, 1442, 1442, 1442, 1442, 1442, 1442, 1442, 1442, 1442, 1442, 1442, 1442, 0, 1442, 1442, 1442, 1442, 1442, 0, 0, 0, 0, 1442, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 0, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 0, 1446, 1446, 1446, 1446, 1446, 0, 0, 0, 0, 1446, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 0, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 0, 1450, 1450, 1450, 1450, 1450, 0, 0, 0, 0, 1450, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 0, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 0, 1454, 1454, 1454, 1454, 1454, 0, 0, 0, 0, 1454, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 0, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 0, 1458, 1458, 1458, 1458, 1458, 0, 0, 0, 0, 1458, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 0, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 0, 1462, 1462, 1462, 1462, 1462, 0, 0, 0, 0, 1462, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 0, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 0, 1466, 1466, 1466, 1466, 1466, 0, 0, 0, 0, 1466, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470, 0, 1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470, 0, 1470, 1470, 1470, 1470, 1470, 0, 0, 0, 0, 1470, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 0, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 0, 1474, 1474, 1474, 1474, 1474, 0, 0, 0, 0, 1474, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 0, 0, 0, 1286, 0, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 0, 1286, 1286, 1286, 1286, 1286, 0, 0, 0, 0, 1286, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1314, 1314, 1314, 1314, 1314, 1314, 0, 1314, 0, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 0, 0, 0, 1314, 0, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 0, 1314, 1314, 1314, 1314, 1314, 0, 0, 0, 0, 1314, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1179, 1310, 1239, 1151, 1243, 1187, 1310, 1199, 1310, 1155, 1143, 1143, 1143, 1159, 1211, 1223, 0, 0, 0, 1167, 0, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1127, 1127, 1127, 1127, 1127, 1127, 1127, 1127, 1127, 1127, 1127, 1127, 1127, 1127, 1127, 1127, 1127, 0, 1143, 1143, 1135, 1139, 1131, 0, 0, 0, 0, 1163, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1314, 0, 1314, 1314, 1314, 1314, 1314, 1314, 0, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 0, 0, 0, 1314, 0, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 0, 1314, 1314, 1314, 1314, 1314, 0, 0, 0, 0, 1314, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 1195, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 0, 0, 0, 1294, 0, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 0, 1294, 1294, 1294, 1294, 1294, 0, 0, 0, 0, 1294, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1314, 0, 1314, 1314, 1314, 1314, 0, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 0, 0, 0, 1314, 0, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 0, 1314, 1314, 1314, 1314, 1314, 0, 0, 0, 0, 1314, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1207, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 0, 0, 0, 1298, 0, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 0, 1298, 1298, 1298, 1298, 1298, 0, 0, 0, 0, 1298, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1314, 1314, 1314, 1314, 1314, 1314, 0, 1314, 0, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 0, 0, 0, 1314, 0, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 0, 1314, 1314, 1314, 1314, 1314, 0, 0, 0, 0, 1314, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 1219, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 0, 0, 0, 1302, 0, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 0, 1302, 1302, 1302, 1302, 1302, 0, 0, 0, 0, 1302, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1314, 0, 1314, 1314, 1314, 1314, 1314, 1314, 0, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 0, 0, 0, 1314, 0, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 0, 1314, 1314, 1314, 1314, 1314, 0, 0, 0, 0, 1314, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 1231, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 0, 0, 0, 1306, 0, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 0, 1306, 1306, 1306, 1306, 1306, 0, 0, 0, 0, 1306, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 0, 0, 0, 1318, 0, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 0, 1318, 1318, 1318, 1318, 1318, 0, 0, 0, 0, 1318, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 0, 0, 0, 1322, 0, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 0, 1322, 1322, 1322, 1322, 1322, 0, 0, 0, 0, 1322, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 0, 0, 0, 1326, 0, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 0, 1326, 1326, 1326, 1326, 1326, 0, 0, 0, 0, 1326, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 1251, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 0, 0, 0, 1290, 0, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 0, 1290, 1290, 1290, 1290, 1290, 0, 0, 0, 0, 1290, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 0, 0, 0, 1282, 0, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 0, 1282, 1282, 1282, 1282, 1282, 0, 0, 0, 0, 1282, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 1254, 1254, 0, 1254, 0, 1254, 0, 1254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 1270, 1270, 0, 1270, 0, 1270, 0, 1270, 0, 0, 1119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 1258, 1258, 0, 1258, 0, 1258, 0, 1258, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1283, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 1270, 1270, 0, 1270, 0, 1270, 0, 1270, 0, 0, 1119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 1262, 1262, 0, 1262, 0, 1262, 0, 1262, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 1270, 1270, 0, 1270, 0, 1270, 0, 1270, 0, 0, 1119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 1266, 1266, 0, 1266, 0, 1266, 0, 1266, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 1246, 1246, 0, 1246, 0, 1246, 0, 1246, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 1238, 1299, 0, 1238, 0, 1238, 0, 1238, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1111, 1271, 0, 0, 0, 0, 0, 0, 0, 1307, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 1250, 1250, 0, 1250, 0, 1250, 0, 1250, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 1242, 0, 0, 1242, 0, 1242, 0, 1242, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 1230, 0, 0, 1230, 0, 1230, 0, 1230, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 1218, 0, 0, 1218, 0, 1218, 0, 1218, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 1226, 0, 0, 1226, 0, 1226, 0, 1226, 0, 0, 0, 0, 0, 0, 0, 0, 1111, 1271, 0, 0, 0, 0, 0, 0, 0, 1107, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 1222, 0, 0, 1222, 0, 1222, 0, 1222, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 1138, 0, 0, 1138, 0, 1138, 0, 1138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 1118, 0, 0, 1118, 0, 1118, 0, 1118, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1158, 1158, 1158, 0, 1158, 1158, 1158, 1158, 1158, 0, 0, 0, 0, 1158, 0, 0, 0, 1158, 0, 0, 1158, 0, 0, 0, 0, 0, 0, 0, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1162, 1162, 1162, 0, 1162, 1162, 1162, 1162, 1162, 0, 0, 0, 0, 1162, 0, 0, 0, 1162, 0, 0, 1162, 0, 0, 0, 0, 0, 0, 0, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1343, 1094, 0, 0, 0, 1347, 0, 1351, 0, 0, 0, 0, 0, 1339, 0, 0, 0, 1079, 0, 0, 1091, 0, 0, 0, 1075, 1319, 0, 0, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1343, 0, 0, 0, 0, 1347, 1094, 1351, 0, 0, 0, 0, 0, 1339, 0, 0, 0, 1079, 0, 0, 1091, 0, 0, 0, 1075, 1319, 0, 0, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1343, 0, 0, 0, 0, 1347, 0, 1351, 1094, 0, 0, 0, 0, 1339, 0, 0, 0, 1079, 0, 0, 1091, 0, 0, 0, 1075, 1319, 0, 0, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1166, 1166, 1166, 0, 1166, 1166, 1166, 1166, 1166, 0, 0, 0, 0, 1166, 0, 0, 0, 1166, 0, 0, 1166, 0, 0, 0, 0, 0, 0, 0, 1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1170, 1170, 1170, 0, 1170, 1170, 1170, 1170, 1170, 0, 0, 0, 0, 1170, 0, 0, 0, 1170, 0, 0, 1170, 0, 0, 0, 0, 0, 0, 0, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1174, 1174, 1174, 0, 1174, 1174, 1174, 1174, 1174, 1375, 0, 1367, 0, 1174, 0, 0, 0, 1174, 0, 0, 1174, 0, 0, 0, 0, 0, 0, 0, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1079, 0, 0, 1091, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1194, 1194, 1194, 0, 1194, 1194, 1194, 1194, 1194, 0, 0, 0, 0, 1194, 0, 0, 0, 1194, 0, 0, 1194, 0, 0, 0, 0, 0, 0, 0, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1079, 0, 0, 1091, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1190, 1190, 1190, 0, 1190, 1190, 1190, 1190, 1190, 0, 0, 1383, 0, 1190, 0, 0, 0, 1190, 0, 0, 1190, 0, 0, 0, 0, 0, 0, 0, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1079, 0, 0, 1091, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1198, 1198, 1198, 0, 1198, 1198, 1198, 1198, 1198, 0, 0, 0, 0, 1198, 0, 0, 0, 1198, 0, 0, 1198, 0, 0, 0, 0, 0, 0, 0, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1343, 1142, 1142, 0, 1142, 1347, 1142, 1351, 1142, 0, 0, 0, 0, 1339, 0, 0, 0, 1079, 0, 0, 1091, 0, 0, 0, 0, 0, 0, 0, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1343, 1150, 1150, 0, 1150, 1347, 1150, 1351, 1150, 0, 0, 0, 0, 1339, 0, 0, 0, 1079, 0, 0, 1091, 0, 0, 0, 0, 0, 0, 0, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 1154, 1154, 0, 1154, 0, 1154, 0, 1154, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 1146, 1146, 0, 1146, 0, 1146, 0, 1146, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 1134, 1411, 0, 1134, 0, 1134, 0, 1134, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1343, 0, 0, 0, 0, 1347, 0, 1351, 0, 0, 0, 0, 0, 1339, 0, 0, 0, 1079, 0, 0, 1091, 0, 0, 0, 1075, 1319, 0, 0, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 1126, 0, 0, 1126, 0, 1126, 0, 1126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 1130, 0, 0, 1130, 0, 1130, 0, 1130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 1122, 0, 0, 1122, 0, 1122, 0, 1122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 1102, 0, 0, 1431, 0, 1102, 0, 1102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1343, 0, 0, 0, 0, 1347, 0, 1351, 0, 0, 0, 0, 0, 1339, 0, 0, 0, 1079, 0, 0, 1091, 0, 0, 0, 1075, 1319, 0, 0, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 1110, 0, 0, 1431, 0, 1110, 0, 1110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 1114, 0, 0, 0, 0, 1114, 0, 1114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 1106, 0, 0, 0, 0, 1106, 0, 1106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 1098, 0, 0, 0, 0, 1098, 0, 1098, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1455, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1186, 1186, 1186, 0, 1186, 1186, 1186, 1186, 1186, 0, 0, 0, 0, 1186, 0, 0, 0, 1186, 0, 0, 1186, 0, 0, 0, 0, 0, 0, 0, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 1463, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1182, 1182, 1182, 0, 1182, 1182, 1182, 1182, 1182, 0, 0, 0, 0, 1182, 0, 0, 0, 1182, 0, 0, 1182, 0, 0, 0, 0, 0, 0, 0, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 1471, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1178, 1178, 1178, 0, 1178, 1178, 1178, 1178, 1178, 0, 0, 0, 0, 1178, 0, 0, 0, 1178, 0, 0, 1178, 0, 0, 0, 0, 0, 0, 0, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1479, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1483, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 1487, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1679, 0, 0, 1679, 0, 0, 1679, 0, 0, 1679, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1334, 0, 1334, 1334, 1334, 1334, 0, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 0, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 0, 1334, 1334, 1334, 1334, 1334, 0, 0, 0, 0, 1334, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1507, 1330, 1503, 1151, 1499, 1519, 1330, 1531, 1330, 1155, 1143, 1143, 1143, 1159, 1543, 1555, 0, 1567, 1635, 1167, 1663, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1127, 1127, 1127, 1127, 1127, 1127, 1127, 1127, 1127, 1127, 1127, 1127, 1127, 1127, 1127, 1127, 1127, 0, 1143, 1143, 1135, 1607, 1131, 0, 0, 0, 0, 1163, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 0, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 0, 1342, 1342, 1342, 1342, 1342, 0, 0, 0, 0, 1342, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 0, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 0, 1346, 1346, 1346, 1346, 1346, 0, 0, 0, 0, 1346, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 0, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 0, 1350, 1350, 1350, 1350, 1350, 0, 0, 0, 0, 1350, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1334, 1334, 1334, 1334, 1334, 1334, 0, 1334, 0, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 0, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 0, 1334, 1334, 1334, 1334, 1334, 0, 0, 0, 0, 1334, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 1515, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 0, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 0, 1354, 1354, 1354, 1354, 1354, 0, 0, 0, 0, 1354, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1334, 0, 1334, 1334, 1334, 1334, 1334, 1334, 0, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 0, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 0, 1334, 1334, 1334, 1334, 1334, 0, 0, 0, 0, 1334, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 1527, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 0, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 0, 1358, 1358, 1358, 1358, 1358, 0, 0, 0, 0, 1358, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1334, 0, 1334, 1334, 1334, 1334, 0, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 0, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 0, 1334, 1334, 1334, 1334, 1334, 0, 0, 0, 0, 1334, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1539, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 0, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 0, 1362, 1362, 1362, 1362, 1362, 0, 0, 0, 0, 1362, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1334, 1334, 1334, 1334, 1334, 1334, 0, 1334, 0, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 0, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 0, 1334, 1334, 1334, 1334, 1334, 0, 0, 0, 0, 1334, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 1551, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 0, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 0, 1366, 1366, 1366, 1366, 1366, 0, 0, 0, 0, 1366, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1334, 0, 1334, 1334, 1334, 1334, 1334, 1334, 0, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 0, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 0, 1334, 1334, 1334, 1334, 1334, 0, 0, 0, 0, 1334, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 1563, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 0, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 0, 1370, 1370, 1370, 1370, 1370, 0, 0, 0, 0, 1370, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 0, 0, 0, 0, 1583, 1587, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1575, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 0, 1374, 1374, 1374, 1374, 1374, 0, 0, 0, 0, 1374, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1579, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 0, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 0, 1382, 1382, 1382, 1382, 1382, 0, 0, 0, 0, 1382, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 0, 1402, 1402, 1402, 1402, 1402, 0, 0, 0, 0, 1402, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 0, 1406, 1406, 1406, 1406, 1406, 0, 0, 0, 0, 1406, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1595, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 0, 1394, 1394, 1394, 1394, 1394, 0, 0, 0, 0, 1394, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1599, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 0, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 0, 1398, 1398, 1398, 1398, 1398, 0, 0, 0, 0, 1398, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 0, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 0, 1386, 1386, 1386, 1386, 1386, 0, 0, 0, 0, 1386, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1611, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 0, 1446, 1446, 1446, 1446, 1446, 0, 0, 0, 0, 1446, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1615, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1619, 1619, 1619, 1619, 1619, 1619, 1619, 1619, 1619, 1619, 1619, 1619, 1619, 1619, 1619, 1619, 1619, 0, 0, 0, 0, 1583, 1587, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1595, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 0, 1394, 1394, 1394, 1394, 1394, 0, 0, 0, 0, 1394, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 0, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 0, 1378, 1378, 1378, 1378, 1378, 0, 0, 0, 0, 1378, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1595, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 0, 1394, 1394, 1394, 1394, 1394, 0, 0, 0, 0, 1394, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 0, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 0, 1390, 1390, 1390, 1390, 1390, 0, 0, 0, 0, 1390, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 1647, 0, 1643, 0, 0, 0, 0, 0, 1651, 1651, 1651, 0, 0, 0, 0, 0, 0, 0, 1414, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1651, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1418, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1422, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1426, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1659, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 0, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 0, 1410, 1410, 1410, 1410, 1410, 0, 0, 0, 0, 1410, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430, 0, 1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430, 0, 1430, 1430, 1430, 1430, 1430, 0, 0, 0, 0, 1430, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 0, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 0, 1338, 1338, 1338, 1338, 1338, 0, 0, 0, 0, 1338, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1675, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 1046, 1046, 0, 1046, 0, 0, 1046, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1046, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1046, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1683, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 1054, 0, 0, 0, 0, 0, 1487, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1679, 0, 0, 1679, 0, 0, 1679, 0, 0, 1679, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 1062, 1062, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 1058, 1695, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 1487, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1679, 0, 0, 1679, 0, 0, 1679, 0, 0, 1679, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 1066, 1066, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 1707, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 1050, 1050, 0, 1050, 0, 0, 1050, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1050, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1050, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 827, 0, 0, 1486, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1486, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1486, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 1042, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1042, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1042, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 1034, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1034, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1034, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1343, 0, 0, 0, 0, 1347, 0, 1351, 0, 0, 0, 0, 0, 1339, 0, 0, 0, 1079, 0, 0, 1091, 0, 0, 0, 1075, 1319, 0, 0, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1731, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1735, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 1487, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1679, 0, 0, 1679, 0, 0, 1679, 0, 0, 1679, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 1038, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1038, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1038, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 1026, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1026, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1026, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 1067, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1022, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1022, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 1030, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1030, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1030, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1070, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1070, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1803, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1763, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 1767, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1343, 0, 0, 0, 0, 1347, 0, 1351, 1094, 0, 0, 0, 0, 1339, 0, 0, 0, 1079, 0, 0, 1091, 0, 0, 0, 1075, 1319, 0, 0, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1775, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1779, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 1487, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1679, 0, 0, 1679, 0, 0, 1679, 0, 0, 1679, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 1090, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1090, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1090, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 1082, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1082, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1082, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 1767, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1078, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1078, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 1086, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1086, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1086, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1074, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1074, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[1006, 0, 0, 1006, 0, 0, 1006, 0, 1006, 0, 1006, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1006, 0, 0, 0, 1811, 0, 1807, 1807, 1807, 1807, 1807, 1807, 1807, 1807, 1807, 1807, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[1014, 0, 0, 1014, 0, 0, 1014, 0, 1014, 0, 1014, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1014, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[1010, 0, 0, 1010, 0, 0, 1010, 0, 1010, 0, 1010, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1010, 0, 0, 0, 0, 0, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[1018, 0, 0, 1018, 0, 0, 1018, 0, 1018, 0, 1018, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1018, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[398, 0, 0, 398, 0, 0, 398, 0, 398, 0, 398, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 398, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 1827, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[742, 0, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 0, 742, 742, 0, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 0, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 0, 0, 0, 0],
      #[0, 0, 0, 1835, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[622, 0, 622, 622, 622, 622, 622, 622, 622, 0, 622, 0, 622, 622, 622, 622, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 622, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 622, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[514, 0, 571, 514, 514, 595, 514, 583, 0, 0, 0, 0, 0, 514, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1847, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 203, 0, 0, 0, 0, 0, 0, 0, 0, 0, 575, 0, 0, 0, 63, 179, 0, 0, 0, 0, 0, 55, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 319, 211, 19, 319, 211, 19, 319, 211, 19, 0, 587, 0, 35, 39, 207, 0, 0, 0, 31, 191, 559, 0, 0, 0, 0, 0, 0],
      #[470, 0, 0, 470, 0, 0, 470, 0, 470, 0, 470, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 470, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 919, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 19, 0, 0, 19, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 891, 0, 0, 0, 0],
      #[0, 0, 0, 1863, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1867, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 203, 0, 0, 0, 0, 0, 0, 0, 0, 0, 575, 0, 0, 0, 63, 179, 0, 0, 0, 0, 0, 55, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 319, 211, 19, 319, 211, 19, 319, 211, 19, 0, 587, 0, 35, 39, 207, 0, 0, 0, 31, 191, 559, 0, 0, 0, 0, 0, 0],
      #[474, 0, 0, 474, 0, 0, 474, 0, 474, 0, 474, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 474, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[446, 0, 0, 446, 0, 0, 446, 0, 446, 0, 446, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 446, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1895, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 179, 0, 0, 0, 0, 0, 55, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 319, 211, 19, 319, 211, 19, 319, 211, 19, 0, 0, 0, 35, 39, 0, 0, 0, 0, 31, 191, 559, 0, 0, 0, 0, 0, 0],
      #[0, 0, 571, 0, 0, 595, 0, 583, 0, 0, 0, 0, 0, 1887, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 203, 0, 0, 0, 0, 0, 0, 0, 0, 0, 575, 0, 0, 0, 63, 179, 0, 0, 0, 0, 0, 55, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 319, 211, 19, 319, 211, 19, 319, 211, 19, 0, 587, 0, 35, 39, 207, 0, 0, 0, 31, 191, 559, 0, 0, 0, 0, 0, 0],
      #[450, 0, 0, 450, 0, 0, 450, 0, 450, 0, 450, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 450, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 203, 0, 0, 0, 0, 0, 0, 0, 0, 0, 575, 0, 0, 0, 63, 179, 0, 0, 0, 0, 0, 55, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 319, 211, 19, 319, 211, 19, 319, 211, 19, 0, 587, 0, 35, 39, 207, 0, 0, 0, 31, 191, 559, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 1835, 1903, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 203, 0, 0, 0, 0, 0, 0, 0, 0, 0, 575, 0, 0, 0, 63, 179, 0, 0, 0, 0, 0, 55, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 319, 211, 19, 319, 211, 19, 319, 211, 19, 0, 587, 0, 35, 39, 627, 0, 0, 0, 31, 191, 559, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 1911, 659, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1915, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 203, 0, 0, 0, 0, 0, 0, 0, 0, 0, 575, 0, 0, 0, 63, 179, 0, 0, 0, 0, 0, 55, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 319, 211, 19, 319, 211, 19, 319, 211, 19, 0, 587, 0, 35, 39, 207, 0, 0, 0, 31, 191, 559, 0, 0, 0, 0, 0, 0],
      #[454, 0, 0, 454, 0, 0, 454, 0, 454, 0, 454, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 454, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[94, 0, 0, 0, 0, 0, 94, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[86, 0, 0, 0, 0, 0, 1931, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[102, 0, 102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 102, 0, 0, 0, 102, 102, 0, 0, 0, 0, 0, 102, 102, 0, 0, 0, 0, 0, 102, 0, 0, 102, 102, 0, 0, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 0, 102, 0, 102, 102, 102, 102, 102, 102, 102, 102, 102, 0, 0, 0, 0, 0, 0],
      #[90, 0, 203, 0, 0, 0, 0, 0, 0, 0, 0, 0, 575, 0, 0, 0, 63, 179, 0, 0, 0, 0, 0, 55, 59, 0, 0, 0, 0, 0, 231, 0, 0, 15, 263, 0, 0, 19, 319, 211, 19, 319, 211, 19, 319, 211, 19, 0, 587, 0, 35, 39, 207, 223, 219, 11, 31, 191, 559, 0, 0, 0, 0, 0, 0],
      #[98, 0, 0, 0, 0, 0, 98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[78, 0, 0, 0, 0, 0, 78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[82, 0, 0, 0, 0, 0, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[70, 0, 0, 0, 0, 0, 70, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[46, 0, 0, 0, 0, 0, 1963, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[50, 0, 203, 0, 0, 0, 0, 0, 0, 0, 0, 0, 575, 0, 0, 0, 63, 179, 0, 0, 0, 0, 0, 55, 59, 0, 0, 0, 0, 0, 231, 0, 0, 15, 263, 0, 0, 19, 319, 211, 19, 319, 211, 19, 319, 211, 19, 0, 587, 0, 35, 39, 207, 223, 219, 11, 31, 191, 559, 0, 0, 0, 0, 0, 0],
      #[62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[74, 0, 0, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 203, 0, 0, 0, 0, 0, 0, 0, 0, 0, 575, 0, 0, 0, 63, 179, 0, 0, 0, 0, 0, 55, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 319, 211, 19, 319, 211, 19, 319, 211, 19, 0, 587, 0, 35, 39, 207, 0, 0, 0, 31, 191, 559, 0, 0, 0, 0, 0, 0],
      #[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 19, 0, 0, 19, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 1855, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 19, 0, 0, 19, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[106, 0, 203, 0, 0, 0, 0, 0, 0, 0, 0, 0, 575, 0, 0, 0, 63, 179, 0, 0, 0, 0, 0, 55, 59, 0, 0, 0, 0, 0, 231, 0, 0, 15, 263, 0, 0, 19, 319, 211, 19, 319, 211, 19, 319, 211, 19, 0, 587, 0, 35, 39, 207, 223, 219, 11, 31, 191, 559, 0, 0, 0, 0, 0, 0],
      #[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[758, 0, 2043, 0, 0, 0, 2019, 0, 0, 0, 0, 0, 575, 0, 0, 0, 63, 179, 0, 0, 0, 0, 0, 55, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2067, 19, 319, 211, 19, 319, 211, 19, 319, 211, 19, 0, 587, 0, 35, 39, 207, 0, 0, 0, 31, 191, 559, 0, 0, 0, 0, 0, 0],
      #[762, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 834, 834, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 834, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 2031, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2039, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 203, 0, 0, 0, 0, 0, 0, 0, 0, 0, 575, 0, 0, 0, 63, 179, 0, 0, 0, 0, 0, 55, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 319, 211, 19, 319, 211, 19, 319, 211, 19, 0, 587, 0, 35, 39, 207, 0, 0, 0, 31, 191, 559, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 838, 838, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 838, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[818, 0, 818, 0, 0, 0, 818, 0, 0, 0, 0, 0, 818, 0, 0, 0, 818, 818, 0, 0, 0, 0, 0, 818, 818, 0, 0, 0, 0, 0, 818, 0, 0, 818, 818, 0, 0, 818, 818, 818, 818, 818, 818, 818, 818, 818, 818, 0, 818, 0, 818, 818, 818, 818, 818, 818, 818, 818, 818, 0, 0, 0, 0, 0, 0],
      #[0, 0, 203, 0, 0, 0, 0, 0, 0, 0, 0, 0, 575, 0, 0, 0, 63, 179, 0, 0, 0, 0, 0, 55, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 319, 211, 19, 319, 211, 19, 319, 211, 19, 0, 587, 0, 35, 39, 207, 0, 0, 0, 31, 191, 559, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 1835, 2051, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 203, 0, 0, 0, 0, 0, 0, 0, 0, 0, 575, 0, 0, 0, 63, 179, 0, 0, 0, 0, 0, 55, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 319, 211, 19, 319, 211, 19, 319, 211, 19, 0, 587, 0, 35, 39, 207, 0, 0, 0, 31, 191, 559, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 2059, 2031, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2063, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[822, 0, 822, 0, 0, 0, 822, 0, 0, 0, 0, 0, 822, 0, 0, 0, 822, 822, 0, 0, 0, 0, 0, 822, 822, 0, 0, 0, 0, 0, 822, 0, 0, 822, 822, 0, 0, 822, 822, 822, 822, 822, 822, 822, 822, 822, 822, 0, 822, 0, 822, 822, 822, 822, 822, 822, 822, 822, 822, 0, 0, 0, 0, 0, 0],
      #[826, 0, 826, 0, 0, 0, 826, 0, 0, 0, 0, 0, 826, 0, 0, 2071, 826, 826, 0, 0, 0, 0, 0, 826, 826, 0, 0, 0, 0, 0, 826, 0, 0, 826, 826, 0, 0, 826, 826, 826, 826, 826, 826, 826, 826, 826, 826, 0, 826, 0, 826, 826, 826, 826, 826, 826, 826, 826, 826, 0, 0, 0, 0, 0, 0],
      #[830, 0, 830, 0, 0, 0, 830, 0, 0, 0, 0, 0, 830, 0, 0, 0, 830, 830, 0, 0, 0, 0, 0, 830, 830, 0, 0, 0, 0, 0, 830, 0, 0, 830, 830, 0, 0, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 0, 830, 0, 830, 830, 830, 830, 830, 830, 830, 830, 830, 0, 0, 0, 0, 0, 0],
      #[782, 0, 203, 0, 0, 0, 782, 0, 0, 0, 0, 0, 575, 0, 0, 0, 63, 179, 0, 0, 0, 0, 0, 55, 59, 0, 0, 0, 0, 0, 231, 0, 0, 15, 263, 0, 0, 19, 319, 211, 19, 319, 211, 19, 319, 211, 19, 0, 587, 0, 35, 39, 207, 223, 219, 11, 31, 191, 559, 0, 0, 0, 0, 0, 0],
      #[798, 0, 0, 0, 0, 0, 798, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[766, 0, 0, 0, 0, 0, 2087, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[794, 0, 794, 0, 0, 0, 0, 0, 0, 0, 0, 0, 794, 0, 0, 0, 794, 794, 0, 0, 0, 0, 0, 794, 794, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 794, 794, 794, 794, 794, 794, 794, 794, 794, 794, 794, 0, 794, 0, 794, 794, 794, 0, 0, 0, 794, 794, 794, 0, 0, 0, 0, 0, 0],
      #[770, 0, 2043, 0, 0, 0, 0, 0, 0, 0, 0, 0, 575, 0, 0, 0, 63, 179, 0, 0, 0, 0, 0, 55, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2067, 19, 319, 211, 19, 319, 211, 19, 319, 211, 19, 0, 587, 0, 35, 39, 207, 0, 0, 0, 31, 191, 559, 0, 0, 0, 0, 0, 0],
      #[786, 0, 203, 0, 0, 0, 786, 0, 0, 0, 0, 0, 575, 0, 0, 0, 63, 179, 0, 0, 0, 0, 0, 55, 59, 0, 0, 0, 0, 0, 231, 0, 0, 15, 263, 0, 0, 19, 319, 211, 19, 319, 211, 19, 319, 211, 19, 0, 587, 0, 35, 39, 207, 223, 219, 11, 31, 191, 559, 0, 0, 0, 0, 0, 0],
      #[802, 0, 0, 0, 0, 0, 802, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[774, 0, 0, 0, 0, 0, 2107, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[814, 0, 814, 0, 0, 0, 0, 0, 0, 0, 0, 0, 814, 0, 0, 0, 814, 814, 0, 0, 0, 0, 0, 814, 814, 0, 0, 0, 0, 0, 814, 0, 0, 814, 814, 0, 814, 814, 814, 814, 814, 814, 814, 814, 814, 814, 814, 0, 814, 0, 814, 814, 814, 814, 814, 814, 814, 814, 814, 0, 0, 0, 0, 0, 0],
      #[778, 0, 2043, 0, 0, 0, 0, 0, 0, 0, 0, 0, 575, 0, 0, 0, 63, 179, 0, 0, 0, 0, 0, 55, 59, 0, 0, 0, 0, 0, 231, 0, 0, 15, 263, 0, 2067, 19, 319, 211, 19, 319, 211, 19, 319, 211, 19, 0, 587, 0, 35, 39, 207, 223, 219, 11, 31, 191, 559, 0, 0, 0, 0, 0, 0],
      #[790, 0, 203, 0, 0, 0, 790, 0, 0, 0, 0, 0, 575, 0, 0, 0, 63, 179, 0, 0, 0, 0, 0, 55, 59, 0, 0, 0, 0, 0, 231, 0, 0, 15, 263, 0, 0, 19, 319, 211, 19, 319, 211, 19, 319, 211, 19, 0, 587, 0, 35, 39, 207, 223, 219, 11, 31, 191, 559, 0, 0, 0, 0, 0, 0],
      #[806, 0, 0, 0, 0, 0, 806, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[138, 0, 0, 834, 834, 0, 138, 0, 0, 0, 0, 0, 0, 0, 0, 834, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[810, 0, 0, 0, 0, 0, 810, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[158, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2139, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 459, 0, 0, 367, 0, 463, 0, 467, 0, 371, 355, 355, 355, 375, 419, 447, 395, 379, 383, 387, 391, 363, 363, 363, 363, 363, 363, 363, 0, 0, 0, 0, 0, 0, 399, 19, 319, 211, 19, 319, 211, 19, 319, 211, 19, 0, 359, 355, 403, 407, 411, 0, 0, 0, 331, 335, 339, 347, 343, 0, 0, 0, 0],
      #[214, 0, 459, 0, 214, 367, 0, 463, 0, 467, 0, 371, 355, 355, 355, 375, 419, 447, 395, 379, 383, 387, 391, 363, 363, 363, 363, 363, 363, 363, 0, 0, 0, 0, 0, 0, 399, 19, 319, 211, 19, 319, 211, 19, 319, 211, 19, 0, 359, 355, 403, 407, 411, 0, 0, 0, 331, 335, 339, 347, 343, 0, 0, 0, 0],
      #[222, 0, 0, 0, 222, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[230, 0, 459, 0, 230, 367, 0, 463, 0, 467, 0, 371, 355, 355, 355, 375, 419, 447, 395, 379, 383, 387, 391, 363, 363, 363, 363, 363, 363, 363, 0, 0, 0, 0, 0, 0, 399, 19, 0, 211, 19, 0, 211, 19, 0, 211, 19, 0, 359, 355, 403, 407, 411, 0, 0, 0, 331, 335, 339, 347, 343, 0, 0, 0, 0],
      #[226, 0, 0, 0, 226, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[218, 0, 0, 0, 218, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[270, 0, 0, 0, 270, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[166, 0, 0, 0, 166, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[162, 0, 0, 0, 2175, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2179, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 459, 0, 0, 367, 0, 463, 0, 467, 0, 371, 355, 355, 355, 375, 419, 447, 395, 379, 383, 387, 391, 363, 363, 363, 363, 363, 363, 363, 0, 0, 0, 0, 0, 0, 399, 19, 319, 211, 19, 319, 211, 19, 319, 211, 19, 0, 359, 355, 403, 407, 411, 0, 0, 0, 331, 335, 339, 347, 343, 0, 0, 0, 0],
      #[170, 0, 0, 0, 170, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[894, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 703, 715, 727, 791, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 19, 0, 0, 19, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 299, 0, 0, 0, 0, 0],
      #[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[478, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 919, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 19, 0, 0, 19, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 891, 0, 0, 0, 0],
      #[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2211, 0, 0, 0, 0, 0, 0, 0, 319, 211, 0, 319, 211, 0, 319, 211, 0, 0, 0, 0, 0, 0, 0, 223, 0, 0, 0, 0, 2227, 0, 0, 0, 0, 0, 0],
      #[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 235, 0, 0, 426, 426, 426, 426, 426, 426, 235, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[142, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[146, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[154, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      #[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]];

define method production-10
    (prev-state :: <integer>, srcloc-0 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <FALSE>);
  // source-record -> epsilon
  values(494,
         begin
           #f;
         end);
end method production-10;

define method production-11
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <FALSE>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <FALSE>);
  // source-record -> top-level-forms
  values(494,
         begin
           #f;
         end);
end method production-11;

define method production-12
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <FALSE>, srcloc-1 :: <source-location>,
     rhs-2 :: <TOKEN>, srcloc-2 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <FALSE>);
  // source-record -> top-level-forms SEMICOLON
  values(494,
         begin
           #f;
         end);
end method production-12;

define method production-13
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <FALSE>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <FALSE>);
  // source-record -> top-level-body
  values(494,
         begin
           #f;
         end);
end method production-13;

define method production-14
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <FALSE>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <FALSE>);
  // source-record -> top-level-body-semi
  values(494,
         begin
           #f;
         end);
end method production-14;

define method production-15
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <FALSE>, srcloc-1 :: <source-location>,
     rhs-2 :: <TOKEN>, srcloc-2 :: <source-location>,
     rhs-3 :: <FALSE>, srcloc-3 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <FALSE>);
  // source-record -> top-level-forms SEMICOLON top-level-body
  values(494,
         begin
           #f;
         end);
end method production-15;

define method production-16
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <FALSE>, srcloc-1 :: <source-location>,
     rhs-2 :: <TOKEN>, srcloc-2 :: <source-location>,
     rhs-3 :: <FALSE>, srcloc-3 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <FALSE>);
  // source-record -> top-level-forms SEMICOLON top-level-body-semi
  values(494,
         begin
           #f;
         end);
end method production-16;

define method production-17
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <FALSE>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <FALSE>);
  // top-level-forms -> top-level-form
  values(489,
         begin
           #f;
         end);
end method production-17;

define method production-18
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <FALSE>, srcloc-1 :: <source-location>,
     rhs-2 :: <TOKEN>, srcloc-2 :: <source-location>,
     rhs-3 :: <FALSE>, srcloc-3 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <FALSE>);
  // top-level-forms -> top-level-forms SEMICOLON top-level-form
  values(489,
         begin
           #f;
         end);
end method production-18;

define method production-19
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <DEFINITION-PARSE>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <FALSE>);
  // top-level-form -> definition
  values(select (prev-state)
           490 => 492;
           OTHERWISE => 488;
         end,
         begin
           process-top-level-form(rhs-1);
           #f;
         end);
end method production-19;

define method production-20
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <EXPRESSION-PARSE>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <FALSE>);
  // top-level-form -> expression
  values(select (prev-state)
           490 => 492;
           OTHERWISE => 488;
         end,
         begin
           process-top-level-form(rhs-1);
           #f;
         end);
end method production-20;

define method production-21
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <STRETCHY-VECTOR>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <FALSE>);
  // top-level-body -> top-level-body-aux
  values(select (prev-state)
           490 => 491;
           OTHERWISE => 1;
         end,
         begin
           process-top-level-form(make-body(rhs-1, srcloc-1));
           #f;
         end);
end method production-21;

define method production-22
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <STRETCHY-VECTOR>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <FALSE>);
  // top-level-body-semi -> top-level-body-aux-semi
  values(select (prev-state)
           490 => 493;
           OTHERWISE => 485;
         end,
         begin
           process-top-level-form(make-body(rhs-1, srcloc-1));
           #f;
         end);
end method production-22;

define method production-23
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <LOCAL-DECLARATION-PARSE>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <STRETCHY-VECTOR>);
  // top-level-body-aux -> local-declaration
  values(481,
         begin
           stretchy-vector(rhs-1);
         end);
end method production-23;

define method production-24
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <STRETCHY-VECTOR>, srcloc-1 :: <source-location>,
     rhs-2 :: <CONSTITUENT-PARSE>, srcloc-2 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <STRETCHY-VECTOR>);
  // top-level-body-aux -> top-level-body-aux-semi constituent
  values(481,
         begin
           add!(rhs-1, rhs-2);
         end);
end method production-24;

define method production-25
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <STRETCHY-VECTOR>, srcloc-1 :: <source-location>,
     rhs-2 :: <TOKEN>, srcloc-2 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <STRETCHY-VECTOR>);
  // top-level-body-aux-semi -> top-level-body-aux SEMICOLON
  values(483,
         begin
           rhs-1;
         end);
end method production-25;

define method production-26
    (prev-state :: <integer>, srcloc-0 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <EXPRESSION-PARSE>);
  // body-opt -> epsilon
  values(select (prev-state)
           501 => 502;
           234 => 235;
           219 => 220;
           OTHERWISE => 216;
         end,
         begin
           make(<body-parse>, source-location: simplify-source-location(srcloc-0),
                parts: #[]);
         end);
end method production-26;

define method production-27
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <STRETCHY-VECTOR>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <EXPRESSION-PARSE>);
  // body-opt -> body
  values(select (prev-state)
           501 => 502;
           234 => 235;
           219 => 220;
           OTHERWISE => 216;
         end,
         begin
           make-body(rhs-1, srcloc-1);
         end);
end method production-27;

define method production-28
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <STRETCHY-VECTOR>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <STRETCHY-VECTOR>);
  // body -> constituents
  values(215,
         begin
           rhs-1;
         end);
end method production-28;

define method production-29
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <STRETCHY-VECTOR>, srcloc-1 :: <source-location>,
     rhs-2 :: <TOKEN>, srcloc-2 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <STRETCHY-VECTOR>);
  // body -> constituents SEMICOLON
  values(215,
         begin
           rhs-1;
         end);
end method production-29;

define method production-30
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <CONSTITUENT-PARSE>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <STRETCHY-VECTOR>);
  // constituents -> constituent
  values(212,
         begin
           stretchy-vector(rhs-1);
         end);
end method production-30;

define method production-31
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <STRETCHY-VECTOR>, srcloc-1 :: <source-location>,
     rhs-2 :: <TOKEN>, srcloc-2 :: <source-location>,
     rhs-3 :: <CONSTITUENT-PARSE>, srcloc-3 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <STRETCHY-VECTOR>);
  // constituents -> constituents SEMICOLON constituent
  values(212,
         begin
           add!(rhs-1, rhs-3);
         end);
end method production-31;

define method production-32
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <DEFINITION-PARSE>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <CONSTITUENT-PARSE>);
  // constituent -> definition
  values(select (prev-state)
           528 => 529;
           527 => 531;
           523 => 524;
           518 => 519;
           483 => 484;
           213 => 214;
           OTHERWISE => 211;
         end,
         begin
           rhs-1;
         end);
end method production-32;

define method production-33
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <LOCAL-DECLARATION-PARSE>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <CONSTITUENT-PARSE>);
  // constituent -> local-declaration
  values(select (prev-state)
           528 => 529;
           527 => 531;
           523 => 524;
           518 => 519;
           483 => 484;
           213 => 214;
           OTHERWISE => 211;
         end,
         begin
           rhs-1;
         end);
end method production-33;

define method production-34
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <EXPRESSION-PARSE>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <CONSTITUENT-PARSE>);
  // constituent -> expression
  values(select (prev-state)
           528 => 529;
           527 => 531;
           523 => 524;
           518 => 519;
           483 => 484;
           213 => 214;
           OTHERWISE => 211;
         end,
         begin
           rhs-1;
         end);
end method production-34;

define method production-35
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <DEFINITION-MACRO-CALL-PARSE>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <MACRO-CALL-PARSE>);
  // macro-call -> definition-macro-call
  values(557,
         begin
           rhs-1;
         end);
end method production-35;

define method production-36
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <EXPRESSION-PARSE>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <MACRO-CALL-PARSE>);
  // macro-call -> statement
  values(557,
         begin
           rhs-1;
         end);
end method production-36;

define method production-37
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <FUNCTION-MACRO-CALL-PARSE>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <MACRO-CALL-PARSE>);
  // macro-call -> function-macro-call
  values(557,
         begin
           rhs-1;
         end);
end method production-37;

define method production-38
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <PRE-PARSED-TOKEN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <MACRO-CALL-PARSE>);
  // macro-call -> PARSED-MACRO-CALL
  values(557,
         begin
           rhs-1.token-parse-tree;
         end);
end method production-38;

define method production-39
    (prev-state :: <integer>, srcloc-0 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <SIMPLE-OBJECT-VECTOR>);
  // property-list-opt -> epsilon
  values(546,
         begin
           #[];
         end);
end method production-39;

define method production-40
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <STRETCHY-VECTOR>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <SIMPLE-OBJECT-VECTOR>);
  // property-list-opt -> property-list
  values(546,
         begin
           as(<simple-object-vector>, rhs-1);
         end);
end method production-40;

define method production-41
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <LITERAL-TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <FRAGMENT>, srcloc-2 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <STRETCHY-VECTOR>);
  // property-list -> SYMBOL basic-fragment
  values(542,
         begin
           stretchy-vector(make(<property>, keyword: rhs-1, value: rhs-2));
         end);
end method production-41;

define method production-42
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <STRETCHY-VECTOR>, srcloc-1 :: <source-location>,
     rhs-2 :: <TOKEN>, srcloc-2 :: <source-location>,
     rhs-3 :: <LITERAL-TOKEN>, srcloc-3 :: <source-location>,
     rhs-4 :: <FRAGMENT>, srcloc-4 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <STRETCHY-VECTOR>);
  // property-list -> property-list COMMA SYMBOL basic-fragment
  values(542,
         begin
           add!(rhs-1,
                make(<property>, comma: rhs-2, comma-srcloc: srcloc-2,
         	    keyword: rhs-3, keyword-srcloc: srcloc-3, value: rhs-4));
         end);
end method production-42;

define method production-43
    (prev-state :: <integer>, srcloc-0 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <FRAGMENT>);
  // body-fragment-opt -> epsilon
  values(#[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 455, 0, 0, 0, 0, 0, 0, 0, 0, 249, 0, 247, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 134, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 132, 130, 128, 0, 127, 126, 125][prev-state],
         begin
           make(<empty-fragment>, source-location: srcloc-0);
         end);
end method production-43;

define method production-44
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <FRAGMENT>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <FRAGMENT>);
  // body-fragment-opt -> body-fragment
  values(#[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 455, 0, 0, 0, 0, 0, 0, 0, 0, 249, 0, 247, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 134, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 132, 130, 128, 0, 127, 126, 125][prev-state],
         begin
           rhs-1;
         end);
end method production-44;

define method production-45
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <FRAGMENT>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <FRAGMENT>);
  // body-fragment -> non-statement-body-fragment
  values(124,
         begin
           rhs-1;
         end);
end method production-45;

define method production-46
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <EXPRESSION-PARSE>, srcloc-1 :: <source-location>,
     rhs-2 :: <FRAGMENT>, srcloc-2 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <FRAGMENT>);
  // body-fragment -> statement non-statement-body-fragment
  values(124,
         begin
           append-fragments!(make-parsed-fragment(rhs-1, source-location: srcloc-1), rhs-2);
         end);
end method production-46;

define method production-47
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <EXPRESSION-PARSE>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <FRAGMENT>);
  // body-fragment -> statement
  values(124,
         begin
           make-parsed-fragment(rhs-1, source-location: srcloc-1);
         end);
end method production-47;

define method production-48
    (prev-state :: <integer>, srcloc-0 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <FRAGMENT>);
  // list-fragment-opt -> epsilon
  values(select (prev-state)
           256 => 261;
           255 => 262;
           OTHERWISE => 263;
         end,
         begin
           make(<empty-fragment>, source-location: srcloc-0);
         end);
end method production-48;

define method production-49
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <FRAGMENT>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <FRAGMENT>);
  // list-fragment-opt -> list-fragment
  values(select (prev-state)
           256 => 261;
           255 => 262;
           OTHERWISE => 263;
         end,
         begin
           rhs-1;
         end);
end method production-49;

define method production-50
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <FRAGMENT>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <FRAGMENT>);
  // list-fragment -> non-statement-list-fragment
  values(260,
         begin
           rhs-1;
         end);
end method production-50;

define method production-51
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <EXPRESSION-PARSE>, srcloc-1 :: <source-location>,
     rhs-2 :: <FRAGMENT>, srcloc-2 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <FRAGMENT>);
  // list-fragment -> statement non-statement-list-fragment
  values(260,
         begin
           append-fragments!(make-parsed-fragment(rhs-1, source-location: srcloc-1), rhs-2);
         end);
end method production-51;

define method production-52
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <EXPRESSION-PARSE>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <FRAGMENT>);
  // list-fragment -> statement
  values(260,
         begin
           make-parsed-fragment(rhs-1, source-location: srcloc-1);
         end);
end method production-52;

define method production-53
    (prev-state :: <integer>, srcloc-0 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <FRAGMENT>);
  // basic-fragment-opt -> epsilon
  values(540,
         begin
           make(<empty-fragment>, source-location: srcloc-0);
         end);
end method production-53;

define method production-54
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <FRAGMENT>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <FRAGMENT>);
  // basic-fragment-opt -> basic-fragment
  values(540,
         begin
           rhs-1;
         end);
end method production-54;

define method production-55
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <FRAGMENT>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <FRAGMENT>);
  // basic-fragment -> non-statement-basic-fragment
  values(select (prev-state)
           544 => 545;
           535 => 539;
           OTHERWISE => 541;
         end,
         begin
           rhs-1;
         end);
end method production-55;

define method production-56
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <EXPRESSION-PARSE>, srcloc-1 :: <source-location>,
     rhs-2 :: <FRAGMENT>, srcloc-2 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <FRAGMENT>);
  // basic-fragment -> statement non-statement-basic-fragment
  values(select (prev-state)
           544 => 545;
           535 => 539;
           OTHERWISE => 541;
         end,
         begin
           append-fragments!(make-parsed-fragment(rhs-1, source-location: srcloc-1), rhs-2);
         end);
end method production-56;

define method production-57
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <EXPRESSION-PARSE>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <FRAGMENT>);
  // basic-fragment -> statement
  values(select (prev-state)
           544 => 545;
           535 => 539;
           OTHERWISE => 541;
         end,
         begin
           make-parsed-fragment(rhs-1, source-location: srcloc-1);
         end);
end method production-57;

define method production-58
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <DEFINITION-PARSE>, srcloc-1 :: <source-location>,
     rhs-2 :: <FRAGMENT>, srcloc-2 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <FRAGMENT>);
  // non-statement-body-fragment -> definition semicolon-fragment-opt
  values(select (prev-state)
           122 => 123;
           OTHERWISE => 121;
         end,
         begin
           append-fragments!(make-parsed-fragment(rhs-1, source-location: srcloc-1), rhs-2);
         end);
end method production-58;

define method production-59
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <LOCAL-DECLARATION-PARSE>, srcloc-1 :: <source-location>,
     rhs-2 :: <FRAGMENT>, srcloc-2 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <FRAGMENT>);
  // non-statement-body-fragment -> local-declaration semicolon-fragment-opt
  values(select (prev-state)
           122 => 123;
           OTHERWISE => 121;
         end,
         begin
           append-fragments!(make-parsed-fragment(rhs-1, source-location: srcloc-1), rhs-2);
         end);
end method production-59;

define method production-60
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <FRAGMENT>, srcloc-1 :: <source-location>,
     rhs-2 :: <FRAGMENT>, srcloc-2 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <FRAGMENT>);
  // non-statement-body-fragment -> simple-fragment body-fragment-opt
  values(select (prev-state)
           122 => 123;
           OTHERWISE => 121;
         end,
         begin
           append-fragments!(rhs-1, rhs-2);
         end);
end method production-60;

define method production-61
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <FRAGMENT>, srcloc-2 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <FRAGMENT>);
  // non-statement-body-fragment -> COMMA body-fragment-opt
  values(select (prev-state)
           122 => 123;
           OTHERWISE => 121;
         end,
         begin
           append-fragments!
             (make(<token-fragment>, source-location: srcloc-1, token: rhs-1), rhs-2);
         end);
end method production-61;

define method production-62
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <FRAGMENT>, srcloc-2 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <FRAGMENT>);
  // non-statement-body-fragment -> SEMICOLON body-fragment-opt
  values(select (prev-state)
           122 => 123;
           OTHERWISE => 121;
         end,
         begin
           append-fragments!
             (make(<token-fragment>, source-location: srcloc-1, token: rhs-1), rhs-2);
         end);
end method production-62;

define method production-63
    (prev-state :: <integer>, srcloc-0 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <FRAGMENT>);
  // semicolon-fragment-opt -> epsilon
  values(select (prev-state)
           80 => 81;
           OTHERWISE => 248;
         end,
         begin
           make(<empty-fragment>, source-location: srcloc-0);
         end);
end method production-63;

define method production-64
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <FRAGMENT>, srcloc-2 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <FRAGMENT>);
  // semicolon-fragment-opt -> SEMICOLON body-fragment-opt
  values(select (prev-state)
           80 => 81;
           OTHERWISE => 248;
         end,
         begin
           append-fragments!
             (make(<token-fragment>, source-location: srcloc-1, token: rhs-1), rhs-2);
         end);
end method production-64;

define method production-65
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <FRAGMENT>, srcloc-1 :: <source-location>,
     rhs-2 :: <FRAGMENT>, srcloc-2 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <FRAGMENT>);
  // non-statement-list-fragment -> simple-fragment list-fragment-opt
  values(select (prev-state)
           258 => 259;
           OTHERWISE => 257;
         end,
         begin
           append-fragments!(rhs-1, rhs-2);
         end);
end method production-65;

define method production-66
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <FRAGMENT>, srcloc-2 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <FRAGMENT>);
  // non-statement-list-fragment -> COMMA list-fragment-opt
  values(select (prev-state)
           258 => 259;
           OTHERWISE => 257;
         end,
         begin
           append-fragments!
             (make(<token-fragment>, source-location: srcloc-1, token: rhs-1), rhs-2);
         end);
end method production-66;

define method production-67
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <FRAGMENT>, srcloc-1 :: <source-location>,
     rhs-2 :: <FRAGMENT>, srcloc-2 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <FRAGMENT>);
  // non-statement-basic-fragment -> simple-fragment basic-fragment-opt
  values(select (prev-state)
           537 => 538;
           OTHERWISE => 536;
         end,
         begin
           append-fragments!(rhs-1, rhs-2);
         end);
end method production-67;

define method production-68
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <FRAGMENT>);
  // simple-fragment -> simple-fragment-token
  values(select (prev-state)
           544 => 535;
           537 => 535;
           535 => 535;
           534 => 535;
           258 => 255;
           256 => 255;
           255 => 255;
           254 => 255;
           OTHERWISE => 118;
         end,
         begin
           make(<token-fragment>, source-location: srcloc-1, token: rhs-1);
         end);
end method production-68;

define method production-69
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <STRETCHY-VECTOR>, srcloc-2 :: <source-location>,
     rhs-3 :: <TOKEN>, srcloc-3 :: <source-location>,
     rhs-4 :: <LITERAL>, srcloc-4 :: <source-location>,
     rhs-5 :: <TOKEN>, srcloc-5 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <FRAGMENT>);
  // simple-fragment -> SHARP-PAREN constants DOT constant RIGHT-PAREN
  values(select (prev-state)
           544 => 535;
           537 => 535;
           535 => 535;
           534 => 535;
           258 => 255;
           256 => 255;
           255 => 255;
           254 => 255;
           OTHERWISE => 118;
         end,
         begin
           // We can't use make-parsed-fragment directly because it would want a
           // <literal-ref-parse>, so it is just as easy to make the token-fragment
           // directly as it would be to make a <literal-ref-parse> just to pass to
           // make-parsed-fragment.
           make(<token-fragment>, source-location: srcloc-0,
                token: make(<pre-parsed-token>,
         		   source-location: srcloc-0,
         		   kind: $parsed-constant-token,
         		   parse-tree: make(<literal-list>, sharable: #t,
         				    contents: as(<simple-object-vector>, rhs-2),
         				    tail: rhs-4)));
         end);
end method production-69;

define method production-70
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <SIMPLE-OBJECT-VECTOR>, srcloc-2 :: <source-location>,
     rhs-3 :: <TOKEN>, srcloc-3 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <FRAGMENT>);
  // simple-fragment -> SHARP-PAREN constants-opt RIGHT-PAREN
  values(select (prev-state)
           544 => 535;
           537 => 535;
           535 => 535;
           534 => 535;
           258 => 255;
           256 => 255;
           255 => 255;
           254 => 255;
           OTHERWISE => 118;
         end,
         begin
           // We can't use make-parsed-fragment directly because it would want a
           // <literal-ref-parse>, so it is just as easy to make the token-fragment
           // directly as it would be to make a <literal-ref-parse> just to pass to
           // make-parsed-fragment.
           make(<token-fragment>, source-location: srcloc-0,
                token: make(<pre-parsed-token>,
         		   source-location: srcloc-0,
         		   kind: $parsed-constant-token,
         		   parse-tree:
         		     make(<literal-list>, sharable: #t,
         			  contents: as(<simple-object-vector>, rhs-2))));
         end);
end method production-70;

define method production-71
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <SIMPLE-OBJECT-VECTOR>, srcloc-2 :: <source-location>,
     rhs-3 :: <TOKEN>, srcloc-3 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <FRAGMENT>);
  // simple-fragment -> SHARP-BRACKET constants-opt RIGHT-BRACKET
  values(select (prev-state)
           544 => 535;
           537 => 535;
           535 => 535;
           534 => 535;
           258 => 255;
           256 => 255;
           255 => 255;
           254 => 255;
           OTHERWISE => 118;
         end,
         begin
           // We can't use make-parsed-fragment directly because it would want a
           // <literal-ref-parse>, so it is just as easy to make the token-fragment
           // directly as it would be to make a <literal-ref-parse> just to pass to
           // make-parsed-fragment.
           make(<token-fragment>, source-location: srcloc-0,
                token: make(<pre-parsed-token>,
         		   source-location: srcloc-0,
         		   kind: $parsed-constant-token,
         		   parse-tree:
         		     make(<literal-simple-object-vector>, sharable: #t,
         			  contents: as(<simple-object-vector>, rhs-2))));
         end);
end method production-71;

define method production-72
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <FRAGMENT>, srcloc-2 :: <source-location>,
     rhs-3 :: <TOKEN>, srcloc-3 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <FRAGMENT>);
  // simple-fragment -> LEFT-PAREN body-fragment-opt RIGHT-PAREN
  values(select (prev-state)
           544 => 535;
           537 => 535;
           535 => 535;
           534 => 535;
           258 => 255;
           256 => 255;
           255 => 255;
           254 => 255;
           OTHERWISE => 118;
         end,
         begin
           make(<bracketed-fragment>,
                left-token: rhs-1, left-srcloc: srcloc-1,
                contents: rhs-2,
                right-token: rhs-3, right-srcloc: srcloc-3);
         end);
end method production-72;

define method production-73
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <FRAGMENT>, srcloc-2 :: <source-location>,
     rhs-3 :: <TOKEN>, srcloc-3 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <FRAGMENT>);
  // simple-fragment -> LEFT-BRACKET body-fragment-opt RIGHT-BRACKET
  values(select (prev-state)
           544 => 535;
           537 => 535;
           535 => 535;
           534 => 535;
           258 => 255;
           256 => 255;
           255 => 255;
           254 => 255;
           OTHERWISE => 118;
         end,
         begin
           make(<bracketed-fragment>,
                left-token: rhs-1, left-srcloc: srcloc-1,
                contents: rhs-2,
                right-token: rhs-3, right-srcloc: srcloc-3);
         end);
end method production-73;

define method production-74
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <FRAGMENT>, srcloc-2 :: <source-location>,
     rhs-3 :: <TOKEN>, srcloc-3 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <FRAGMENT>);
  // simple-fragment -> LEFT-BRACE body-fragment-opt RIGHT-BRACE
  values(select (prev-state)
           544 => 535;
           537 => 535;
           535 => 535;
           534 => 535;
           258 => 255;
           256 => 255;
           255 => 255;
           254 => 255;
           OTHERWISE => 118;
         end,
         begin
           make(<bracketed-fragment>,
                left-token: rhs-1, left-srcloc: srcloc-1,
                contents: rhs-2,
                right-token: rhs-3, right-srcloc: srcloc-3);
         end);
end method production-74;

define method production-75
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <FUNCTION-MACRO-CALL-PARSE>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <FRAGMENT>);
  // simple-fragment -> function-macro-call
  values(select (prev-state)
           544 => 535;
           537 => 535;
           535 => 535;
           534 => 535;
           258 => 255;
           256 => 255;
           255 => 255;
           254 => 255;
           OTHERWISE => 118;
         end,
         begin
           make-parsed-fragment(rhs-1, source-location: srcloc-1);
         end);
end method production-75;

define method production-76
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <PRE-PARSED-TOKEN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <TOKEN>);
  // simple-fragment-token -> PARSED-EXPRESSION
  values(103,
         begin
           rhs-1;
         end);
end method production-76;

define method production-77
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <PRE-PARSED-TOKEN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <TOKEN>);
  // simple-fragment-token -> PARSED-CONSTANT
  values(103,
         begin
           rhs-1;
         end);
end method production-77;

define method production-78
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <PRE-PARSED-TOKEN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <TOKEN>);
  // simple-fragment-token -> PARSED-MACRO-CALL
  values(103,
         begin
           rhs-1;
         end);
end method production-78;

define method production-79
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <PRE-PARSED-TOKEN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <TOKEN>);
  // simple-fragment-token -> PARSED-VARIABLE-LIST
  values(103,
         begin
           rhs-1;
         end);
end method production-79;

define method production-80
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <PRE-PARSED-TOKEN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <TOKEN>);
  // simple-fragment-token -> PARSED-PARAMETER-LIST
  values(103,
         begin
           rhs-1;
         end);
end method production-80;

define method production-81
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <IDENTIFIER-TOKEN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <TOKEN>);
  // simple-fragment-token -> variable-name
  values(103,
         begin
           rhs-1;
         end);
end method production-81;

define method production-82
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <OPERATOR-TOKEN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <TOKEN>);
  // simple-fragment-token -> BINARY-OPERATOR
  values(103,
         begin
           rhs-1;
         end);
end method production-82;

define method production-83
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <IDENTIFIER-TOKEN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <TOKEN>);
  // simple-fragment-token -> TILDE
  values(103,
         begin
           rhs-1;
         end);
end method production-83;

define method production-84
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <TOKEN>);
  // simple-fragment-token -> SHARP-WORD
  values(103,
         begin
           rhs-1;
         end);
end method production-84;

define method production-85
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <TOKEN>);
  // simple-fragment-token -> DOT
  values(103,
         begin
           rhs-1;
         end);
end method production-85;

define method production-86
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <TOKEN>);
  // simple-fragment-token -> DOUBLE-COLON
  values(103,
         begin
           rhs-1;
         end);
end method production-86;

define method production-87
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <TOKEN>);
  // simple-fragment-token -> ARROW
  values(103,
         begin
           rhs-1;
         end);
end method production-87;

define method production-88
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <TOKEN>);
  // simple-fragment-token -> QUESTION
  values(103,
         begin
           rhs-1;
         end);
end method production-88;

define method production-89
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <TOKEN>);
  // simple-fragment-token -> DOUBLE-QUESTION
  values(103,
         begin
           rhs-1;
         end);
end method production-89;

define method production-90
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <TOKEN>);
  // simple-fragment-token -> QUESTION-EQUAL
  values(103,
         begin
           rhs-1;
         end);
end method production-90;

define method production-91
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <TOKEN>);
  // simple-fragment-token -> ELLIPSIS
  values(103,
         begin
           rhs-1;
         end);
end method production-91;

define method production-92
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <TOKEN>);
  // simple-fragment-token -> DOUBLE-SHARP
  values(103,
         begin
           rhs-1;
         end);
end method production-92;

define method production-93
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <IDENTIFIER-TOKEN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <TOKEN>);
  // simple-fragment-token -> OTHERWISE
  values(103,
         begin
           rhs-1;
         end);
end method production-93;

define method production-94
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <LITERAL-TOKEN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <TOKEN>);
  // simple-fragment-token -> LITERAL
  values(103,
         begin
           rhs-1;
         end);
end method production-94;

define method production-95
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <LITERAL-TOKEN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <TOKEN>);
  // simple-fragment-token -> STRING
  values(103,
         begin
           rhs-1;
         end);
end method production-95;

define method production-96
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <LITERAL-TOKEN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <TOKEN>);
  // simple-fragment-token -> SYMBOL
  values(103,
         begin
           rhs-1;
         end);
end method production-96;

define method production-97
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <PRE-PARSED-TOKEN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <DEFINITION-PARSE>);
  // definition -> PARSED-SPECIAL-DEFINITION
  values(#[486, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 0, 0, 0, 0, 0, 0, 0, 0, 63, 0, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 63, 63, 0, 63, 63, 63, 0, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 208, 0, 0, 0, 0, 0, 208, 0, 0, 0, 0, 0, 208, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 208, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 208, 0, 0, 0, 0, 0, 0, 486, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 208, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 208, 0, 0, 0, 0, 208, 0, 0, 0, 208, 208][prev-state],
         begin
           rhs-1.token-parse-tree;
         end);
end method production-97;

define method production-98
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <DEFINITION-MACRO-CALL-PARSE>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <DEFINITION-PARSE>);
  // definition -> definition-macro-call
  values(#[486, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 0, 0, 0, 0, 0, 0, 0, 0, 63, 0, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 63, 63, 0, 63, 63, 63, 0, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 208, 0, 0, 0, 0, 0, 208, 0, 0, 0, 0, 0, 208, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 208, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 208, 0, 0, 0, 0, 0, 0, 486, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 208, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 208, 0, 0, 0, 0, 208, 0, 0, 0, 208, 208][prev-state],
         begin
           rhs-1;
         end);
end method production-98;

define method production-99
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <IDENTIFIER-TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <IDENTIFIER-TOKEN>, srcloc-2 :: <source-location>,
     rhs-3 :: <IDENTIFIER-TOKEN>, srcloc-3 :: <source-location>,
     rhs-4 :: <MAIN-RULE-SET>, srcloc-4 :: <source-location>,
     rhs-5 :: <STRETCHY-VECTOR>, srcloc-5 :: <source-location>,
     rhs-6 :: <IDENTIFIER-TOKEN>, srcloc-6 :: <source-location>,
     rhs-7 :: FALSE-OR(<SYMBOL-TOKEN>), srcloc-7 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <DEFINITION-PARSE>);
  // definition -> DEFINE MACRO MACRO-NAME main-rule-set auxiliary-rule-sets-opt END macro-and-name-opt
  values(#[486, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 0, 0, 0, 0, 0, 0, 0, 0, 63, 0, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 63, 63, 0, 63, 63, 63, 0, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 208, 0, 0, 0, 0, 0, 208, 0, 0, 0, 0, 0, 208, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 208, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 208, 0, 0, 0, 0, 0, 0, 486, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 208, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 208, 0, 0, 0, 0, 208, 0, 0, 0, 208, 208][prev-state],
         begin
           unless (rhs-7 == #f | same-id?(rhs-3, rhs-7))
             compiler-error("Macro name mismatch: %s isn't %s", rhs-7, rhs-3);
           end;
           make(<define-macro-parse>, source-location: simplify-source-location(srcloc-0),
                name: rhs-3, main-rule-set: rhs-4,
                auxiliary-rule-sets: as(<simple-object-vector>, rhs-5));
         end);
end method production-99;

define method production-100
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <PRE-PARSED-TOKEN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <DEFINITION-MACRO-CALL-PARSE>);
  // definition-macro-call -> PARSED-DEFINITION-MACRO-CALL
  values(select (prev-state)
           551 => 553;
           OTHERWISE => 56;
         end,
         begin
           rhs-1.token-parse-tree;
         end);
end method production-100;

define method production-101
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <IDENTIFIER-TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <SIMPLE-OBJECT-VECTOR>, srcloc-2 :: <source-location>,
     rhs-3 :: <IDENTIFIER-TOKEN>, srcloc-3 :: <source-location>,
     rhs-4 :: <FRAGMENT>, srcloc-4 :: <source-location>,
     rhs-5 :: <IDENTIFIER-TOKEN>, srcloc-5 :: <source-location>,
     rhs-6 :: <IDENTIFIER-TOKEN>, srcloc-6 :: <source-location>,
     rhs-7 :: <IDENTIFIER-TOKEN>, srcloc-7 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <DEFINITION-MACRO-CALL-PARSE>);
  // definition-macro-call -> DEFINE modifiers-opt DEFINE-BODY-WORD body-fragment-opt END DEFINE-BODY-WORD MACRO-NAME
  values(select (prev-state)
           551 => 553;
           OTHERWISE => 56;
         end,
         begin
           unless (same-id?(rhs-3, rhs-6))
             compiler-error("Define-word mismatch: %s isn't %s", rhs-6, rhs-3);
           end;
           let first-word = first-word-in(rhs-4);
           if (first-word)
             unless (same-id?(first-word, rhs-7))
               compiler-error("Name mismatch: %s isn't %s", rhs-7, first-word);
             end;
           else
             compiler-error("Name mismatch: no name to match %s", rhs-7);
           end;
           make(<body-style-definition-macro-call-parse>,
                source-location: simplify-source-location(srcloc-0),
                modifiers: rhs-2, word: rhs-3, fragment: rhs-4);
         end);
end method production-101;

define method production-102
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <IDENTIFIER-TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <SIMPLE-OBJECT-VECTOR>, srcloc-2 :: <source-location>,
     rhs-3 :: <IDENTIFIER-TOKEN>, srcloc-3 :: <source-location>,
     rhs-4 :: <FRAGMENT>, srcloc-4 :: <source-location>,
     rhs-5 :: <IDENTIFIER-TOKEN>, srcloc-5 :: <source-location>,
     rhs-6 :: <IDENTIFIER-TOKEN>, srcloc-6 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <DEFINITION-MACRO-CALL-PARSE>);
  // definition-macro-call -> DEFINE modifiers-opt DEFINE-BODY-WORD body-fragment-opt END DEFINE-BODY-WORD
  values(select (prev-state)
           551 => 553;
           OTHERWISE => 56;
         end,
         begin
           unless (same-id?(rhs-3, rhs-6))
             let first-word = first-word-in(rhs-4);
             if (first-word)
               unless (same-id?(first-word, rhs-6))
                 compiler-error
         	  ("Name or define-word mismatch: %s is neither %s nor %s",
         	   rhs-6, rhs-3, first-word);
               end;
             else
               compiler-error("Define-word mismatch: %s isn't %s", rhs-6, rhs-3);
             end;
           end;
           make(<body-style-definition-macro-call-parse>, modifiers: rhs-2,
                word: rhs-3, fragment: rhs-4, source-location: simplify-source-location(srcloc-0));
         end);
end method production-102;

define method production-103
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <IDENTIFIER-TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <SIMPLE-OBJECT-VECTOR>, srcloc-2 :: <source-location>,
     rhs-3 :: <IDENTIFIER-TOKEN>, srcloc-3 :: <source-location>,
     rhs-4 :: <FRAGMENT>, srcloc-4 :: <source-location>,
     rhs-5 :: <IDENTIFIER-TOKEN>, srcloc-5 :: <source-location>,
     rhs-6 :: <IDENTIFIER-TOKEN>, srcloc-6 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <DEFINITION-MACRO-CALL-PARSE>);
  // definition-macro-call -> DEFINE modifiers-opt DEFINE-BODY-WORD body-fragment-opt END MACRO-NAME-NOT-DEFINE-BODY-WORD
  values(select (prev-state)
           551 => 553;
           OTHERWISE => 56;
         end,
         begin
           let first-word = first-word-in(rhs-4);
           if (first-word)
             unless (same-id?(first-word, rhs-6))
               compiler-error
         	("Name or define-word mismatch: %s is neither %s nor %s",
         	 rhs-6, rhs-3, first-word);
             end;
           else
             compiler-error("Define-word mismatch: %s isn't %s", rhs-6, rhs-3);
           end;
           make(<body-style-definition-macro-call-parse>, modifiers: rhs-2,
                word: rhs-3, fragment: rhs-4, source-location: simplify-source-location(srcloc-0));
         end);
end method production-103;

define method production-104
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <IDENTIFIER-TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <SIMPLE-OBJECT-VECTOR>, srcloc-2 :: <source-location>,
     rhs-3 :: <IDENTIFIER-TOKEN>, srcloc-3 :: <source-location>,
     rhs-4 :: <FRAGMENT>, srcloc-4 :: <source-location>,
     rhs-5 :: <IDENTIFIER-TOKEN>, srcloc-5 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <DEFINITION-MACRO-CALL-PARSE>);
  // definition-macro-call -> DEFINE modifiers-opt DEFINE-BODY-WORD body-fragment-opt END
  values(select (prev-state)
           551 => 553;
           OTHERWISE => 56;
         end,
         begin
           make(<body-style-definition-macro-call-parse>, modifiers: rhs-2,
                word: rhs-3, fragment: rhs-4, source-location: simplify-source-location(srcloc-0));
         end);
end method production-104;

define method production-105
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <IDENTIFIER-TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <SIMPLE-OBJECT-VECTOR>, srcloc-2 :: <source-location>,
     rhs-3 :: <IDENTIFIER-TOKEN>, srcloc-3 :: <source-location>,
     rhs-4 :: <FRAGMENT>, srcloc-4 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <DEFINITION-MACRO-CALL-PARSE>);
  // definition-macro-call -> DEFINE modifiers-opt DEFINE-LIST-WORD list-fragment-opt
  values(select (prev-state)
           551 => 553;
           OTHERWISE => 56;
         end,
         begin
           make(<list-style-definition-macro-call-parse>, modifiers: rhs-2,
                word: rhs-3, fragment: rhs-4, source-location: simplify-source-location(srcloc-0));
         end);
end method production-105;

define method production-106
    (prev-state :: <integer>, srcloc-0 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <SIMPLE-OBJECT-VECTOR>);
  // modifiers-opt -> epsilon
  values(61,
         begin
           #[];
         end);
end method production-106;

define method production-107
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <STRETCHY-VECTOR>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <SIMPLE-OBJECT-VECTOR>);
  // modifiers-opt -> modifiers
  values(61,
         begin
           as(<simple-object-vector>, rhs-1);
         end);
end method production-107;

define method production-108
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <IDENTIFIER-TOKEN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <STRETCHY-VECTOR>);
  // modifiers -> UNRESERVED-NAME
  values(59,
         begin
           stretchy-vector(rhs-1);
         end);
end method production-108;

define method production-109
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <STRETCHY-VECTOR>, srcloc-1 :: <source-location>,
     rhs-2 :: <IDENTIFIER-TOKEN>, srcloc-2 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <STRETCHY-VECTOR>);
  // modifiers -> modifiers UNRESERVED-NAME
  values(59,
         begin
           add!(rhs-1, rhs-2);
         end);
end method production-109;

define method production-110
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <PRE-PARSED-TOKEN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <LOCAL-DECLARATION-PARSE>);
  // local-declaration -> PARSED-LOCAL-DECLARATION
  values(#[480, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 80, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 80, 80, 0, 80, 80, 80, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 209, 0, 0, 0, 0, 0, 209, 0, 0, 0, 0, 0, 209, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 209, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 209, 0, 0, 0, 0, 0, 0, 480, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 209, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 209, 0, 0, 0, 0, 209, 0, 0, 0, 209, 209][prev-state],
         begin
           rhs-1.token-parse-tree;
         end);
end method production-110;

define method production-111
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <IDENTIFIER-TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <BINDINGS-PARSE>, srcloc-2 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <LOCAL-DECLARATION-PARSE>);
  // local-declaration -> LET bindings
  values(#[480, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 80, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 80, 80, 0, 80, 80, 80, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 209, 0, 0, 0, 0, 0, 209, 0, 0, 0, 0, 0, 209, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 209, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 209, 0, 0, 0, 0, 0, 0, 480, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 209, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 209, 0, 0, 0, 0, 209, 0, 0, 0, 209, 209][prev-state],
         begin
           make(<let-parse>, source-location: simplify-source-location(srcloc-0),
                variables: rhs-2.bindings-variables,
                expression: rhs-2.bindings-expression);
         end);
end method production-111;

define method production-112
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <IDENTIFIER-TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <IDENTIFIER-TOKEN>, srcloc-2 :: <source-location>,
     rhs-3 :: <EXPRESSION-PARSE>, srcloc-3 :: <source-location>,
     rhs-4 :: <OPERATOR-TOKEN>, srcloc-4 :: <source-location>,
     rhs-5 :: <EXPRESSION-PARSE>, srcloc-5 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <LOCAL-DECLARATION-PARSE>);
  // local-declaration -> LET HANDLER operand EQUAL expression
  values(#[480, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 80, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 80, 80, 0, 80, 80, 80, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 209, 0, 0, 0, 0, 0, 209, 0, 0, 0, 0, 0, 209, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 209, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 209, 0, 0, 0, 0, 0, 0, 480, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 209, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 209, 0, 0, 0, 0, 209, 0, 0, 0, 209, 209][prev-state],
         begin
           make(<handler-parse>, source-location: simplify-source-location(srcloc-0),
                type: rhs-3, handler: rhs-5);
         end);
end method production-112;

define method production-113
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <IDENTIFIER-TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <IDENTIFIER-TOKEN>, srcloc-2 :: <source-location>,
     rhs-3 :: <TOKEN>, srcloc-3 :: <source-location>,
     rhs-4 :: <EXPRESSION-PARSE>, srcloc-4 :: <source-location>,
     rhs-5 :: <TOKEN>, srcloc-5 :: <source-location>,
     rhs-6 :: <STRETCHY-VECTOR>, srcloc-6 :: <source-location>,
     rhs-7 :: <TOKEN>, srcloc-7 :: <source-location>,
     rhs-8 :: <OPERATOR-TOKEN>, srcloc-8 :: <source-location>,
     rhs-9 :: <EXPRESSION-PARSE>, srcloc-9 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <LOCAL-DECLARATION-PARSE>);
  // local-declaration -> LET HANDLER LEFT-PAREN expression COMMA arguments RIGHT-PAREN EQUAL expression
  values(#[480, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 80, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 80, 80, 0, 80, 80, 80, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 209, 0, 0, 0, 0, 0, 209, 0, 0, 0, 0, 0, 209, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 209, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 209, 0, 0, 0, 0, 0, 0, 480, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 209, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 209, 0, 0, 0, 0, 209, 0, 0, 0, 209, 209][prev-state],
         begin
           make(<handler-parse>, source-location: simplify-source-location(srcloc-0),
                type: rhs-4, options: as(<simple-object-vector>, rhs-6), handler: rhs-9);
         end);
end method production-113;

define method production-114
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <IDENTIFIER-TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <STRETCHY-VECTOR>, srcloc-2 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <LOCAL-DECLARATION-PARSE>);
  // local-declaration -> LOCAL local-methods
  values(#[480, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 80, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 80, 80, 0, 80, 80, 80, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 209, 0, 0, 0, 0, 0, 209, 0, 0, 0, 0, 0, 209, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 209, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 209, 0, 0, 0, 0, 0, 0, 480, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 209, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 209, 0, 0, 0, 0, 209, 0, 0, 0, 209, 209][prev-state],
         begin
           make(<local-parse>, source-location: simplify-source-location(srcloc-0),
                methods: as(<simple-object-vector>, rhs-2));
         end);
end method production-114;

define method production-115
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <METHOD-PARSE>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <STRETCHY-VECTOR>);
  // local-methods -> method-definition
  values(244,
         begin
           stretchy-vector(rhs-1);
         end);
end method production-115;

define method production-116
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <STRETCHY-VECTOR>, srcloc-1 :: <source-location>,
     rhs-2 :: <TOKEN>, srcloc-2 :: <source-location>,
     rhs-3 :: <METHOD-PARSE>, srcloc-3 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <STRETCHY-VECTOR>);
  // local-methods -> local-methods COMMA method-definition
  values(244,
         begin
           add!(rhs-1, rhs-3);
         end);
end method production-116;

define method production-117
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <PARAMETER>, srcloc-1 :: <source-location>,
     rhs-2 :: <OPERATOR-TOKEN>, srcloc-2 :: <source-location>,
     rhs-3 :: <EXPRESSION-PARSE>, srcloc-3 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <BINDINGS-PARSE>);
  // bindings -> variable EQUAL expression
  values(select (prev-state)
           499 => 500;
           OTHERWISE => 468;
         end,
         begin
           make(<bindings-parse>,
                variables: make(<variable-list>, fixed: vector(rhs-1)),
                expression: rhs-3);
         end);
end method production-117;

define method production-118
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <VARIABLE-LIST>, srcloc-2 :: <source-location>,
     rhs-3 :: <TOKEN>, srcloc-3 :: <source-location>,
     rhs-4 :: <OPERATOR-TOKEN>, srcloc-4 :: <source-location>,
     rhs-5 :: <EXPRESSION-PARSE>, srcloc-5 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <BINDINGS-PARSE>);
  // bindings -> LEFT-PAREN variable-list RIGHT-PAREN EQUAL expression
  values(select (prev-state)
           499 => 500;
           OTHERWISE => 468;
         end,
         begin
           make(<bindings-parse>, variables: rhs-2, expression: rhs-5);
         end);
end method production-118;

define method production-119
    (prev-state :: <integer>, srcloc-0 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <VARIABLE-LIST>);
  // variable-list-opt -> epsilon
  values(select (prev-state)
           549 => 550;
           OTHERWISE => 232;
         end,
         begin
           make(<variable-list>);
         end);
end method production-119;

define method production-120
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <VARIABLE-LIST>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <VARIABLE-LIST>);
  // variable-list-opt -> variable-list
  values(select (prev-state)
           549 => 550;
           OTHERWISE => 232;
         end,
         begin
           rhs-1;
         end);
end method production-120;

define method production-121
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <PRE-PARSED-TOKEN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <VARIABLE-LIST>);
  // variable-list -> PARSED-VARIABLE-LIST
  values(select (prev-state)
           463 => 464;
           OTHERWISE => 231;
         end,
         begin
           rhs-1.token-parse-tree;
         end);
end method production-121;

define method production-122
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <STRETCHY-VECTOR>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <VARIABLE-LIST>);
  // variable-list -> variables
  values(select (prev-state)
           463 => 464;
           OTHERWISE => 231;
         end,
         begin
           make(<variable-list>, fixed: as(<simple-object-vector>, rhs-1));
         end);
end method production-122;

define method production-123
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <STRETCHY-VECTOR>, srcloc-1 :: <source-location>,
     rhs-2 :: <TOKEN>, srcloc-2 :: <source-location>,
     rhs-3 :: <TOKEN>, srcloc-3 :: <source-location>,
     rhs-4 :: <PARAMETER>, srcloc-4 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <VARIABLE-LIST>);
  // variable-list -> variables COMMA REST variable
  values(select (prev-state)
           463 => 464;
           OTHERWISE => 231;
         end,
         begin
           make(<variable-list>, fixed: as(<simple-object-vector>, rhs-1),
                rest: rhs-4);
         end);
end method production-123;

define method production-124
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <PARAMETER>, srcloc-2 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <VARIABLE-LIST>);
  // variable-list -> REST variable
  values(select (prev-state)
           463 => 464;
           OTHERWISE => 231;
         end,
         begin
           make(<variable-list>, rest: rhs-2);
         end);
end method production-124;

define method production-125
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <PARAMETER>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <STRETCHY-VECTOR>);
  // variables -> variable
  values(224,
         begin
           stretchy-vector(rhs-1);
         end);
end method production-125;

define method production-126
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <STRETCHY-VECTOR>, srcloc-1 :: <source-location>,
     rhs-2 :: <TOKEN>, srcloc-2 :: <source-location>,
     rhs-3 :: <PARAMETER>, srcloc-3 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <STRETCHY-VECTOR>);
  // variables -> variables COMMA variable
  values(224,
         begin
           add!(rhs-1, rhs-3);
         end);
end method production-126;

define method production-127
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <IDENTIFIER-TOKEN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <PARAMETER>);
  // variable -> variable-name
  values(#[0, 0, 0, 460, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 75, 0, 0, 0, 0, 179, 0, 0, 0, 0, 0, 0, 0, 187, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 218, 0, 0, 0, 223, 0, 0, 0, 226, 0, 228, 0, 230, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 223, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 498, 0, 460, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 75, 0, 223][prev-state],
         begin
           make(<parameter>, name: rhs-1);
         end);
end method production-127;

define method production-128
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <IDENTIFIER-TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <TOKEN>, srcloc-2 :: <source-location>,
     rhs-3 :: <EXPRESSION-PARSE>, srcloc-3 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <PARAMETER>);
  // variable -> variable-name DOUBLE-COLON operand
  values(#[0, 0, 0, 460, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 75, 0, 0, 0, 0, 179, 0, 0, 0, 0, 0, 0, 0, 187, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 218, 0, 0, 0, 223, 0, 0, 0, 226, 0, 228, 0, 230, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 223, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 498, 0, 460, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 75, 0, 223][prev-state],
         begin
           make(<parameter>, name: rhs-1, type: rhs-3);
         end);
end method production-128;

define method production-129
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <IDENTIFIER-TOKEN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <IDENTIFIER-TOKEN>);
  // variable-name -> ORDINARY-NAME
  values(#[49, 0, 0, 5, 0, 0, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 0, 0, 87, 0, 0, 0, 0, 0, 0, 0, 0, 87, 0, 87, 66, 67, 0, 0, 0, 71, 0, 0, 76, 0, 0, 0, 49, 0, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 87, 87, 87, 0, 87, 87, 87, 0, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 49, 0, 49, 49, 0, 149, 0, 0, 0, 49, 0, 0, 0, 49, 0, 0, 49, 0, 0, 0, 0, 49, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 176, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 5, 0, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 0, 0, 0, 0, 0, 49, 0, 0, 0, 5, 0, 49, 0, 5, 0, 0, 0, 5, 0, 5, 0, 5, 0, 0, 0, 0, 49, 0, 0, 238, 239, 0, 241, 0, 0, 0, 0, 66, 0, 0, 0, 0, 0, 0, 0, 0, 87, 87, 87, 0, 87, 0, 0, 0, 0, 0, 0, 0, 430, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 0, 5, 0, 0, 49, 0, 0, 49, 0, 49, 0, 49, 0, 49, 0, 0, 49, 0, 0, 0, 0, 49, 0, 0, 0, 0, 0, 0, 49, 0, 0, 0, 0, 49, 0, 5, 0, 5, 0, 49, 0, 49, 0, 0, 0, 49, 0, 0, 49, 0, 49, 0, 0, 0, 0, 0, 49, 0, 0, 0, 49, 49, 0, 0, 0, 49, 49, 0, 0, 0, 0, 0, 87, 87, 0, 87, 0, 0, 0, 0, 0, 0, 87, 0, 0, 76, 0, 5][prev-state],
         begin
           rhs-1;
         end);
end method production-129;

define method production-130
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <BINOP-SERIES>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <EXPRESSION-PARSE>);
  // expression -> expression-aux
  values(#[487, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 457, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 170, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 161, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 189, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 210, 0, 0, 0, 0, 0, 210, 0, 0, 0, 0, 0, 210, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 210, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 462, 0, 0, 0, 0, 467, 0, 0, 0, 0, 472, 0, 474, 0, 0, 0, 0, 479, 0, 0, 0, 0, 210, 0, 0, 0, 0, 0, 0, 487, 0, 0, 0, 0, 496, 0, 0, 0, 0, 0, 210, 0, 505, 0, 0, 0, 508, 0, 0, 511, 0, 505, 0, 0, 0, 0, 0, 210, 0, 0, 0, 505, 210, 0, 0, 0, 530, 210][prev-state],
         begin
           reduce-binop-series(rhs-1);
         end);
end method production-130;

define method production-131
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <EXPRESSION-PARSE>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <BINOP-SERIES>);
  // expression-aux -> binary-operand
  values(158,
         begin
           make(<binop-series>, operand: rhs-1, operand-srcloc: srcloc-1);
         end);
end method production-131;

define method production-132
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <BINOP-SERIES>, srcloc-1 :: <source-location>,
     rhs-2 :: <OPERATOR-TOKEN>, srcloc-2 :: <source-location>,
     rhs-3 :: <EXPRESSION-PARSE>, srcloc-3 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <BINOP-SERIES>);
  // expression-aux -> expression-aux BINARY-OPERATOR binary-operand
  values(158,
         begin
           add-binop(rhs-1, rhs-2, rhs-3, srcloc-3);
         end);
end method production-132;

define method production-133
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <BINOP-SERIES>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <EXPRESSION-PARSE>);
  // expression-no-symbol -> expression-no-symbol-aux
  values(155,
         begin
           reduce-binop-series(rhs-1);
         end);
end method production-133;

define method production-134
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <EXPRESSION-PARSE>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <BINOP-SERIES>);
  // expression-no-symbol-aux -> binary-operand-no-symbol
  values(151,
         begin
           make(<binop-series>, operand: rhs-1, operand-srcloc: srcloc-1);
         end);
end method production-134;

define method production-135
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <BINOP-SERIES>, srcloc-1 :: <source-location>,
     rhs-2 :: <OPERATOR-TOKEN>, srcloc-2 :: <source-location>,
     rhs-3 :: <EXPRESSION-PARSE>, srcloc-3 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <BINOP-SERIES>);
  // expression-no-symbol-aux -> expression-no-symbol-aux BINARY-OPERATOR binary-operand
  values(151,
         begin
           add-binop(rhs-1, rhs-2, rhs-3, srcloc-3);
         end);
end method production-135;

define method production-136
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <LITERAL-TOKEN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <EXPRESSION-PARSE>);
  // binary-operand -> SYMBOL
  values(select (prev-state)
           159 => 160;
           152 => 154;
           OTHERWISE => 157;
         end,
         begin
           make(<literal-ref-parse>, source-location: simplify-source-location(srcloc-1),
                literal: rhs-1.token-literal);
         end);
end method production-136;

define method production-137
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <EXPRESSION-PARSE>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <EXPRESSION-PARSE>);
  // binary-operand -> binary-operand-no-symbol
  values(select (prev-state)
           159 => 160;
           152 => 154;
           OTHERWISE => 157;
         end,
         begin
           rhs-1;
         end);
end method production-137;

define method production-138
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <EXPRESSION-PARSE>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <EXPRESSION-PARSE>);
  // binary-operand-no-symbol -> operand
  values(select (prev-state)
           475 => 150;
           164 => 150;
           145 => 150;
           142 => 150;
           OTHERWISE => 153;
         end,
         begin
           rhs-1;
         end);
end method production-138;

define method production-139
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <OPERATOR-TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <EXPRESSION-PARSE>, srcloc-2 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <EXPRESSION-PARSE>);
  // binary-operand-no-symbol -> MINUS operand
  values(select (prev-state)
           475 => 150;
           164 => 150;
           145 => 150;
           142 => 150;
           OTHERWISE => 153;
         end,
         begin
           make(<funcall-parse>,
                source-location: simplify-source-location(srcloc-0),
                function: make(<varref-parse>,
                		      source-location: simplify-source-location(srcloc-1),
         		      id: make(<identifier-token>,
         			       source-location: simplify-source-location(srcloc-1),
         			       kind: $raw-ordinary-word-token,
         			       symbol: #"negative",
         			       module: rhs-1.token-module,
         			       uniquifier: rhs-1.token-uniquifier)),
                arguments: vector(rhs-2));
         end);
end method production-139;

define method production-140
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <IDENTIFIER-TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <EXPRESSION-PARSE>, srcloc-2 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <EXPRESSION-PARSE>);
  // binary-operand-no-symbol -> TILDE operand
  values(select (prev-state)
           475 => 150;
           164 => 150;
           145 => 150;
           142 => 150;
           OTHERWISE => 153;
         end,
         begin
           make(<funcall-parse>,
                source-location: simplify-source-location(srcloc-0),
                function: make(<varref-parse>,
         		      source-location: simplify-source-location(srcloc-1),
         		      id: rhs-1),
                arguments: vector(rhs-2));
         end);
end method production-140;

define method production-141
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <EXPRESSION-PARSE>, srcloc-1 :: <source-location>,
     rhs-2 :: <TOKEN>, srcloc-2 :: <source-location>,
     rhs-3 :: <SIMPLE-OBJECT-VECTOR>, srcloc-3 :: <source-location>,
     rhs-4 :: <TOKEN>, srcloc-4 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <EXPRESSION-PARSE>);
  // operand -> operand LEFT-PAREN arguments-opt RIGHT-PAREN
  values(select (prev-state)
           469 => 470;
           146 => 147;
           143 => 144;
           6 => 459;
           OTHERWISE => 141;
         end,
         begin
           make(<funcall-parse>, source-location: simplify-source-location(srcloc-0),
                function: rhs-1, arguments: rhs-3);
         end);
end method production-141;

define method production-142
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <EXPRESSION-PARSE>, srcloc-1 :: <source-location>,
     rhs-2 :: <TOKEN>, srcloc-2 :: <source-location>,
     rhs-3 :: <SIMPLE-OBJECT-VECTOR>, srcloc-3 :: <source-location>,
     rhs-4 :: <TOKEN>, srcloc-4 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <EXPRESSION-PARSE>);
  // operand -> operand LEFT-BRACKET arguments-opt RIGHT-BRACKET
  values(select (prev-state)
           469 => 470;
           146 => 147;
           143 => 144;
           6 => 459;
           OTHERWISE => 141;
         end,
         begin
           make(<funcall-parse>,
                source-location: simplify-source-location(srcloc-0),
                function: make(<varref-parse>,
                		      source-location: simplify-source-location(srcloc-1),
         		      id: make(<identifier-token>,
         			       source-location: simplify-source-location(srcloc-1),
         			       kind: $raw-ordinary-word-token,
         			       symbol: if (rhs-3.size == 1)
         					 #"element";
         				       else
         					 #"aref";
         				       end,
         			       module: $Dylan-Module,
         			       uniquifier: make(<uniquifier>))),
                arguments: apply(vector, rhs-1, rhs-3));
         end);
end method production-142;

define method production-143
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <EXPRESSION-PARSE>, srcloc-1 :: <source-location>,
     rhs-2 :: <TOKEN>, srcloc-2 :: <source-location>,
     rhs-3 :: <IDENTIFIER-TOKEN>, srcloc-3 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <EXPRESSION-PARSE>);
  // operand -> operand DOT variable-name
  values(select (prev-state)
           469 => 470;
           146 => 147;
           143 => 144;
           6 => 459;
           OTHERWISE => 141;
         end,
         begin
           make(<dot-parse>, source-location: simplify-source-location(srcloc-0),
                operand: rhs-1, name: rhs-3);
         end);
end method production-143;

define method production-144
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <PRE-PARSED-TOKEN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <EXPRESSION-PARSE>);
  // operand -> PARSED-EXPRESSION
  values(select (prev-state)
           469 => 470;
           146 => 147;
           143 => 144;
           6 => 459;
           OTHERWISE => 141;
         end,
         begin
           rhs-1.token-parse-tree;
         end);
end method production-144;

define method production-145
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <EXPRESSION-PARSE>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <EXPRESSION-PARSE>);
  // operand -> leaf
  values(select (prev-state)
           469 => 470;
           146 => 147;
           143 => 144;
           6 => 459;
           OTHERWISE => 141;
         end,
         begin
           rhs-1;
         end);
end method production-145;

define method production-146
    (prev-state :: <integer>, srcloc-0 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <SIMPLE-OBJECT-VECTOR>);
  // arguments-opt -> epsilon
  values(select (prev-state)
           145 => 166;
           OTHERWISE => 168;
         end,
         begin
           #[];
         end);
end method production-146;

define method production-147
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <STRETCHY-VECTOR>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <SIMPLE-OBJECT-VECTOR>);
  // arguments-opt -> arguments
  values(select (prev-state)
           145 => 166;
           OTHERWISE => 168;
         end,
         begin
           as(<simple-object-vector>, rhs-1);
         end);
end method production-147;

define method production-148
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: TYPE-UNION(<PAIR>, <EXPRESSION-PARSE>), srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <STRETCHY-VECTOR>);
  // arguments -> argument
  values(select (prev-state)
           475 => 476;
           OTHERWISE => 163;
         end,
         begin
           if (instance?(rhs-1, <pair>))
             stretchy-vector(rhs-1.head, rhs-1.tail);
           else
             stretchy-vector(rhs-1);
           end;
         end);
end method production-148;

define method production-149
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <STRETCHY-VECTOR>, srcloc-1 :: <source-location>,
     rhs-2 :: <TOKEN>, srcloc-2 :: <source-location>,
     rhs-3 :: TYPE-UNION(<PAIR>, <EXPRESSION-PARSE>), srcloc-3 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <STRETCHY-VECTOR>);
  // arguments -> arguments COMMA argument
  values(select (prev-state)
           475 => 476;
           OTHERWISE => 163;
         end,
         begin
           if (instance?(rhs-3, <pair>))
             add!(add!(rhs-1, rhs-3.head), rhs-3.tail);
           else
             add!(rhs-1, rhs-3);
           end;
         end);
end method production-149;

define method production-150
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <LITERAL-TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <EXPRESSION-PARSE>, srcloc-2 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: TYPE-UNION(<PAIR>, <EXPRESSION-PARSE>));
  // argument -> SYMBOL expression
  values(select (prev-state)
           164 => 165;
           OTHERWISE => 162;
         end,
         begin
           pair(make(<literal-ref-parse>,
         	    source-location: simplify-source-location(srcloc-1),
           	    literal: rhs-1.token-literal),
                rhs-2);
         end);
end method production-150;

define method production-151
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <EXPRESSION-PARSE>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: TYPE-UNION(<PAIR>, <EXPRESSION-PARSE>));
  // argument -> expression-no-symbol
  values(select (prev-state)
           164 => 165;
           OTHERWISE => 162;
         end,
         begin
           rhs-1;
         end);
end method production-151;

define method production-152
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <LITERAL-TOKEN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: TYPE-UNION(<PAIR>, <EXPRESSION-PARSE>));
  // argument -> SYMBOL
  values(select (prev-state)
           164 => 165;
           OTHERWISE => 162;
         end,
         begin
           make(<literal-ref-parse>,
                source-location: simplify-source-location(srcloc-1),
                literal: rhs-1.token-literal);
         end);
end method production-152;

define method production-153
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <LITERAL-REF-PARSE>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <EXPRESSION-PARSE>);
  // leaf -> literal-ref
  values(140,
         begin
           rhs-1;
         end);
end method production-153;

define method production-154
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <IDENTIFIER-TOKEN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <EXPRESSION-PARSE>);
  // leaf -> variable-name
  values(140,
         begin
           make(<varref-parse>, source-location: simplify-source-location(srcloc-1), id: rhs-1);
         end);
end method production-154;

define method production-155
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <EXPRESSION-PARSE>, srcloc-2 :: <source-location>,
     rhs-3 :: <TOKEN>, srcloc-3 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <EXPRESSION-PARSE>);
  // leaf -> LEFT-PAREN expression RIGHT-PAREN
  values(140,
         begin
           rhs-2;
         end);
end method production-155;

define method production-156
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <FUNCTION-MACRO-CALL-PARSE>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <EXPRESSION-PARSE>);
  // leaf -> function-macro-call
  values(140,
         begin
           rhs-1;
         end);
end method production-156;

define method production-157
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <EXPRESSION-PARSE>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <EXPRESSION-PARSE>);
  // leaf -> statement
  values(140,
         begin
           rhs-1;
         end);
end method production-157;

define method production-158
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <PRE-PARSED-TOKEN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <EXPRESSION-PARSE>);
  // leaf -> PARSED-MACRO-CALL
  values(140,
         begin
           rhs-1.token-parse-tree;
         end);
end method production-158;

define method production-159
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <LITERAL-TOKEN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <LITERAL-REF-PARSE>);
  // literal-ref -> LITERAL
  values(48,
         begin
           make(<literal-ref-parse>,
                source-location: simplify-source-location(srcloc-1),
                literal: rhs-1.token-literal);
         end);
end method production-159;

define method production-160
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <LITERAL-TOKEN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <LITERAL-REF-PARSE>);
  // literal-ref -> STRING
  values(48,
         begin
           make(<literal-ref-parse>,
                source-location: simplify-source-location(srcloc-1),
                literal: rhs-1.token-literal);
         end);
end method production-160;

define method production-161
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <LITERAL-TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <STRETCHY-VECTOR>, srcloc-2 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <LITERAL-REF-PARSE>);
  // literal-ref -> STRING strings
  values(48,
         begin
           make(<literal-ref-parse>,
                source-location: simplify-source-location(srcloc-0),
                literal: apply(concat-strings, rhs-1.token-literal, rhs-2));
         end);
end method production-161;

define method production-162
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <LITERAL-REF-PARSE>);
  // literal-ref -> TRUE
  values(48,
         begin
           make(<literal-ref-parse>,
                source-location: simplify-source-location(srcloc-1),
                literal: make(<literal-true>));
         end);
end method production-162;

define method production-163
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <LITERAL-REF-PARSE>);
  // literal-ref -> FALSE
  values(48,
         begin
           make(<literal-ref-parse>,
                source-location: simplify-source-location(srcloc-1),
                literal: make(<literal-false>));
         end);
end method production-163;

define method production-164
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <STRETCHY-VECTOR>, srcloc-2 :: <source-location>,
     rhs-3 :: <TOKEN>, srcloc-3 :: <source-location>,
     rhs-4 :: <LITERAL>, srcloc-4 :: <source-location>,
     rhs-5 :: <TOKEN>, srcloc-5 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <LITERAL-REF-PARSE>);
  // literal-ref -> SHARP-PAREN constants DOT constant RIGHT-PAREN
  values(48,
         begin
           make(<literal-ref-parse>,
                source-location: simplify-source-location(srcloc-0),
                literal: make(<literal-list>, sharable: #t,
         		     contents: as(<simple-object-vector>, rhs-2),
         		     tail: rhs-4));
         end);
end method production-164;

define method production-165
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <SIMPLE-OBJECT-VECTOR>, srcloc-2 :: <source-location>,
     rhs-3 :: <TOKEN>, srcloc-3 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <LITERAL-REF-PARSE>);
  // literal-ref -> SHARP-PAREN constants-opt RIGHT-PAREN
  values(48,
         begin
           make(<literal-ref-parse>,
                source-location: simplify-source-location(srcloc-0),
                literal: make(<literal-list>, sharable: #t, contents: rhs-2));
         end);
end method production-165;

define method production-166
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <SIMPLE-OBJECT-VECTOR>, srcloc-2 :: <source-location>,
     rhs-3 :: <TOKEN>, srcloc-3 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <LITERAL-REF-PARSE>);
  // literal-ref -> SHARP-BRACKET constants-opt RIGHT-BRACKET
  values(48,
         begin
           make(<literal-ref-parse>,
                source-location: simplify-source-location(srcloc-0),
                literal: make(<literal-simple-object-vector>,
         		     sharable: #t, contents: rhs-2));
         end);
end method production-166;

define method production-167
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <PRE-PARSED-TOKEN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <LITERAL-REF-PARSE>);
  // literal-ref -> PARSED-CONSTANT
  values(48,
         begin
           make(<literal-ref-parse>,
                source-location: simplify-source-location(srcloc-1),
                literal: rhs-1.token-parse-tree);
         end);
end method production-167;

define method production-168
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <LITERAL-TOKEN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <STRETCHY-VECTOR>);
  // strings -> STRING
  values(select (prev-state)
           17 => 18;
           OTHERWISE => 11;
         end,
         begin
           stretchy-vector(rhs-1.token-literal);
         end);
end method production-168;

define method production-169
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <STRETCHY-VECTOR>, srcloc-1 :: <source-location>,
     rhs-2 :: <LITERAL-TOKEN>, srcloc-2 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <STRETCHY-VECTOR>);
  // strings -> strings STRING
  values(select (prev-state)
           17 => 18;
           OTHERWISE => 11;
         end,
         begin
           add!(rhs-1, rhs-2.token-literal);
         end);
end method production-169;

define method production-170
    (prev-state :: <integer>, srcloc-0 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <SIMPLE-OBJECT-VECTOR>);
  // constants-opt -> epsilon
  values(select (prev-state)
           111 => 112;
           104 => 109;
           44 => 45;
           22 => 30;
           21 => 36;
           OTHERWISE => 42;
         end,
         begin
           #[];
         end);
end method production-170;

define method production-171
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <STRETCHY-VECTOR>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <SIMPLE-OBJECT-VECTOR>);
  // constants-opt -> constants
  values(select (prev-state)
           111 => 112;
           104 => 109;
           44 => 45;
           22 => 30;
           21 => 36;
           OTHERWISE => 42;
         end,
         begin
           as(<simple-object-vector>, rhs-1);
         end);
end method production-171;

define method production-172
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <LITERAL>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <STRETCHY-VECTOR>);
  // constants -> constant
  values(select (prev-state)
           104 => 105;
           21 => 32;
           15 => 38;
           OTHERWISE => 27;
         end,
         begin
           stretchy-vector(rhs-1);
         end);
end method production-172;

define method production-173
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <STRETCHY-VECTOR>, srcloc-1 :: <source-location>,
     rhs-2 :: <TOKEN>, srcloc-2 :: <source-location>,
     rhs-3 :: <LITERAL>, srcloc-3 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <STRETCHY-VECTOR>);
  // constants -> constants COMMA constant
  values(select (prev-state)
           104 => 105;
           21 => 32;
           15 => 38;
           OTHERWISE => 27;
         end,
         begin
           add!(rhs-1, rhs-3);
         end);
end method production-173;

define method production-174
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <LITERAL>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <LITERAL>);
  // constant -> raw-literal
  values(select (prev-state)
           106 => 107;
           39 => 40;
           33 => 34;
           28 => 29;
           OTHERWISE => 26;
         end,
         begin
           rhs-1;
         end);
end method production-174;

define method production-175
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <LITERAL-TOKEN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <LITERAL>);
  // constant -> SYMBOL
  values(select (prev-state)
           106 => 107;
           39 => 40;
           33 => 34;
           28 => 29;
           OTHERWISE => 26;
         end,
         begin
           rhs-1.token-literal;
         end);
end method production-175;

define method production-176
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <LITERAL-TOKEN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <LITERAL>);
  // raw-literal -> LITERAL
  values(24,
         begin
           rhs-1.token-literal;
         end);
end method production-176;

define method production-177
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <LITERAL-TOKEN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <LITERAL>);
  // raw-literal -> STRING
  values(24,
         begin
           rhs-1.token-literal;
         end);
end method production-177;

define method production-178
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <LITERAL-TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <STRETCHY-VECTOR>, srcloc-2 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <LITERAL>);
  // raw-literal -> STRING strings
  values(24,
         begin
           apply(concat-strings, rhs-1.token-literal, rhs-2);
         end);
end method production-178;

define method production-179
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <LITERAL>);
  // raw-literal -> TRUE
  values(24,
         begin
           make(<literal-true>);
         end);
end method production-179;

define method production-180
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <LITERAL>);
  // raw-literal -> FALSE
  values(24,
         begin
           make(<literal-false>);
         end);
end method production-180;

define method production-181
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <STRETCHY-VECTOR>, srcloc-2 :: <source-location>,
     rhs-3 :: <TOKEN>, srcloc-3 :: <source-location>,
     rhs-4 :: <LITERAL>, srcloc-4 :: <source-location>,
     rhs-5 :: <TOKEN>, srcloc-5 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <LITERAL>);
  // raw-literal -> SHARP-PAREN constants DOT constant RIGHT-PAREN
  values(24,
         begin
           make(<literal-list>, sharable: #t,
                contents: as(<simple-object-vector>, rhs-2),
                tail: rhs-4);
         end);
end method production-181;

define method production-182
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <SIMPLE-OBJECT-VECTOR>, srcloc-2 :: <source-location>,
     rhs-3 :: <TOKEN>, srcloc-3 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <LITERAL>);
  // raw-literal -> SHARP-PAREN constants-opt RIGHT-PAREN
  values(24,
         begin
           make(<literal-list>, sharable: #t, contents: rhs-2);
         end);
end method production-182;

define method production-183
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <SIMPLE-OBJECT-VECTOR>, srcloc-2 :: <source-location>,
     rhs-3 :: <TOKEN>, srcloc-3 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <LITERAL>);
  // raw-literal -> SHARP-BRACKET constants-opt RIGHT-BRACKET
  values(24,
         begin
           make(<literal-simple-object-vector>, sharable: #t, contents: rhs-2);
         end);
end method production-183;

define method production-184
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <PRE-PARSED-TOKEN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <LITERAL>);
  // raw-literal -> PARSED-CONSTANT
  values(24,
         begin
           rhs-1.token-parse-tree;
         end);
end method production-184;

define method production-185
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <IDENTIFIER-TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <TOKEN>, srcloc-2 :: <source-location>,
     rhs-3 :: <FRAGMENT>, srcloc-3 :: <source-location>,
     rhs-4 :: <TOKEN>, srcloc-4 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <FUNCTION-MACRO-CALL-PARSE>);
  // function-macro-call -> FUNCTION-WORD LEFT-PAREN body-fragment-opt RIGHT-PAREN
  values(#[78, 0, 0, 0, 0, 0, 78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78, 0, 0, 117, 0, 0, 0, 0, 0, 0, 0, 0, 117, 0, 117, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78, 0, 117, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 117, 117, 117, 0, 117, 117, 117, 0, 117, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78, 78, 0, 78, 78, 0, 0, 0, 0, 0, 78, 0, 0, 0, 78, 0, 0, 78, 0, 0, 0, 0, 78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78, 0, 0, 0, 0, 0, 78, 0, 0, 0, 0, 0, 78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 117, 117, 117, 0, 117, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78, 0, 0, 0, 0, 78, 0, 0, 78, 0, 78, 0, 78, 0, 78, 0, 0, 78, 0, 0, 0, 0, 78, 0, 0, 0, 0, 0, 0, 78, 0, 0, 0, 0, 78, 0, 0, 0, 0, 0, 78, 0, 78, 0, 0, 0, 78, 0, 0, 78, 0, 78, 0, 0, 0, 0, 0, 78, 0, 0, 0, 78, 78, 0, 0, 0, 78, 78, 0, 0, 0, 0, 0, 117, 117, 0, 117, 0, 0, 0, 0, 0, 0, 117, 0, 0, 0, 0, 0, 0, 555][prev-state],
         begin
           make(<function-macro-call-parse>,
                source-location: simplify-source-location(srcloc-0),
                word: rhs-1,
                fragment: rhs-3);
         end);
end method production-185;

define method production-186
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <IDENTIFIER-TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <FRAGMENT>, srcloc-2 :: <source-location>,
     rhs-3 :: FALSE-OR(<TOKEN>), srcloc-3 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <EXPRESSION-PARSE>);
  // statement -> BEGIN-WORD body-fragment-opt end-clause
  values(#[138, 0, 0, 0, 0, 0, 138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 138, 0, 0, 122, 0, 0, 0, 0, 0, 0, 0, 0, 122, 0, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 138, 0, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 122, 122, 122, 0, 122, 122, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 138, 138, 0, 138, 138, 0, 0, 0, 0, 0, 138, 0, 0, 0, 138, 0, 0, 138, 0, 0, 0, 0, 138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 138, 0, 0, 0, 0, 0, 138, 0, 0, 0, 0, 0, 138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 258, 258, 258, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 138, 0, 0, 0, 0, 138, 0, 0, 138, 0, 138, 0, 138, 0, 138, 0, 0, 138, 0, 0, 0, 0, 138, 0, 0, 0, 0, 0, 0, 138, 0, 0, 0, 0, 138, 0, 0, 0, 0, 0, 138, 0, 138, 0, 0, 0, 138, 0, 0, 138, 0, 138, 0, 0, 0, 0, 0, 138, 0, 0, 0, 138, 138, 0, 0, 0, 138, 138, 0, 0, 0, 0, 0, 537, 537, 0, 0, 0, 0, 0, 0, 0, 0, 537, 0, 0, 0, 0, 0, 0, 554][prev-state],
         begin
           if (rhs-3 & ~same-id?(rhs-1, rhs-3))
             compiler-error("Begin-word mismatch: %s isn't %s", rhs-3, rhs-1);
           end;
           make(<statement-parse>, source-location: simplify-source-location(srcloc-0),
                word: rhs-1, fragment: rhs-2);
         end);
end method production-186;

define method production-187
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <IDENTIFIER-TOKEN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: FALSE-OR(<TOKEN>));
  // end-clause -> END
  values(137,
         begin
           #f;
         end);
end method production-187;

define method production-188
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <IDENTIFIER-TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <IDENTIFIER-TOKEN>, srcloc-2 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: FALSE-OR(<TOKEN>));
  // end-clause -> END BEGIN-WORD
  values(137,
         begin
           rhs-2;
         end);
end method production-188;

define method production-189
    (prev-state :: <integer>, srcloc-0 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <FRAGMENT>);
  // case-body-opt -> epsilon
  values(532,
         begin
           make(<empty-fragment>, source-location: srcloc-0);
         end);
end method production-189;

define method production-190
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <FRAGMENT>);
  // case-body-opt -> SEMICOLON
  values(532,
         begin
           make(<token-fragment>, source-location: srcloc-1, token: rhs-1);
         end);
end method production-190;

define method production-191
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <CASE-BODY-PARSE-STATE>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <FRAGMENT>);
  // case-body-opt -> case-body-1
  values(532,
         begin
           rhs-1.fragment;
         end);
end method production-191;

define method production-192
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <CASE-BODY-PARSE-STATE>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <FRAGMENT>);
  // case-body-opt -> case-body-1-semi
  values(532,
         begin
           rhs-1.fragment;
         end);
end method production-192;

define method production-193
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <CASE-BODY-PARSE-STATE>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <FRAGMENT>);
  // case-body-opt -> case-body-2
  values(532,
         begin
           finish-case-body(rhs-1);
           rhs-1.fragment;
         end);
end method production-193;

define method production-194
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <CASE-BODY-PARSE-STATE>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <FRAGMENT>);
  // case-body-opt -> case-body-2-semi
  values(532,
         begin
           finish-case-body(rhs-1);
           rhs-1.fragment;
         end);
end method production-194;

define method production-195
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <FRAGMENT>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <CASE-BODY-PARSE-STATE>);
  // case-body-1 -> case-label
  values(520,
         begin
           // Make a new state and add the label.
           make(<case-body-parse-state>, fragment: rhs-1);
         end);
end method production-195;

define method production-196
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <CASE-BODY-PARSE-STATE>, srcloc-1 :: <source-location>,
     rhs-2 :: <FRAGMENT>, srcloc-2 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <CASE-BODY-PARSE-STATE>);
  // case-body-1 -> case-body-1-semi case-label
  values(520,
         begin
           // Add the label.
           push-case-fragment(rhs-1, rhs-2);
           rhs-1;
         end);
end method production-196;

define method production-197
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <CASE-BODY-PARSE-STATE>, srcloc-1 :: <source-location>,
     rhs-2 :: <FRAGMENT>, srcloc-2 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <CASE-BODY-PARSE-STATE>);
  // case-body-1 -> case-body-2-semi case-label
  values(520,
         begin
           // Make a body out of the accumulated constituents and push them.
           finish-case-body(rhs-1);
           // Push the label.
           push-case-fragment(rhs-1, rhs-2);
           rhs-1;
         end);
end method production-197;

define method production-198
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <CASE-BODY-PARSE-STATE>, srcloc-1 :: <source-location>,
     rhs-2 :: <TOKEN>, srcloc-2 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <CASE-BODY-PARSE-STATE>);
  // case-body-1-semi -> case-body-1 SEMICOLON
  values(522,
         begin
           // Add the semicolon to the fragment.
           push-case-fragment
             (rhs-1, make(<token-fragment>, source-location: srcloc-2, token: rhs-2));
           rhs-1;
         end);
end method production-198;

define method production-199
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <FRAGMENT>, srcloc-1 :: <source-location>,
     rhs-2 :: <CONSTITUENT-PARSE>, srcloc-2 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <CASE-BODY-PARSE-STATE>);
  // case-body-2 -> case-label constituent
  values(525,
         begin
           // make a new state from the case-label and constituent.
           make(<case-body-parse-state>,
                fragment: rhs-1,
                constituents: stretchy-vector(rhs-2),
                constituents-srcloc: srcloc-2);
         end);
end method production-199;

define method production-200
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <CASE-BODY-PARSE-STATE>, srcloc-1 :: <source-location>,
     rhs-2 :: <FRAGMENT>, srcloc-2 :: <source-location>,
     rhs-3 :: <CONSTITUENT-PARSE>, srcloc-3 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <CASE-BODY-PARSE-STATE>);
  // case-body-2 -> case-body-1-semi case-label constituent
  values(525,
         begin
           // append the case-label to the fragment, prime the body with constituent
           push-case-fragment(rhs-1, rhs-2);
           push-case-constituent(rhs-1, rhs-3, srcloc-3);
           rhs-1;
         end);
end method production-200;

define method production-201
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <CASE-BODY-PARSE-STATE>, srcloc-1 :: <source-location>,
     rhs-2 :: <FRAGMENT>, srcloc-2 :: <source-location>,
     rhs-3 :: <CONSTITUENT-PARSE>, srcloc-3 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <CASE-BODY-PARSE-STATE>);
  // case-body-2 -> case-body-2-semi case-label constituent
  values(525,
         begin
           // append the body, the semi, and the case-label to the fragment.
           finish-case-body(rhs-1);
           push-case-fragment(rhs-1, rhs-2);
           // Start a new body with the constituent.
           push-case-constituent(rhs-1, rhs-3, srcloc-3);
           rhs-1;
         end);
end method production-201;

define method production-202
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <CASE-BODY-PARSE-STATE>, srcloc-1 :: <source-location>,
     rhs-2 :: <CONSTITUENT-PARSE>, srcloc-2 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <CASE-BODY-PARSE-STATE>);
  // case-body-2 -> case-body-2-semi constituent
  values(525,
         begin
           // add the constituent to the partial body.
           push-case-constituent(rhs-1, rhs-2, srcloc-2);
           rhs-1;
         end);
end method production-202;

define method production-203
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <CASE-BODY-PARSE-STATE>, srcloc-1 :: <source-location>,
     rhs-2 :: <TOKEN>, srcloc-2 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <CASE-BODY-PARSE-STATE>);
  // case-body-2-semi -> case-body-2 SEMICOLON
  values(527,
         begin
           // set the semicolon.  We don't push it immediately because it might just
           // be separating two constituents, in which case we are going to want to
           // drop it.
           rhs-1.semicolon := make(<token-fragment>, source-location: srcloc-2, token: rhs-2);
           rhs-1;
         end);
end method production-203;

define method production-204
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <FRAGMENT>, srcloc-1 :: <source-location>,
     rhs-2 :: <TOKEN>, srcloc-2 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <FRAGMENT>);
  // case-label -> case-label-expressions ARROW
  values(select (prev-state)
           527 => 528;
           522 => 523;
           OTHERWISE => 518;
         end,
         begin
           append-fragments!
             (rhs-1, make(<token-fragment>, source-location: srcloc-2, token: rhs-2));
         end);
end method production-204;

define method production-205
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <EXPRESSION-PARSE>, srcloc-2 :: <source-location>,
     rhs-3 :: <TOKEN>, srcloc-3 :: <source-location>,
     rhs-4 :: <FRAGMENT>, srcloc-4 :: <source-location>,
     rhs-5 :: <TOKEN>, srcloc-5 :: <source-location>,
     rhs-6 :: <TOKEN>, srcloc-6 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <FRAGMENT>);
  // case-label -> LEFT-PAREN expression COMMA case-label-expressions RIGHT-PAREN ARROW
  values(select (prev-state)
           527 => 528;
           522 => 523;
           OTHERWISE => 518;
         end,
         begin
           append-fragments!
             (make(<bracketed-fragment>,
         	  left-token: rhs-1, left-srcloc: srcloc-1, 
         	  contents:
         	    append-fragments!
         	      (append-fragments!
         		 (make-parsed-fragment(rhs-2, source-location: srcloc-2),
         		  make(<token-fragment>, source-location: srcloc-3, token: rhs-3)),
         	       rhs-4),
         	  right-token: rhs-5, right-srcloc: srcloc-5),
              make(<token-fragment>, source-location: srcloc-6, token: rhs-6));
         end);
end method production-205;

define method production-206
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <IDENTIFIER-TOKEN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <FRAGMENT>);
  // case-label -> OTHERWISE
  values(select (prev-state)
           527 => 528;
           522 => 523;
           OTHERWISE => 518;
         end,
         begin
           make(<token-fragment>, source-location: srcloc-1, token: rhs-1);
         end);
end method production-206;

define method production-207
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <IDENTIFIER-TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <TOKEN>, srcloc-2 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <FRAGMENT>);
  // case-label -> OTHERWISE ARROW
  values(select (prev-state)
           527 => 528;
           522 => 523;
           OTHERWISE => 518;
         end,
         begin
           append-fragments!(make(<token-fragment>, source-location: srcloc-1, token: rhs-1),
         		    make(<token-fragment>, source-location: srcloc-2, token: rhs-2));
         end);
end method production-207;

define method production-208
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <EXPRESSION-PARSE>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <FRAGMENT>);
  // case-label-expressions -> expression
  values(select (prev-state)
           512 => 513;
           OTHERWISE => 506;
         end,
         begin
           make-parsed-fragment(rhs-1, source-location: srcloc-1);
         end);
end method production-208;

define method production-209
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <FRAGMENT>, srcloc-1 :: <source-location>,
     rhs-2 :: <TOKEN>, srcloc-2 :: <source-location>,
     rhs-3 :: <EXPRESSION-PARSE>, srcloc-3 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <FRAGMENT>);
  // case-label-expressions -> case-label-expressions COMMA expression
  values(select (prev-state)
           512 => 513;
           OTHERWISE => 506;
         end,
         begin
           append-fragments!
             (append-fragments!
                (rhs-1, make(<token-fragment>, source-location: srcloc-2, token: rhs-2)),
              make-parsed-fragment(rhs-3, source-location: srcloc-3));
         end);
end method production-209;

define method production-210
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <IDENTIFIER-TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <METHOD-PARSE>, srcloc-2 :: <source-location>,
     rhs-3 :: <IDENTIFIER-TOKEN>, srcloc-3 :: <source-location>,
     rhs-4 :: FALSE-OR(<IDENTIFIER-TOKEN>), srcloc-4 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <METHOD-PARSE>);
  // method-definition -> method-and-name method-body END method-and-name-opt
  values(select (prev-state)
           245 => 246;
           OTHERWISE => 243;
         end,
         begin
           if (rhs-4 & ~same-id?(rhs-1, rhs-4))
             compiler-error("Name mismatch: %s isn't %s",
         		   rhs-4.token-symbol, rhs-1.token-symbol);
           end;
           rhs-2.method-name := rhs-1;
           rhs-2;
         end);
end method production-210;

define method production-211
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <IDENTIFIER-TOKEN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <IDENTIFIER-TOKEN>);
  // method-and-name -> variable-name
  values(72,
         begin
           if (rhs-1.token-symbol == #"method")
             compiler-fatal-error("Parse error at or before %s", rhs-1);
           end;
           rhs-1;
         end);
end method production-211;

define method production-212
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <IDENTIFIER-TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <IDENTIFIER-TOKEN>, srcloc-2 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <IDENTIFIER-TOKEN>);
  // method-and-name -> variable-name variable-name
  values(72,
         begin
           unless (rhs-1.token-symbol == #"method")
             compiler-fatal-error("Parse error at or before %s", rhs-1);
           end;
           rhs-2;
         end);
end method production-212;

define method production-213
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <IDENTIFIER-TOKEN>, srcloc-2 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <IDENTIFIER-TOKEN>);
  // method-and-name -> non-variable-name variable-name
  values(72,
         begin
           unless (rhs-1.token-symbol == #"method")
             compiler-fatal-error("Parse error at or before %s", rhs-1);
           end;
           rhs-2;
         end);
end method production-213;

define method production-214
    (prev-state :: <integer>, srcloc-0 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: FALSE-OR(<IDENTIFIER-TOKEN>));
  // method-and-name-opt -> epsilon
  values(242,
         begin
           #f
         end);
end method production-214;

define method production-215
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <IDENTIFIER-TOKEN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: FALSE-OR(<IDENTIFIER-TOKEN>));
  // method-and-name-opt -> variable-name
  values(242,
         begin
           unless (rhs-1.token-symbol == #"method")
             rhs-1;
           end;
         end);
end method production-215;

define method production-216
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <IDENTIFIER-TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <IDENTIFIER-TOKEN>, srcloc-2 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: FALSE-OR(<IDENTIFIER-TOKEN>));
  // method-and-name-opt -> variable-name variable-name
  values(242,
         begin
           unless (rhs-1.token-symbol == #"method")
             compiler-fatal-error("Parse error at or before %s", rhs-1);
           end;
           rhs-2;
         end);
end method production-216;

define method production-217
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: FALSE-OR(<IDENTIFIER-TOKEN>));
  // method-and-name-opt -> non-variable-name
  values(242,
         begin
           unless (rhs-1.token-symbol == #"method")
             compiler-fatal-error("Parse error at or before %s", rhs-1);
           end;
           #f;
         end);
end method production-217;

define method production-218
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <IDENTIFIER-TOKEN>, srcloc-2 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: FALSE-OR(<IDENTIFIER-TOKEN>));
  // method-and-name-opt -> non-variable-name variable-name
  values(242,
         begin
           unless (rhs-1.token-symbol == #"method")
             compiler-fatal-error("Parse error at or before %s", rhs-1);
           end;
           rhs-2;
         end);
end method production-218;

define method production-219
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <PARAMETER-LIST>, srcloc-2 :: <source-location>,
     rhs-3 :: <TOKEN>, srcloc-3 :: <source-location>,
     rhs-4 :: FALSE-OR(<TOKEN>), srcloc-4 :: <source-location>,
     rhs-5 :: <EXPRESSION-PARSE>, srcloc-5 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <METHOD-PARSE>);
  // method-body -> LEFT-PAREN parameter-list-opt RIGHT-PAREN semi-opt body-opt
  values(236,
         begin
           make(<method-parse>, parameters: rhs-2, body: rhs-5);
         end);
end method production-219;

define method production-220
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <PARAMETER-LIST>, srcloc-2 :: <source-location>,
     rhs-3 :: <TOKEN>, srcloc-3 :: <source-location>,
     rhs-4 :: <TOKEN>, srcloc-4 :: <source-location>,
     rhs-5 :: <PARAMETER>, srcloc-5 :: <source-location>,
     rhs-6 :: <TOKEN>, srcloc-6 :: <source-location>,
     rhs-7 :: <EXPRESSION-PARSE>, srcloc-7 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <METHOD-PARSE>);
  // method-body -> LEFT-PAREN parameter-list-opt RIGHT-PAREN ARROW variable SEMICOLON body-opt
  values(236,
         begin
           make(<method-parse>,
                parameters: rhs-2,
                returns: make(<parameter-list>, fixed: vector(rhs-5)),
                body: rhs-7);
         end);
end method production-220;

define method production-221
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <PARAMETER-LIST>, srcloc-2 :: <source-location>,
     rhs-3 :: <TOKEN>, srcloc-3 :: <source-location>,
     rhs-4 :: <TOKEN>, srcloc-4 :: <source-location>,
     rhs-5 :: <TOKEN>, srcloc-5 :: <source-location>,
     rhs-6 :: <VARIABLE-LIST>, srcloc-6 :: <source-location>,
     rhs-7 :: <TOKEN>, srcloc-7 :: <source-location>,
     rhs-8 :: FALSE-OR(<TOKEN>), srcloc-8 :: <source-location>,
     rhs-9 :: <EXPRESSION-PARSE>, srcloc-9 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <METHOD-PARSE>);
  // method-body -> LEFT-PAREN parameter-list-opt RIGHT-PAREN ARROW LEFT-PAREN variable-list-opt RIGHT-PAREN semi-opt body-opt
  values(236,
         begin
           make(<method-parse>, parameters: rhs-2, returns: rhs-6, body: rhs-9);
         end);
end method production-221;

define method production-222
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <PRE-PARSED-TOKEN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <PARAMETER-LIST>);
  // parameter-list-opt -> PARSED-PARAMETER-LIST
  values(select (prev-state)
           547 => 548;
           OTHERWISE => 204;
         end,
         begin
           rhs-1.token-parse-tree;
         end);
end method production-222;

define method production-223
    (prev-state :: <integer>, srcloc-0 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <PARAMETER-LIST>);
  // parameter-list-opt -> epsilon
  values(select (prev-state)
           547 => 548;
           OTHERWISE => 204;
         end,
         begin
           make(<parameter-list>);
         end);
end method production-223;

define method production-224
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <STRETCHY-VECTOR>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <PARAMETER-LIST>);
  // parameter-list-opt -> parameters
  values(select (prev-state)
           547 => 548;
           OTHERWISE => 204;
         end,
         begin
           make(<parameter-list>, fixed: as(<simple-object-vector>, rhs-1));
         end);
end method production-224;

define method production-225
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <STRETCHY-VECTOR>, srcloc-1 :: <source-location>,
     rhs-2 :: <TOKEN>, srcloc-2 :: <source-location>,
     rhs-3 :: <PARAMETER-LIST>, srcloc-3 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <PARAMETER-LIST>);
  // parameter-list-opt -> parameters COMMA next-rest-key-parameter-list
  values(select (prev-state)
           547 => 548;
           OTHERWISE => 204;
         end,
         begin
           rhs-3.varlist-fixed := as(<simple-object-vector>, rhs-1);
           rhs-3;
         end);
end method production-225;

define method production-226
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <PARAMETER-LIST>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <PARAMETER-LIST>);
  // parameter-list-opt -> next-rest-key-parameter-list
  values(select (prev-state)
           547 => 548;
           OTHERWISE => 204;
         end,
         begin
           rhs-1;
         end);
end method production-226;

define method production-227
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <IDENTIFIER-TOKEN>, srcloc-2 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <PARAMETER-LIST>);
  // next-rest-key-parameter-list -> NEXT variable-name
  values(select (prev-state)
           173 => 202;
           OTHERWISE => 203;
         end,
         begin
           make(<parameter-list>, next: rhs-2);
         end);
end method production-227;

define method production-228
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <IDENTIFIER-TOKEN>, srcloc-2 :: <source-location>,
     rhs-3 :: <TOKEN>, srcloc-3 :: <source-location>,
     rhs-4 :: <PARAMETER-LIST>, srcloc-4 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <PARAMETER-LIST>);
  // next-rest-key-parameter-list -> NEXT variable-name COMMA rest-key-parameter-list
  values(select (prev-state)
           173 => 202;
           OTHERWISE => 203;
         end,
         begin
           rhs-4.paramlist-next := rhs-2;
           rhs-4;
         end);
end method production-228;

define method production-229
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <PARAMETER-LIST>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <PARAMETER-LIST>);
  // next-rest-key-parameter-list -> rest-key-parameter-list
  values(select (prev-state)
           173 => 202;
           OTHERWISE => 203;
         end,
         begin
           rhs-1;
         end);
end method production-229;

define method production-230
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <PARAMETER>, srcloc-2 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <PARAMETER-LIST>);
  // rest-key-parameter-list -> REST variable
  values(select (prev-state)
           177 => 200;
           OTHERWISE => 201;
         end,
         begin
           make(<parameter-list>, rest: rhs-2);
         end);
end method production-230;

define method production-231
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <PARAMETER>, srcloc-2 :: <source-location>,
     rhs-3 :: <TOKEN>, srcloc-3 :: <source-location>,
     rhs-4 :: <PARAMETER-LIST>, srcloc-4 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <PARAMETER-LIST>);
  // rest-key-parameter-list -> REST variable COMMA key-parameter-list
  values(select (prev-state)
           177 => 200;
           OTHERWISE => 201;
         end,
         begin
           rhs-4.varlist-rest := rhs-2;
           rhs-4;
         end);
end method production-231;

define method production-232
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <PARAMETER-LIST>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <PARAMETER-LIST>);
  // rest-key-parameter-list -> key-parameter-list
  values(select (prev-state)
           177 => 200;
           OTHERWISE => 201;
         end,
         begin
           rhs-1;
         end);
end method production-232;

define method production-233
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <SIMPLE-OBJECT-VECTOR>, srcloc-2 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <PARAMETER-LIST>);
  // key-parameter-list -> KEY keyword-parameters-opt
  values(select (prev-state)
           180 => 198;
           OTHERWISE => 199;
         end,
         begin
           make(<parameter-list>, keys: rhs-2);
         end);
end method production-233;

define method production-234
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <TOKEN>, srcloc-2 :: <source-location>,
     rhs-3 :: <TOKEN>, srcloc-3 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <PARAMETER-LIST>);
  // key-parameter-list -> KEY COMMA ALL-KEYS
  values(select (prev-state)
           180 => 198;
           OTHERWISE => 199;
         end,
         begin
           make(<parameter-list>, keys: #[], all-keys: #t);
         end);
end method production-234;

define method production-235
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <STRETCHY-VECTOR>, srcloc-2 :: <source-location>,
     rhs-3 :: <TOKEN>, srcloc-3 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <PARAMETER-LIST>);
  // key-parameter-list -> KEY keyword-parameters-comma ALL-KEYS
  values(select (prev-state)
           180 => 198;
           OTHERWISE => 199;
         end,
         begin
           make(<parameter-list>, keys: as(<simple-object-vector>, rhs-2), all-keys: #t);
         end);
end method production-235;

define method production-236
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <PARAMETER-LIST>);
  // key-parameter-list -> ALL-KEYS
  values(select (prev-state)
           180 => 198;
           OTHERWISE => 199;
         end,
         begin
           make(<parameter-list>, keys: #[], all-keys: #t);
         end);
end method production-236;

define method production-237
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <PARAMETER>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <STRETCHY-VECTOR>);
  // parameters -> parameter
  values(172,
         begin
           stretchy-vector(rhs-1);
         end);
end method production-237;

define method production-238
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <STRETCHY-VECTOR>, srcloc-1 :: <source-location>,
     rhs-2 :: <TOKEN>, srcloc-2 :: <source-location>,
     rhs-3 :: <PARAMETER>, srcloc-3 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <STRETCHY-VECTOR>);
  // parameters -> parameters COMMA parameter
  values(172,
         begin
           add!(rhs-1, rhs-3);
         end);
end method production-238;

define method production-239
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <PARAMETER>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <PARAMETER>);
  // parameter -> variable
  values(select (prev-state)
           173 => 174;
           OTHERWISE => 171;
         end,
         begin
           rhs-1;
         end);
end method production-239;

define method production-240
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <IDENTIFIER-TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <OPERATOR-TOKEN>, srcloc-2 :: <source-location>,
     rhs-3 :: <EXPRESSION-PARSE>, srcloc-3 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <PARAMETER>);
  // parameter -> variable-name DOUBLE-EQUAL expression
  values(select (prev-state)
           173 => 174;
           OTHERWISE => 171;
         end,
         begin
           let singleton-name = make(<identifier-token>,
         			    source-location: simplify-source-location(srcloc-2),
         			    kind: $raw-ordinary-word-token,
         			    symbol: #"singleton",
         			    module: $Dylan-Module,
         			    uniquifier: make(<uniquifier>));
           let singleton-varref
             = make(<varref-parse>, source-location: simplify-source-location(srcloc-2),
         	   id: singleton-name);
           let funcall = make(<funcall-parse>,
           		     source-location: source-location-spanning(srcloc-2, srcloc-3),
         		     function: singleton-varref,
         		     arguments: vector(rhs-3));
           make(<parameter>, name: rhs-1, type: funcall);
         end);
end method production-240;

define method production-241
    (prev-state :: <integer>, srcloc-0 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <SIMPLE-OBJECT-VECTOR>);
  // keyword-parameters-opt -> epsilon
  values(182,
         begin
           #[];
         end);
end method production-241;

define method production-242
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <STRETCHY-VECTOR>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <SIMPLE-OBJECT-VECTOR>);
  // keyword-parameters-opt -> keyword-parameters
  values(182,
         begin
           as(<simple-object-vector>, rhs-1);
         end);
end method production-242;

define method production-243
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <KEYWORD-PARAMETER>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <STRETCHY-VECTOR>);
  // keyword-parameters -> keyword-parameter
  values(192,
         begin
           stretchy-vector(rhs-1);
         end);
end method production-243;

define method production-244
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <STRETCHY-VECTOR>, srcloc-1 :: <source-location>,
     rhs-2 :: <KEYWORD-PARAMETER>, srcloc-2 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <STRETCHY-VECTOR>);
  // keyword-parameters -> keyword-parameters-comma keyword-parameter
  values(192,
         begin
           add!(rhs-1, rhs-2);
         end);
end method production-244;

define method production-245
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <STRETCHY-VECTOR>, srcloc-1 :: <source-location>,
     rhs-2 :: <TOKEN>, srcloc-2 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <STRETCHY-VECTOR>);
  // keyword-parameters-comma -> keyword-parameters COMMA
  values(194,
         begin
           rhs-1;
         end);
end method production-245;

define method production-246
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: FALSE-OR(<LITERAL-TOKEN>), srcloc-1 :: <source-location>,
     rhs-2 :: <PARAMETER>, srcloc-2 :: <source-location>,
     rhs-3 :: FALSE-OR(<EXPRESSION-PARSE>), srcloc-3 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <KEYWORD-PARAMETER>);
  // keyword-parameter -> keyword-opt variable default-opt
  values(select (prev-state)
           194 => 195;
           OTHERWISE => 191;
         end,
         begin
           make(<keyword-parameter>,
                name: rhs-2.param-name,
                type: rhs-2.param-type,
                keyword: if (rhs-1)
         		  rhs-1.token-literal.literal-value;
         		else
         		  rhs-2.param-name.token-symbol;
         		end,
                default: rhs-3);
         end);
end method production-246;

define method production-247
    (prev-state :: <integer>, srcloc-0 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: FALSE-OR(<LITERAL-TOKEN>));
  // keyword-opt -> epsilon
  values(186,
         begin
           #f;
         end);
end method production-247;

define method production-248
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <LITERAL-TOKEN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: FALSE-OR(<LITERAL-TOKEN>));
  // keyword-opt -> SYMBOL
  values(186,
         begin
           rhs-1;
         end);
end method production-248;

define method production-249
    (prev-state :: <integer>, srcloc-0 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: FALSE-OR(<EXPRESSION-PARSE>));
  // default-opt -> epsilon
  values(190,
         begin
           #f;
         end);
end method production-249;

define method production-250
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <OPERATOR-TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <EXPRESSION-PARSE>, srcloc-2 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: FALSE-OR(<EXPRESSION-PARSE>));
  // default-opt -> EQUAL expression
  values(190,
         begin
           rhs-2;
         end);
end method production-250;

define method production-251
    (prev-state :: <integer>, srcloc-0 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: FALSE-OR(<SYMBOL-TOKEN>));
  // macro-and-name-opt -> epsilon
  values(454,
         begin
           #f;
         end);
end method production-251;

define method production-252
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <IDENTIFIER-TOKEN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: FALSE-OR(<SYMBOL-TOKEN>));
  // macro-and-name-opt -> MACRO
  values(454,
         begin
           #f;
         end);
end method production-252;

define method production-253
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <IDENTIFIER-TOKEN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: FALSE-OR(<SYMBOL-TOKEN>));
  // macro-and-name-opt -> MACRO-NAME
  values(454,
         begin
           rhs-1;
         end);
end method production-253;

define method production-254
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <IDENTIFIER-TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <IDENTIFIER-TOKEN>, srcloc-2 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: FALSE-OR(<SYMBOL-TOKEN>));
  // macro-and-name-opt -> MACRO MACRO-NAME
  values(454,
         begin
           rhs-2;
         end);
end method production-254;

define method production-255
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <STRETCHY-VECTOR>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <MAIN-RULE-SET>);
  // main-rule-set -> main-rules
  values(438,
         begin
           make(<main-rule-set>, rules: as(<simple-object-vector>, rhs-1));
         end);
end method production-255;

define method production-256
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <MAIN-RULE>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <STRETCHY-VECTOR>);
  // main-rules -> main-rule
  values(436,
         begin
           stretchy-vector(rhs-1);
         end);
end method production-256;

define method production-257
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <STRETCHY-VECTOR>, srcloc-1 :: <source-location>,
     rhs-2 :: <MAIN-RULE>, srcloc-2 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <STRETCHY-VECTOR>);
  // main-rules -> main-rules main-rule
  values(436,
         begin
           add!(rhs-1, rhs-2);
         end);
end method production-257;

define method production-258
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <IDENTIFIER-TOKEN>, srcloc-2 :: <source-location>,
     rhs-3 :: <PATTERN>, srcloc-3 :: <source-location>,
     rhs-4 :: <TOKEN>, srcloc-4 :: <source-location>,
     rhs-5 :: <TOKEN>, srcloc-5 :: <source-location>,
     rhs-6 :: <TEMPLATE>, srcloc-6 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <MAIN-RULE>);
  // main-rule -> LEFT-BRACE DEFINE pattern RIGHT-BRACE ARROW rhs
  values(select (prev-state)
           436 => 437;
           OTHERWISE => 435;
         end,
         begin
           make-define-rule(rhs-3, rhs-6);
         end);
end method production-258;

define method production-259
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <IDENTIFIER-TOKEN>, srcloc-2 :: <source-location>,
     rhs-3 :: <PATTERN>, srcloc-3 :: <source-location>,
     rhs-4 :: <TOKEN>, srcloc-4 :: <source-location>,
     rhs-5 :: <TOKEN>, srcloc-5 :: <source-location>,
     rhs-6 :: <TEMPLATE>, srcloc-6 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <MAIN-RULE>);
  // main-rule -> LEFT-BRACE variable-name pattern RIGHT-BRACE ARROW rhs
  values(select (prev-state)
           436 => 437;
           OTHERWISE => 435;
         end,
         begin
           make-statement-or-function-rule(rhs-2, rhs-3, rhs-6);
         end);
end method production-259;

define method production-260
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TEMPLATE>, srcloc-1 :: <source-location>,
     rhs-2 :: FALSE-OR(<TOKEN>), srcloc-2 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <TEMPLATE>);
  // rhs -> rhs-expression semi-opt
  values(select (prev-state)
           444 => 445;
           433 => 434;
           OTHERWISE => 429;
         end,
         begin
           rhs-1;
         end);
end method production-260;

define method production-261
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <LITERAL-TEMPLATE>, srcloc-2 :: <source-location>,
     rhs-3 :: <TOKEN>, srcloc-3 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <TEMPLATE>);
  // rhs-expression -> LEFT-BRACE template-opt RIGHT-BRACE
  values(select (prev-state)
           423 => 424;
           420 => 421;
           OTHERWISE => 427;
         end,
         begin
           rhs-2;
         end);
end method production-261;

define method production-262
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <IDENTIFIER-TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <TOKEN>, srcloc-2 :: <source-location>,
     rhs-3 :: <SIMPLE-OBJECT-VECTOR>, srcloc-3 :: <source-location>,
     rhs-4 :: <TOKEN>, srcloc-4 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <TEMPLATE>);
  // rhs-expression -> ORDINARY-NAME LEFT-PAREN rhs-expressions-opt RIGHT-PAREN
  values(select (prev-state)
           423 => 424;
           420 => 421;
           OTHERWISE => 427;
         end,
         begin
           make(<procedural-template>, name: rhs-1, arguments: rhs-3);
         end);
end method production-262;

define method production-263
    (prev-state :: <integer>, srcloc-0 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <SIMPLE-OBJECT-VECTOR>);
  // rhs-expressions-opt -> epsilon
  values(425,
         begin
           #[];
         end);
end method production-263;

define method production-264
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <STRETCHY-VECTOR>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <SIMPLE-OBJECT-VECTOR>);
  // rhs-expressions-opt -> rhs-expressions
  values(425,
         begin
           as(<simple-object-vector>, rhs-1);
         end);
end method production-264;

define method production-265
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TEMPLATE>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <STRETCHY-VECTOR>);
  // rhs-expressions -> rhs-expression
  values(422,
         begin
           stretchy-vector(rhs-1);
         end);
end method production-265;

define method production-266
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <STRETCHY-VECTOR>, srcloc-1 :: <source-location>,
     rhs-2 :: <TOKEN>, srcloc-2 :: <source-location>,
     rhs-3 :: <TEMPLATE>, srcloc-3 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <STRETCHY-VECTOR>);
  // rhs-expressions -> rhs-expressions COMMA rhs-expression
  values(422,
         begin
           add!(rhs-1, rhs-3);
         end);
end method production-266;

define method production-267
    (prev-state :: <integer>, srcloc-0 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <STRETCHY-VECTOR>);
  // auxiliary-rule-sets-opt -> epsilon
  values(439,
         begin
           stretchy-vector();
         end);
end method production-267;

define method production-268
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <STRETCHY-VECTOR>, srcloc-1 :: <source-location>,
     rhs-2 :: <AUXILIARY-RULE-SET>, srcloc-2 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <STRETCHY-VECTOR>);
  // auxiliary-rule-sets-opt -> auxiliary-rule-sets-opt auxiliary-rule-set
  values(439,
         begin
           add!(rhs-1, rhs-2);
         end);
end method production-268;

define method production-269
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <LITERAL-TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <STRETCHY-VECTOR>, srcloc-2 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <AUXILIARY-RULE-SET>);
  // auxiliary-rule-set -> SYMBOL auxiliary-rules
  values(449,
         begin
           make(<auxiliary-rule-set>,
                name: rhs-1.token-literal.literal-value,
                rules: as(<simple-object-vector>, rhs-2));
         end);
end method production-269;

define method production-270
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <RULE>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <STRETCHY-VECTOR>);
  // auxiliary-rules -> auxiliary-rule
  values(447,
         begin
           stretchy-vector(rhs-1);
         end);
end method production-270;

define method production-271
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <STRETCHY-VECTOR>, srcloc-1 :: <source-location>,
     rhs-2 :: <RULE>, srcloc-2 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <STRETCHY-VECTOR>);
  // auxiliary-rules -> auxiliary-rules auxiliary-rule
  values(447,
         begin
           add!(rhs-1, rhs-2);
         end);
end method production-271;

define method production-272
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <PATTERN>, srcloc-2 :: <source-location>,
     rhs-3 :: <TOKEN>, srcloc-3 :: <source-location>,
     rhs-4 :: <TOKEN>, srcloc-4 :: <source-location>,
     rhs-5 :: <TEMPLATE>, srcloc-5 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <RULE>);
  // auxiliary-rule -> LEFT-BRACE pattern-opt RIGHT-BRACE ARROW rhs
  values(select (prev-state)
           447 => 448;
           OTHERWISE => 446;
         end,
         begin
           make(<auxiliary-rule>, pattern: rhs-2, template: rhs-5);
         end);
end method production-272;

define method production-273
    (prev-state :: <integer>, srcloc-0 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <PATTERN>);
  // pattern-opt -> epsilon
  values(select (prev-state)
           441 => 442;
           337 => 362;
           336 => 364;
           OTHERWISE => 366;
         end,
         begin
           make(<empty-pattern>);
         end);
end method production-273;

define method production-274
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <PATTERN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <PATTERN>);
  // pattern-opt -> pattern
  values(select (prev-state)
           441 => 442;
           337 => 362;
           336 => 364;
           OTHERWISE => 366;
         end,
         begin
           rhs-1;
         end);
end method production-274;

define method production-275
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <PATTERN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <PATTERN>);
  // pattern -> pattern-list
  values(select (prev-state)
           430 => 431;
           267 => 368;
           OTHERWISE => 361;
         end,
         begin
           rhs-1;
         end);
end method production-275;

define method production-276
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <SEMICOLON-PATTERN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <PATTERN>);
  // pattern -> pattern-aux
  values(select (prev-state)
           430 => 431;
           267 => 368;
           OTHERWISE => 361;
         end,
         begin
           rhs-1;
         end);
end method production-276;

define method production-277
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <PATTERN>, srcloc-1 :: <source-location>,
     rhs-2 :: <TOKEN>, srcloc-2 :: <source-location>,
     rhs-3 :: <PATTERN>, srcloc-3 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <SEMICOLON-PATTERN>);
  // pattern-aux -> pattern-list SEMICOLON pattern-list
  values(select (prev-state)
           357 => 359;
           OTHERWISE => 360;
         end,
         begin
           make(<semicolon-pattern>, left: rhs-1, right: rhs-3, last: #t);
         end);
end method production-277;

define method production-278
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <PATTERN>, srcloc-1 :: <source-location>,
     rhs-2 :: <TOKEN>, srcloc-2 :: <source-location>,
     rhs-3 :: <SEMICOLON-PATTERN>, srcloc-3 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <SEMICOLON-PATTERN>);
  // pattern-aux -> pattern-list SEMICOLON pattern-aux
  values(select (prev-state)
           357 => 359;
           OTHERWISE => 360;
         end,
         begin
           make(<semicolon-pattern>, left: rhs-1, right: rhs-3, last: #f);
         end);
end method production-278;

define method production-279
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <PATTERN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <PATTERN>);
  // pattern-list -> pattern-list-tail
  values(select (prev-state)
           357 => 358;
           OTHERWISE => 356;
         end,
         begin
           rhs-1;
         end);
end method production-279;

define method production-280
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <COMMA-PATTERN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <PATTERN>);
  // pattern-list -> pattern-list-aux
  values(select (prev-state)
           357 => 358;
           OTHERWISE => 356;
         end,
         begin
           rhs-1;
         end);
end method production-280;

define method production-281
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <PATTERN>, srcloc-1 :: <source-location>,
     rhs-2 :: <TOKEN>, srcloc-2 :: <source-location>,
     rhs-3 :: <PATTERN>, srcloc-3 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <COMMA-PATTERN>);
  // pattern-list-aux -> pattern-sequence COMMA pattern-list-tail
  values(select (prev-state)
           352 => 354;
           OTHERWISE => 355;
         end,
         begin
           make(<comma-pattern>, left: rhs-1, right: rhs-3, last: #t);
         end);
end method production-281;

define method production-282
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <PATTERN>, srcloc-1 :: <source-location>,
     rhs-2 :: <TOKEN>, srcloc-2 :: <source-location>,
     rhs-3 :: <COMMA-PATTERN>, srcloc-3 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <COMMA-PATTERN>);
  // pattern-list-aux -> pattern-sequence COMMA pattern-list-aux
  values(select (prev-state)
           352 => 354;
           OTHERWISE => 355;
         end,
         begin
           make(<comma-pattern>, left: rhs-1, right: rhs-3, last: #f);
         end);
end method production-282;

define method production-283
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <PATTERN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <PATTERN>);
  // pattern-list-tail -> pattern-sequence
  values(select (prev-state)
           352 => 353;
           OTHERWISE => 332;
         end,
         begin
           rhs-1;
         end);
end method production-283;

define method production-284
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <PROPERTY-LIST-PATTERN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <PATTERN>);
  // pattern-list-tail -> property-list-pattern
  values(select (prev-state)
           352 => 353;
           OTHERWISE => 332;
         end,
         begin
           rhs-1;
         end);
end method production-284;

define method production-285
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <SIMPLE-PATTERN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <PATTERN>);
  // pattern-sequence -> simple-pattern
  values(351,
         begin
           rhs-1;
         end);
end method production-285;

define method production-286
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <SEQUENTIAL-PATTERN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <PATTERN>);
  // pattern-sequence -> pattern-sequence-aux
  values(351,
         begin
           rhs-1;
         end);
end method production-286;

define method production-287
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <SIMPLE-PATTERN>, srcloc-1 :: <source-location>,
     rhs-2 :: <SIMPLE-PATTERN>, srcloc-2 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <SEQUENTIAL-PATTERN>);
  // pattern-sequence-aux -> simple-pattern simple-pattern
  values(select (prev-state)
           348 => 349;
           347 => 349;
           OTHERWISE => 350;
         end,
         begin
           make(<sequential-pattern>, left: rhs-1, right: rhs-2, last: #t);
         end);
end method production-287;

define method production-288
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <SIMPLE-PATTERN>, srcloc-1 :: <source-location>,
     rhs-2 :: <SEQUENTIAL-PATTERN>, srcloc-2 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <SEQUENTIAL-PATTERN>);
  // pattern-sequence-aux -> simple-pattern pattern-sequence-aux
  values(select (prev-state)
           348 => 349;
           347 => 349;
           OTHERWISE => 350;
         end,
         begin
           make(<sequential-pattern>, left: rhs-1, right: rhs-2, last: #f);
         end);
end method production-288;

define method production-289
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <IDENTIFIER-TOKEN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <SIMPLE-PATTERN>);
  // simple-pattern -> NAME
  values(select (prev-state)
           348 => 348;
           347 => 348;
           OTHERWISE => 347;
         end,
         begin
           make(<name-pattern>, name: rhs-1);
         end);
end method production-289;

define method production-290
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <SIMPLE-PATTERN>);
  // simple-pattern -> ARROW
  values(select (prev-state)
           348 => 348;
           347 => 348;
           OTHERWISE => 347;
         end,
         begin
           make(<arrow-pattern>);
         end);
end method production-290;

define method production-291
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <BRACKETED-PATTERN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <SIMPLE-PATTERN>);
  // simple-pattern -> bracketed-pattern
  values(select (prev-state)
           348 => 348;
           347 => 348;
           OTHERWISE => 347;
         end,
         begin
           rhs-1;
         end);
end method production-291;

define method production-292
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <PATTERN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <SIMPLE-PATTERN>);
  // simple-pattern -> bindings-pattern
  values(select (prev-state)
           348 => 348;
           347 => 348;
           OTHERWISE => 347;
         end,
         begin
           rhs-1;
         end);
end method production-292;

define method production-293
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <PATTERN-VARIABLE>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <SIMPLE-PATTERN>);
  // simple-pattern -> pattern-variable
  values(select (prev-state)
           348 => 348;
           347 => 348;
           OTHERWISE => 347;
         end,
         begin
           rhs-1;
         end);
end method production-293;

define method production-294
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <PATTERN>, srcloc-2 :: <source-location>,
     rhs-3 :: <TOKEN>, srcloc-3 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <BRACKETED-PATTERN>);
  // bracketed-pattern -> LEFT-PAREN pattern-opt RIGHT-PAREN
  values(338,
         begin
           make(<bracketed-pattern>, left-token: rhs-1, guts: rhs-2, right-token: rhs-3);
         end);
end method production-294;

define method production-295
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <PATTERN>, srcloc-2 :: <source-location>,
     rhs-3 :: <TOKEN>, srcloc-3 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <BRACKETED-PATTERN>);
  // bracketed-pattern -> LEFT-BRACKET pattern-opt RIGHT-BRACKET
  values(338,
         begin
           make(<bracketed-pattern>, left-token: rhs-1, guts: rhs-2, right-token: rhs-3);
         end);
end method production-295;

define method production-296
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <PATTERN>, srcloc-2 :: <source-location>,
     rhs-3 :: <TOKEN>, srcloc-3 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <BRACKETED-PATTERN>);
  // bracketed-pattern -> LEFT-BRACE pattern-opt RIGHT-BRACE
  values(338,
         begin
           make(<bracketed-pattern>, left-token: rhs-1, guts: rhs-2, right-token: rhs-3);
         end);
end method production-296;

define method production-297
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <PATTERN-VARIABLE>, srcloc-1 :: <source-location>,
     rhs-2 :: <TOKEN>, srcloc-2 :: <source-location>,
     rhs-3 :: <PATTERN-VARIABLE>, srcloc-3 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <PATTERN>);
  // bindings-pattern -> pattern-variable DOUBLE-COLON pattern-variable
  values(339,
         begin
           make(<variable-pattern>, name-pattern: rhs-1, type-pattern: rhs-3);
         end);
end method production-297;

define method production-298
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <PATTERN-VARIABLE>, srcloc-1 :: <source-location>,
     rhs-2 :: <OPERATOR-TOKEN>, srcloc-2 :: <source-location>,
     rhs-3 :: <PATTERN-VARIABLE>, srcloc-3 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <PATTERN>);
  // bindings-pattern -> pattern-variable EQUAL pattern-variable
  values(339,
         begin
           make(<bindings-pattern>, variables-pattern: rhs-1, value-pattern: rhs-3);
         end);
end method production-298;

define method production-299
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <PATTERN-VARIABLE>, srcloc-1 :: <source-location>,
     rhs-2 :: <TOKEN>, srcloc-2 :: <source-location>,
     rhs-3 :: <PATTERN-VARIABLE>, srcloc-3 :: <source-location>,
     rhs-4 :: <OPERATOR-TOKEN>, srcloc-4 :: <source-location>,
     rhs-5 :: <PATTERN-VARIABLE>, srcloc-5 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <PATTERN>);
  // bindings-pattern -> pattern-variable DOUBLE-COLON pattern-variable EQUAL pattern-variable
  values(339,
         begin
           make(<bindings-pattern>,
                variables-pattern: 
         	 make(<variable-pattern>, name-pattern: rhs-1, type-pattern: rhs-3),
                value-pattern: rhs-5);
         end);
end method production-299;

define method production-300
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <IDENTIFIER-TOKEN>, srcloc-2 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <PATTERN-VARIABLE>);
  // pattern-variable -> QUESTION NAME
  values(select (prev-state)
           345 => 346;
           343 => 344;
           341 => 342;
           268 => 273;
           OTHERWISE => 340;
         end,
         begin
           make(<pattern-variable>, source-location: simplify-source-location(srcloc-0),
                name: rhs-2.token-symbol);
         end);
end method production-300;

define method production-301
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <CONSTRAINED-NAME-TOKEN>, srcloc-2 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <PATTERN-VARIABLE>);
  // pattern-variable -> QUESTION CONSTRAINED-NAME
  values(select (prev-state)
           345 => 346;
           343 => 344;
           341 => 342;
           268 => 273;
           OTHERWISE => 340;
         end,
         begin
           make(<pattern-variable>, source-location: simplify-source-location(srcloc-0),
                name: rhs-2.token-symbol, constraint: rhs-2.token-constraint);
         end);
end method production-301;

define method production-302
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <PATTERN-VARIABLE>);
  // pattern-variable -> ELLIPSIS
  values(select (prev-state)
           345 => 346;
           343 => 344;
           341 => 342;
           268 => 273;
           OTHERWISE => 340;
         end,
         begin
           make(<pattern-variable>, source-location: simplify-source-location(srcloc-1),
                name: #f, constraint: #"*");
         end);
end method production-302;

define method production-303
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <PATTERN-VARIABLE>, srcloc-2 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <PROPERTY-LIST-PATTERN>);
  // property-list-pattern -> REST pattern-variable
  values(331,
         begin
           make(<property-list-pattern>, rest: rhs-2);
         end);
end method production-303;

define method production-304
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <PATTERN-VARIABLE>, srcloc-2 :: <source-location>,
     rhs-3 :: <TOKEN>, srcloc-3 :: <source-location>,
     rhs-4 :: <TOKEN>, srcloc-4 :: <source-location>,
     rhs-5 :: <PROPERTY-LIST-PATTERN>, srcloc-5 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <PROPERTY-LIST-PATTERN>);
  // property-list-pattern -> REST pattern-variable COMMA KEY pattern-keywords-opt
  values(331,
         begin
           rhs-5.plistpat-rest := rhs-2;
           rhs-5;
         end);
end method production-304;

define method production-305
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <PROPERTY-LIST-PATTERN>, srcloc-2 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <PROPERTY-LIST-PATTERN>);
  // property-list-pattern -> KEY pattern-keywords-opt
  values(331,
         begin
           rhs-2;
         end);
end method production-305;

define method production-306
    (prev-state :: <integer>, srcloc-0 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <PROPERTY-LIST-PATTERN>);
  // pattern-keywords-opt -> epsilon
  values(select (prev-state)
           329 => 330;
           OTHERWISE => 328;
         end,
         begin
           make(<property-list-pattern>);
         end);
end method production-306;

define method production-307
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <PROPERTY-LIST-PATTERN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <PROPERTY-LIST-PATTERN>);
  // pattern-keywords-opt -> pattern-keywords
  values(select (prev-state)
           329 => 330;
           OTHERWISE => 328;
         end,
         begin
           rhs-1;
         end);
end method production-307;

define method production-308
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <PROPERTY-LIST-PATTERN>);
  // pattern-keywords -> ALL-KEYS
  values(327,
         begin
           make(<property-list-pattern>, keys: #[], all-keys: #t);
         end);
end method production-308;

define method production-309
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <STRETCHY-VECTOR>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <PROPERTY-LIST-PATTERN>);
  // pattern-keywords -> pattern-keywords-aux
  values(327,
         begin
           make(<property-list-pattern>, keys: as(<simple-object-vector>, rhs-1));
         end);
end method production-309;

define method production-310
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <STRETCHY-VECTOR>, srcloc-1 :: <source-location>,
     rhs-2 :: <TOKEN>, srcloc-2 :: <source-location>,
     rhs-3 :: <TOKEN>, srcloc-3 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <PROPERTY-LIST-PATTERN>);
  // pattern-keywords -> pattern-keywords-aux COMMA ALL-KEYS
  values(327,
         begin
           make(<property-list-pattern>, keys: as(<simple-object-vector>, rhs-1),
                all-keys: #t);
         end);
end method production-310;

define method production-311
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <PATTERN-KEYWORD>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <STRETCHY-VECTOR>);
  // pattern-keywords-aux -> pattern-keyword
  values(323,
         begin
           stretchy-vector(rhs-1);
         end);
end method production-311;

define method production-312
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <STRETCHY-VECTOR>, srcloc-1 :: <source-location>,
     rhs-2 :: <TOKEN>, srcloc-2 :: <source-location>,
     rhs-3 :: <PATTERN-KEYWORD>, srcloc-3 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <STRETCHY-VECTOR>);
  // pattern-keywords-aux -> pattern-keywords-aux COMMA pattern-keyword
  values(323,
         begin
           add!(rhs-1, rhs-3);
         end);
end method production-312;

define method production-313
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <IDENTIFIER-TOKEN>, srcloc-2 :: <source-location>,
     rhs-3 :: FALSE-OR(<LITERAL-TEMPLATE>), srcloc-3 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <PATTERN-KEYWORD>);
  // pattern-keyword -> QUESTION NAME macro-default-opt
  values(select (prev-state)
           324 => 325;
           OTHERWISE => 322;
         end,
         begin
           make(<pattern-keyword>,
                source-location:
         	 simplify-source-location(source-location-spanning(srcloc-1, srcloc-2)),
                name: rhs-2.token-symbol, default: rhs-3);
         end);
end method production-313;

define method production-314
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <CONSTRAINED-NAME-TOKEN>, srcloc-2 :: <source-location>,
     rhs-3 :: FALSE-OR(<LITERAL-TEMPLATE>), srcloc-3 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <PATTERN-KEYWORD>);
  // pattern-keyword -> QUESTION CONSTRAINED-NAME macro-default-opt
  values(select (prev-state)
           324 => 325;
           OTHERWISE => 322;
         end,
         begin
           make(<pattern-keyword>,
                source-location:
         	 simplify-source-location(source-location-spanning(srcloc-1, srcloc-2)),
                name: rhs-2.token-symbol, constraint: rhs-2.token-constraint, default: rhs-3);
         end);
end method production-314;

define method production-315
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <IDENTIFIER-TOKEN>, srcloc-2 :: <source-location>,
     rhs-3 :: FALSE-OR(<LITERAL-TEMPLATE>), srcloc-3 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <PATTERN-KEYWORD>);
  // pattern-keyword -> DOUBLE-QUESTION NAME macro-default-opt
  values(select (prev-state)
           324 => 325;
           OTHERWISE => 322;
         end,
         begin
           make(<pattern-keyword>,
                source-location:
         	 simplify-source-location(source-location-spanning(srcloc-1, srcloc-2)),
                name: rhs-2.token-symbol, default: rhs-3, all: #t);
         end);
end method production-315;

define method production-316
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <CONSTRAINED-NAME-TOKEN>, srcloc-2 :: <source-location>,
     rhs-3 :: FALSE-OR(<LITERAL-TEMPLATE>), srcloc-3 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <PATTERN-KEYWORD>);
  // pattern-keyword -> DOUBLE-QUESTION CONSTRAINED-NAME macro-default-opt
  values(select (prev-state)
           324 => 325;
           OTHERWISE => 322;
         end,
         begin
           make(<pattern-keyword>,
                source-location:
         	 simplify-source-location(source-location-spanning(srcloc-1, srcloc-2)),
                name: rhs-2.token-symbol, constraint: rhs-2.token-constraint,
                default: rhs-3, all: #t);
         end);
end method production-316;

define method production-317
    (prev-state :: <integer>, srcloc-0 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: FALSE-OR(<LITERAL-TEMPLATE>));
  // macro-default-opt -> epsilon
  values(select (prev-state)
           320 => 321;
           318 => 319;
           315 => 316;
           OTHERWISE => 314;
         end,
         begin
           #f;
         end);
end method production-317;

define method production-318
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <OPERATOR-TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <STRETCHY-VECTOR>, srcloc-2 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: FALSE-OR(<LITERAL-TEMPLATE>));
  // macro-default-opt -> EQUAL macro-default-elements
  values(select (prev-state)
           320 => 321;
           318 => 319;
           315 => 316;
           OTHERWISE => 314;
         end,
         begin
           make(<literal-template>, elements: as(<simple-object-vector>, rhs-2));
         end);
end method production-318;

define method production-319
    (prev-state :: <integer>, srcloc-0 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <STRETCHY-VECTOR>);
  // macro-default-elements -> epsilon
  values(280,
         begin
           stretchy-vector();
         end);
end method production-319;

define method production-320
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <STRETCHY-VECTOR>, srcloc-1 :: <source-location>,
     rhs-2 :: TYPE-UNION(<TOKEN>, <PATTERN-VARIABLE-REFERENCE>, <BRACKETED-ELEMENT>), srcloc-2 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <STRETCHY-VECTOR>);
  // macro-default-elements -> macro-default-elements macro-default-element
  values(280,
         begin
           add!(rhs-1, rhs-2);
         end);
end method production-320;

define method production-321
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: TYPE-UNION(<TOKEN>, <PATTERN-VARIABLE-REFERENCE>), srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: TYPE-UNION(<TOKEN>, <PATTERN-VARIABLE-REFERENCE>, <BRACKETED-ELEMENT>));
  // macro-default-element -> simple-template-element
  values(select (prev-state)
           295 => 308;
           OTHERWISE => 313;
         end,
         begin
           rhs-1;
         end);
end method production-321;

define method production-322
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <TEMPLATE>, srcloc-2 :: <source-location>,
     rhs-3 :: <TOKEN>, srcloc-3 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: TYPE-UNION(<TOKEN>, <PATTERN-VARIABLE-REFERENCE>, <BRACKETED-ELEMENT>));
  // macro-default-element -> LEFT-PAREN bracketed-macro-default-opt RIGHT-PAREN
  values(select (prev-state)
           295 => 308;
           OTHERWISE => 313;
         end,
         begin
           make(<bracketed-element>, left-token: rhs-1, guts: rhs-2, right-token: rhs-3);
         end);
end method production-322;

define method production-323
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <TEMPLATE>, srcloc-2 :: <source-location>,
     rhs-3 :: <TOKEN>, srcloc-3 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: TYPE-UNION(<TOKEN>, <PATTERN-VARIABLE-REFERENCE>, <BRACKETED-ELEMENT>));
  // macro-default-element -> LEFT-BRACKET bracketed-macro-default-opt RIGHT-BRACKET
  values(select (prev-state)
           295 => 308;
           OTHERWISE => 313;
         end,
         begin
           make(<bracketed-element>, left-token: rhs-1, guts: rhs-2, right-token: rhs-3);
         end);
end method production-323;

define method production-324
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <TEMPLATE>, srcloc-2 :: <source-location>,
     rhs-3 :: <TOKEN>, srcloc-3 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: TYPE-UNION(<TOKEN>, <PATTERN-VARIABLE-REFERENCE>, <BRACKETED-ELEMENT>));
  // macro-default-element -> LEFT-BRACE bracketed-macro-default-opt RIGHT-BRACE
  values(select (prev-state)
           295 => 308;
           OTHERWISE => 313;
         end,
         begin
           make(<bracketed-element>, left-token: rhs-1, guts: rhs-2, right-token: rhs-3);
         end);
end method production-324;

define method production-325
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <TEMPLATE>, srcloc-2 :: <source-location>,
     rhs-3 :: <TOKEN>, srcloc-3 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: TYPE-UNION(<TOKEN>, <PATTERN-VARIABLE-REFERENCE>, <BRACKETED-ELEMENT>));
  // macro-default-element -> SHARP-PAREN bracketed-macro-default-opt RIGHT-PAREN
  values(select (prev-state)
           295 => 308;
           OTHERWISE => 313;
         end,
         begin
           make(<bracketed-element>, left-token: rhs-1, guts: rhs-2, right-token: rhs-3);
         end);
end method production-325;

define method production-326
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <TEMPLATE>, srcloc-2 :: <source-location>,
     rhs-3 :: <TOKEN>, srcloc-3 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: TYPE-UNION(<TOKEN>, <PATTERN-VARIABLE-REFERENCE>, <BRACKETED-ELEMENT>));
  // macro-default-element -> SHARP-BRACKET bracketed-macro-default-opt RIGHT-BRACKET
  values(select (prev-state)
           295 => 308;
           OTHERWISE => 313;
         end,
         begin
           make(<bracketed-element>, left-token: rhs-1, guts: rhs-2, right-token: rhs-3);
         end);
end method production-326;

define method production-327
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <STRETCHY-VECTOR>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <TEMPLATE>);
  // bracketed-macro-default-opt -> bracketed-macro-default-elements
  values(select (prev-state)
           305 => 306;
           302 => 303;
           299 => 300;
           296 => 297;
           OTHERWISE => 311;
         end,
         begin
           make(<literal-template>, elements: as(<simple-object-vector>, rhs-1));
         end);
end method production-327;

define method production-328
    (prev-state :: <integer>, srcloc-0 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <STRETCHY-VECTOR>);
  // bracketed-macro-default-elements -> epsilon
  values(295,
         begin
           stretchy-vector();
         end);
end method production-328;

define method production-329
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <STRETCHY-VECTOR>, srcloc-1 :: <source-location>,
     rhs-2 :: TYPE-UNION(<TOKEN>, <PATTERN-VARIABLE-REFERENCE>, <BRACKETED-ELEMENT>), srcloc-2 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <STRETCHY-VECTOR>);
  // bracketed-macro-default-elements -> bracketed-macro-default-elements macro-default-element
  values(295,
         begin
           add!(rhs-1, rhs-2);
         end);
end method production-329;

define method production-330
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <STRETCHY-VECTOR>, srcloc-1 :: <source-location>,
     rhs-2 :: <TOKEN>, srcloc-2 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <STRETCHY-VECTOR>);
  // bracketed-macro-default-elements -> bracketed-macro-default-elements COMMA
  values(295,
         begin
           add!(rhs-1, rhs-2);
         end);
end method production-330;

define method production-331
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <STRETCHY-VECTOR>, srcloc-1 :: <source-location>,
     rhs-2 :: <TOKEN>, srcloc-2 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <STRETCHY-VECTOR>);
  // bracketed-macro-default-elements -> bracketed-macro-default-elements SEMICOLON
  values(295,
         begin
           add!(rhs-1, rhs-2);
         end);
end method production-331;

define method production-332
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <STRETCHY-VECTOR>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <LITERAL-TEMPLATE>);
  // template-opt -> template-elements
  values(select (prev-state)
           388 => 389;
           385 => 386;
           382 => 383;
           379 => 380;
           376 => 377;
           OTHERWISE => 417;
         end,
         begin
           make(<literal-template>, elements: as(<simple-object-vector>, rhs-1));
         end);
end method production-332;

define method production-333
    (prev-state :: <integer>, srcloc-0 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <STRETCHY-VECTOR>);
  // template-elements -> epsilon
  values(372,
         begin
           stretchy-vector();
         end);
end method production-333;

define method production-334
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <STRETCHY-VECTOR>, srcloc-1 :: <source-location>,
     rhs-2 :: TYPE-UNION(<TOKEN>, <PATTERN-VARIABLE-REFERENCE>, <BRACKETED-ELEMENT>), srcloc-2 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <STRETCHY-VECTOR>);
  // template-elements -> template-elements template-element
  values(372,
         begin
           add!(rhs-1, rhs-2);
         end);
end method production-334;

define method production-335
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: TYPE-UNION(<TOKEN>, <PATTERN-VARIABLE-REFERENCE>), srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: TYPE-UNION(<TOKEN>, <PATTERN-VARIABLE-REFERENCE>, <BRACKETED-ELEMENT>));
  // template-element -> simple-template-element
  values(416,
         begin
           rhs-1;
         end);
end method production-335;

define method production-336
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: TYPE-UNION(<TOKEN>, <PATTERN-VARIABLE-REFERENCE>, <BRACKETED-ELEMENT>));
  // template-element -> SEMICOLON
  values(416,
         begin
           rhs-1;
         end);
end method production-336;

define method production-337
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: TYPE-UNION(<TOKEN>, <PATTERN-VARIABLE-REFERENCE>, <BRACKETED-ELEMENT>));
  // template-element -> COMMA
  values(416,
         begin
           rhs-1;
         end);
end method production-337;

define method production-338
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <LITERAL-TEMPLATE>, srcloc-2 :: <source-location>,
     rhs-3 :: <TOKEN>, srcloc-3 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: TYPE-UNION(<TOKEN>, <PATTERN-VARIABLE-REFERENCE>, <BRACKETED-ELEMENT>));
  // template-element -> LEFT-PAREN template-opt RIGHT-PAREN
  values(416,
         begin
           make(<bracketed-element>, left-token: rhs-1, guts: rhs-2, right-token: rhs-3);
         end);
end method production-338;

define method production-339
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <LITERAL-TEMPLATE>, srcloc-2 :: <source-location>,
     rhs-3 :: <TOKEN>, srcloc-3 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: TYPE-UNION(<TOKEN>, <PATTERN-VARIABLE-REFERENCE>, <BRACKETED-ELEMENT>));
  // template-element -> LEFT-BRACKET template-opt RIGHT-BRACKET
  values(416,
         begin
           make(<bracketed-element>, left-token: rhs-1, guts: rhs-2, right-token: rhs-3);
         end);
end method production-339;

define method production-340
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <LITERAL-TEMPLATE>, srcloc-2 :: <source-location>,
     rhs-3 :: <TOKEN>, srcloc-3 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: TYPE-UNION(<TOKEN>, <PATTERN-VARIABLE-REFERENCE>, <BRACKETED-ELEMENT>));
  // template-element -> LEFT-BRACE template-opt RIGHT-BRACE
  values(416,
         begin
           make(<bracketed-element>, left-token: rhs-1, guts: rhs-2, right-token: rhs-3);
         end);
end method production-340;

define method production-341
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <LITERAL-TEMPLATE>, srcloc-2 :: <source-location>,
     rhs-3 :: <TOKEN>, srcloc-3 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: TYPE-UNION(<TOKEN>, <PATTERN-VARIABLE-REFERENCE>, <BRACKETED-ELEMENT>));
  // template-element -> SHARP-PAREN template-opt RIGHT-PAREN
  values(416,
         begin
           make(<bracketed-element>, left-token: rhs-1, guts: rhs-2, right-token: rhs-3);
         end);
end method production-341;

define method production-342
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <LITERAL-TEMPLATE>, srcloc-2 :: <source-location>,
     rhs-3 :: <TOKEN>, srcloc-3 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: TYPE-UNION(<TOKEN>, <PATTERN-VARIABLE-REFERENCE>, <BRACKETED-ELEMENT>));
  // template-element -> SHARP-BRACKET template-opt RIGHT-BRACKET
  values(416,
         begin
           make(<bracketed-element>, left-token: rhs-1, guts: rhs-2, right-token: rhs-3);
         end);
end method production-342;

define method production-343
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <IDENTIFIER-TOKEN>, srcloc-2 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: TYPE-UNION(<TOKEN>, <PATTERN-VARIABLE-REFERENCE>, <BRACKETED-ELEMENT>));
  // template-element -> QUESTION NAME
  values(416,
         begin
           make(<simple-pattern-variable-reference>, name: rhs-2);
         end);
end method production-343;

define method production-344
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <LITERAL-TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <TOKEN>, srcloc-2 :: <source-location>,
     rhs-3 :: <TOKEN>, srcloc-3 :: <source-location>,
     rhs-4 :: <IDENTIFIER-TOKEN>, srcloc-4 :: <source-location>,
     rhs-5 :: FALSE-OR(<BYTE-STRING>), srcloc-5 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: TYPE-UNION(<TOKEN>, <PATTERN-VARIABLE-REFERENCE>, <BRACKETED-ELEMENT>));
  // template-element -> STRING DOUBLE-SHARP QUESTION NAME name-suffix-opt
  values(416,
         begin
           make(<concatenating-pattern-variable-reference>,
                prefix: rhs-1.token-literal.literal-value, name: rhs-4, suffix: rhs-5);
         end);
end method production-344;

define method production-345
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <IDENTIFIER-TOKEN>, srcloc-2 :: <source-location>,
     rhs-3 :: <TOKEN>, srcloc-3 :: <source-location>,
     rhs-4 :: <LITERAL-TOKEN>, srcloc-4 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: TYPE-UNION(<TOKEN>, <PATTERN-VARIABLE-REFERENCE>, <BRACKETED-ELEMENT>));
  // template-element -> QUESTION NAME DOUBLE-SHARP STRING
  values(416,
         begin
           make(<concatenating-pattern-variable-reference>,
                prefix: #f, name: rhs-2, suffix: rhs-4.token-literal.literal-value);
         end);
end method production-345;

define method production-346
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <LITERAL-TOKEN>, srcloc-2 :: <source-location>,
     rhs-3 :: FALSE-OR(<BYTE-STRING>), srcloc-3 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: TYPE-UNION(<TOKEN>, <PATTERN-VARIABLE-REFERENCE>, <BRACKETED-ELEMENT>));
  // template-element -> QUESTION string-or-symbol name-suffix-opt
  values(416,
         begin
           make(<concatenating-pattern-variable-reference>,
                prefix: #f, name: rhs-2, suffix: rhs-3);
         end);
end method production-346;

define method production-347
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <LITERAL-TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <TOKEN>, srcloc-2 :: <source-location>,
     rhs-3 :: <TOKEN>, srcloc-3 :: <source-location>,
     rhs-4 :: <LITERAL-TOKEN>, srcloc-4 :: <source-location>,
     rhs-5 :: FALSE-OR(<BYTE-STRING>), srcloc-5 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: TYPE-UNION(<TOKEN>, <PATTERN-VARIABLE-REFERENCE>, <BRACKETED-ELEMENT>));
  // template-element -> STRING DOUBLE-SHARP QUESTION string-or-symbol name-suffix-opt
  values(416,
         begin
           make(<concatenating-pattern-variable-reference>,
                prefix: rhs-1.token-literal.literal-value, name: rhs-4, suffix: rhs-5);
         end);
end method production-347;

define method production-348
    (prev-state :: <integer>, srcloc-0 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: FALSE-OR(<BYTE-STRING>));
  // name-suffix-opt -> epsilon
  values(select (prev-state)
           406 => 407;
           404 => 405;
           OTHERWISE => 400;
         end,
         begin
           #f;
         end);
end method production-348;

define method production-349
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <LITERAL-TOKEN>, srcloc-2 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: FALSE-OR(<BYTE-STRING>));
  // name-suffix-opt -> DOUBLE-SHARP STRING
  values(select (prev-state)
           406 => 407;
           404 => 405;
           OTHERWISE => 400;
         end,
         begin
           rhs-2.token-literal.literal-value;
         end);
end method production-349;

define method production-350
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <LITERAL-TOKEN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <LITERAL-TOKEN>);
  // string-or-symbol -> STRING
  values(select (prev-state)
           403 => 406;
           OTHERWISE => 397;
         end,
         begin
           rhs-1;
         end);
end method production-350;

define method production-351
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <LITERAL-TOKEN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <LITERAL-TOKEN>);
  // string-or-symbol -> SYMBOL
  values(select (prev-state)
           403 => 406;
           OTHERWISE => 397;
         end,
         begin
           rhs-1;
         end);
end method production-351;

define method production-352
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <IDENTIFIER-TOKEN>, srcloc-2 :: <source-location>,
     rhs-3 :: FALSE-OR(<TOKEN>), srcloc-3 :: <source-location>,
     rhs-4 :: <TOKEN>, srcloc-4 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: TYPE-UNION(<TOKEN>, <PATTERN-VARIABLE-REFERENCE>, <BRACKETED-ELEMENT>));
  // template-element -> DOUBLE-QUESTION NAME separator-opt ELLIPSIS
  values(416,
         begin
           make(<sequence-pattern-variable-reference>, name: rhs-2, separator: rhs-3);
         end);
end method production-352;

define method production-353
    (prev-state :: <integer>, srcloc-0 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: FALSE-OR(<TOKEN>));
  // separator-opt -> epsilon
  values(413,
         begin
           #f;
         end);
end method production-353;

define method production-354
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: FALSE-OR(<TOKEN>));
  // separator-opt -> SEMICOLON
  values(413,
         begin
           rhs-1;
         end);
end method production-354;

define method production-355
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: FALSE-OR(<TOKEN>));
  // separator-opt -> COMMA
  values(413,
         begin
           rhs-1;
         end);
end method production-355;

define method production-356
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <OPERATOR-TOKEN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: FALSE-OR(<TOKEN>));
  // separator-opt -> BINARY-OPERATOR
  values(413,
         begin
           rhs-1;
         end);
end method production-356;

define method production-357
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: TYPE-UNION(<TOKEN>, <PATTERN-VARIABLE-REFERENCE>, <BRACKETED-ELEMENT>));
  // template-element -> ELLIPSIS
  values(416,
         begin
           make(<ellipsis-pattern-variable-reference>, name: rhs-1);
         end);
end method production-357;

define method production-358
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <IDENTIFIER-TOKEN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: TYPE-UNION(<TOKEN>, <PATTERN-VARIABLE-REFERENCE>));
  // simple-template-element -> NAME
  values(select (prev-state)
           372 => 373;
           OTHERWISE => 293;
         end,
         begin
           rhs-1;
         end);
end method production-358;

define method production-359
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <LITERAL-TOKEN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: TYPE-UNION(<TOKEN>, <PATTERN-VARIABLE-REFERENCE>));
  // simple-template-element -> SYMBOL
  values(select (prev-state)
           372 => 373;
           OTHERWISE => 293;
         end,
         begin
           rhs-1;
         end);
end method production-359;

define method production-360
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <LITERAL-TOKEN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: TYPE-UNION(<TOKEN>, <PATTERN-VARIABLE-REFERENCE>));
  // simple-template-element -> LITERAL
  values(select (prev-state)
           372 => 373;
           OTHERWISE => 293;
         end,
         begin
           rhs-1;
         end);
end method production-360;

define method production-361
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <LITERAL-TOKEN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: TYPE-UNION(<TOKEN>, <PATTERN-VARIABLE-REFERENCE>));
  // simple-template-element -> STRING
  values(select (prev-state)
           372 => 373;
           OTHERWISE => 293;
         end,
         begin
           rhs-1;
         end);
end method production-361;

define method production-362
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <IDENTIFIER-TOKEN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: TYPE-UNION(<TOKEN>, <PATTERN-VARIABLE-REFERENCE>));
  // simple-template-element -> OPERATOR
  values(select (prev-state)
           372 => 373;
           OTHERWISE => 293;
         end,
         begin
           rhs-1;
         end);
end method production-362;

define method production-363
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: TYPE-UNION(<TOKEN>, <PATTERN-VARIABLE-REFERENCE>));
  // simple-template-element -> SHARP-WORD
  values(select (prev-state)
           372 => 373;
           OTHERWISE => 293;
         end,
         begin
           rhs-1;
         end);
end method production-363;

define method production-364
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: TYPE-UNION(<TOKEN>, <PATTERN-VARIABLE-REFERENCE>));
  // simple-template-element -> DOT
  values(select (prev-state)
           372 => 373;
           OTHERWISE => 293;
         end,
         begin
           rhs-1;
         end);
end method production-364;

define method production-365
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: TYPE-UNION(<TOKEN>, <PATTERN-VARIABLE-REFERENCE>));
  // simple-template-element -> DOUBLE-COLON
  values(select (prev-state)
           372 => 373;
           OTHERWISE => 293;
         end,
         begin
           rhs-1;
         end);
end method production-365;

define method production-366
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: TYPE-UNION(<TOKEN>, <PATTERN-VARIABLE-REFERENCE>));
  // simple-template-element -> ARROW
  values(select (prev-state)
           372 => 373;
           OTHERWISE => 293;
         end,
         begin
           rhs-1;
         end);
end method production-366;

define method production-367
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <PRE-PARSED-TOKEN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: TYPE-UNION(<TOKEN>, <PATTERN-VARIABLE-REFERENCE>));
  // simple-template-element -> PARSED-CONSTANT
  values(select (prev-state)
           372 => 373;
           OTHERWISE => 293;
         end,
         begin
           rhs-1;
         end);
end method production-367;

define method production-368
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>,
     rhs-2 :: <IDENTIFIER-TOKEN>, srcloc-2 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: TYPE-UNION(<TOKEN>, <PATTERN-VARIABLE-REFERENCE>));
  // simple-template-element -> QUESTION-EQUAL NAME
  values(select (prev-state)
           372 => 373;
           OTHERWISE => 293;
         end,
         begin
           make(<unhygienic-pattern-variable-reference>, name: rhs-2);
         end);
end method production-368;

define method production-369
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <IDENTIFIER-TOKEN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <TOKEN>);
  // non-variable-name -> FUNCTION-WORD
  values(select (prev-state)
           237 => 240;
           OTHERWISE => 70;
         end,
         begin
           rhs-1;
         end);
end method production-369;

define method production-370
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <IDENTIFIER-TOKEN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: <TOKEN>);
  // non-variable-name -> BEGIN-WORD
  values(select (prev-state)
           237 => 240;
           OTHERWISE => 70;
         end,
         begin
           rhs-1;
         end);
end method production-370;

define method production-371
    (prev-state :: <integer>, srcloc-0 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: FALSE-OR(<TOKEN>));
  // semi-opt -> epsilon
  values(select (prev-state)
           427 => 428;
           233 => 234;
           OTHERWISE => 207;
         end,
         begin
           #f;
         end);
end method production-371;

define method production-372
    (prev-state :: <integer>, srcloc-0 :: <source-location>,
     rhs-1 :: <TOKEN>, srcloc-1 :: <source-location>)
    => (new-state :: <integer>, new-symbol :: FALSE-OR(<TOKEN>));
  // semi-opt -> SEMICOLON
  values(select (prev-state)
           427 => 428;
           233 => 234;
           OTHERWISE => 207;
         end,
         begin
           rhs-1;
         end);
end method production-372;

define constant $number-of-pops
  = #[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 1, 1, 3, 3, 1, 3, 1, 1, 1, 1, 1, 2, 2, 0, 1, 1, 2, 1, 3, 1, 1, 1, 1, 1, 1, 1, 0, 1, 2, 4, 0, 1, 1, 2, 1, 0, 1, 1, 2, 1, 0, 1, 1, 2, 1, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 1, 5, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 1, 7, 6, 6, 5, 4, 0, 1, 1, 2, 1, 2, 5, 9, 2, 1, 3, 3, 5, 0, 1, 1, 1, 4, 2, 1, 3, 1, 3, 1, 1, 1, 3, 1, 1, 3, 1, 1, 1, 2, 2, 4, 4, 3, 1, 1, 0, 1, 1, 3, 2, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 2, 1, 1, 5, 3, 3, 1, 1, 2, 0, 1, 1, 3, 1, 1, 1, 1, 2, 1, 1, 5, 3, 3, 1, 4, 3, 1, 2, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 2, 2, 2, 6, 1, 2, 1, 3, 4, 1, 2, 2, 0, 1, 2, 1, 2, 5, 7, 9, 1, 0, 1, 3, 1, 2, 4, 1, 2, 4, 1, 2, 3, 3, 1, 1, 3, 1, 3, 0, 1, 1, 2, 2, 3, 0, 1, 0, 2, 0, 1, 1, 2, 1, 1, 2, 6, 6, 2, 3, 4, 0, 1, 1, 3, 0, 2, 2, 1, 2, 5, 0, 1, 1, 1, 3, 3, 1, 1, 3, 3, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 5, 2, 2, 1, 2, 5, 2, 0, 1, 1, 1, 3, 1, 3, 3, 3, 3, 3, 0, 2, 0, 2, 1, 3, 3, 3, 3, 3, 1, 0, 2, 2, 2, 1, 0, 2, 1, 1, 1, 3, 3, 3, 3, 3, 2, 5, 4, 3, 5, 0, 2, 1, 1, 4, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 0, 1];

define constant $production-table :: <simple-object-vector>
  = vector(#f, #f, #f, #f, #f, #f, #f, #f, #f, #f, production-10, production-11, production-12, production-13, production-14, production-15, production-16, production-17, production-18, production-19, production-20, production-21, production-22, production-23, production-24, production-25, production-26, production-27, production-28, production-29, production-30, production-31, production-32, production-33, production-34, production-35, production-36, production-37, production-38, production-39, production-40, production-41, production-42, production-43, production-44, production-45, production-46, production-47, production-48, production-49, production-50, production-51, production-52, production-53, production-54, production-55, production-56, production-57, production-58, production-59, production-60, production-61, production-62, production-63, production-64, production-65, production-66, production-67, production-68, production-69, production-70, production-71, production-72, production-73, production-74, production-75, production-76, production-77, production-78, production-79, production-80, production-81, production-82, production-83, production-84, production-85, production-86, production-87, production-88, production-89, production-90, production-91, production-92, production-93, production-94, production-95, production-96, production-97, production-98, production-99, production-100, production-101, production-102, production-103, production-104, production-105, production-106, production-107, production-108, production-109, production-110, production-111, production-112, production-113, production-114, production-115, production-116, production-117, production-118, production-119, production-120, production-121, production-122, production-123, production-124, production-125, production-126, production-127, production-128, production-129, production-130, production-131, production-132, production-133, production-134, production-135, production-136, production-137, production-138, production-139, production-140, production-141, production-142, production-143, production-144, production-145, production-146, production-147, production-148, production-149, production-150, production-151, production-152, production-153, production-154, production-155, production-156, production-157, production-158, production-159, production-160, production-161, production-162, production-163, production-164, production-165, production-166, production-167, production-168, production-169, production-170, production-171, production-172, production-173, production-174, production-175, production-176, production-177, production-178, production-179, production-180, production-181, production-182, production-183, production-184, production-185, production-186, production-187, production-188, production-189, production-190, production-191, production-192, production-193, production-194, production-195, production-196, production-197, production-198, production-199, production-200, production-201, production-202, production-203, production-204, production-205, production-206, production-207, production-208, production-209, production-210, production-211, production-212, production-213, production-214, production-215, production-216, production-217, production-218, production-219, production-220, production-221, production-222, production-223, production-224, production-225, production-226, production-227, production-228, production-229, production-230, production-231, production-232, production-233, production-234, production-235, production-236, production-237, production-238, production-239, production-240, production-241, production-242, production-243, production-244, production-245, production-246, production-247, production-248, production-249, production-250, production-251, production-252, production-253, production-254, production-255, production-256, production-257, production-258, production-259, production-260, production-261, production-262, production-263, production-264, production-265, production-266, production-267, production-268, production-269, production-270, production-271, production-272, production-273, production-274, production-275, production-276, production-277, production-278, production-279, production-280, production-281, production-282, production-283, production-284, production-285, production-286, production-287, production-288, production-289, production-290, production-291, production-292, production-293, production-294, production-295, production-296, production-297, production-298, production-299, production-300, production-301, production-302, production-303, production-304, production-305, production-306, production-307, production-308, production-309, production-310, production-311, production-312, production-313, production-314, production-315, production-316, production-317, production-318, production-319, production-320, production-321, production-322, production-323, production-324, production-325, production-326, production-327, production-328, production-329, production-330, production-331, production-332, production-333, production-334, production-335, production-336, production-337, production-338, production-339, production-340, production-341, production-342, production-343, production-344, production-345, production-346, production-347, production-348, production-349, production-350, production-351, production-352, production-353, production-354, production-355, production-356, production-357, production-358, production-359, production-360, production-361, production-362, production-363, production-364, production-365, production-366, production-367, production-368, production-369, production-370, production-371, production-372);

define constant $source-record-start-state = 0;
define constant $expression-start-state = 495;
define constant $variable-start-state = 497;
define constant $bindings-start-state = 499;
define constant $body-opt-start-state = 501;
define constant $case-body-opt-start-state = 503;
define constant $property-list-opt-start-state = 533;
define constant $parameter-list-opt-start-state = 547;
define constant $variable-list-opt-start-state = 549;
define constant $macro-call-start-state = 551;


